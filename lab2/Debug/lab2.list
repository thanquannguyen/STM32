
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b40  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001aec  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d8  080067d8  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e0  080067e0  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e4  080067e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080067e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          00000274  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fad1  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288a  00000000  00000000  0002fb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc0  00000000  00000000  000332e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248e0  00000000  00000000  000340a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010863  00000000  00000000  00058988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d97e5  00000000  00000000  000691eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001429d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d58  00000000  00000000  00142a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000054 	.word	0x20000054
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004cd4 	.word	0x08004cd4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000058 	.word	0x20000058
 80001e8:	08004cd4 	.word	0x08004cd4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f001 fb0c 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f82e 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f89e 	bl	800063c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//  BSP_SDRAM_Init();
//  *((uint32_t*)SDRAM_DEVICE_ADDR)=0x12345678;
//  value=*((uint32_t*)SDRAM_DEVICE_ADDR);

  BSP_LCD_Init();//init LCD
 8000500:	f000 fca4 	bl	8000e4c <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000504:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000508:	2001      	movs	r0, #1
 800050a:	f000 fd21 	bl	8000f50 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 800050e:	2001      	movs	r0, #1
 8000510:	f000 fd82 	bl	8001018 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000514:	f000 ff34 	bl	8001380 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <main+0x58>)
 800051a:	f000 fdef 	bl	80010fc <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 800051e:	480a      	ldr	r0, [pc, #40]	; (8000548 <main+0x58>)
 8000520:	f000 fda2 	bl	8001068 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	f000 fd86 	bl	8001038 <BSP_LCD_SetTextColor>
  //write text
  BSP_LCD_DisplayStringAtLine(2,"Cube STM32");
 800052c:	4907      	ldr	r1, [pc, #28]	; (800054c <main+0x5c>)
 800052e:	2002      	movs	r0, #2
 8000530:	f000 ff0e 	bl	8001350 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(3,"BSP");
 8000534:	4906      	ldr	r1, [pc, #24]	; (8000550 <main+0x60>)
 8000536:	2003      	movs	r0, #3
 8000538:	f000 ff0a 	bl	8001350 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(4,"LCD DEMO");
 800053c:	4905      	ldr	r1, [pc, #20]	; (8000554 <main+0x64>)
 800053e:	2004      	movs	r0, #4
 8000540:	f000 ff06 	bl	8001350 <BSP_LCD_DisplayStringAtLine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x54>
 8000546:	bf00      	nop
 8000548:	ff0000ff 	.word	0xff0000ff
 800054c:	08004cec 	.word	0x08004cec
 8000550:	08004cf8 	.word	0x08004cf8
 8000554:	08004cfc 	.word	0x08004cfc

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fbac 	bl	8004cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <SystemClock_Config+0xdc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <SystemClock_Config+0xdc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <SystemClock_Config+0xdc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xe0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a25      	ldr	r2, [pc, #148]	; (8000638 <SystemClock_Config+0xe0>)
 80005a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <SystemClock_Config+0xe0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 80005cc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 f812 	bl	8002608 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ea:	f000 f841 	bl	8000670 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ee:	f001 ffbb 	bl	8002568 <HAL_PWREx_EnableOverDrive>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005f8:	f000 f83a 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fa6c 	bl	8002af8 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000626:	f000 f823 	bl	8000670 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_GPIO_Init+0x30>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <MX_GPIO_Init+0x30>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_GPIO_Init+0x30>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <HAL_MspInit+0x4c>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000690:	6453      	str	r3, [r2, #68]	; 0x44
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_MspInit+0x4c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_MspInit+0x4c>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	6413      	str	r3, [r2, #64]	; 0x40
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x4c>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f001 fa4c 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <SystemInit+0x20>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <SystemInit+0x20>)
 800072c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800077c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000760:	4c0b      	ldr	r4, [pc, #44]	; (8000790 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800076e:	f7ff ffd7 	bl	8000720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000772:	f004 fa83 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000776:	f7ff febb 	bl	80004f0 <main>
  bx  lr    
 800077a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800077c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000788:	080067e8 	.word	0x080067e8
  ldr r2, =_sbss
 800078c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000790:	200002c8 	.word	0x200002c8

08000794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC_IRQHandler>

08000796 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800079a:	f000 fa5d 	bl	8000c58 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800079e:	20ca      	movs	r0, #202	; 0xca
 80007a0:	f000 f95d 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80007a4:	20c3      	movs	r0, #195	; 0xc3
 80007a6:	f000 f967 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80007aa:	2008      	movs	r0, #8
 80007ac:	f000 f964 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80007b0:	2050      	movs	r0, #80	; 0x50
 80007b2:	f000 f961 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80007b6:	20cf      	movs	r0, #207	; 0xcf
 80007b8:	f000 f951 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 f95b 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80007c2:	20c1      	movs	r0, #193	; 0xc1
 80007c4:	f000 f958 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80007c8:	2030      	movs	r0, #48	; 0x30
 80007ca:	f000 f955 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80007ce:	20ed      	movs	r0, #237	; 0xed
 80007d0:	f000 f945 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80007d4:	2064      	movs	r0, #100	; 0x64
 80007d6:	f000 f94f 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80007da:	2003      	movs	r0, #3
 80007dc:	f000 f94c 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80007e0:	2012      	movs	r0, #18
 80007e2:	f000 f949 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80007e6:	2081      	movs	r0, #129	; 0x81
 80007e8:	f000 f946 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80007ec:	20e8      	movs	r0, #232	; 0xe8
 80007ee:	f000 f936 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80007f2:	2085      	movs	r0, #133	; 0x85
 80007f4:	f000 f940 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f93d 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80007fe:	2078      	movs	r0, #120	; 0x78
 8000800:	f000 f93a 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000804:	20cb      	movs	r0, #203	; 0xcb
 8000806:	f000 f92a 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800080a:	2039      	movs	r0, #57	; 0x39
 800080c:	f000 f934 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000810:	202c      	movs	r0, #44	; 0x2c
 8000812:	f000 f931 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f92e 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800081c:	2034      	movs	r0, #52	; 0x34
 800081e:	f000 f92b 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000822:	2002      	movs	r0, #2
 8000824:	f000 f928 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000828:	20f7      	movs	r0, #247	; 0xf7
 800082a:	f000 f918 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800082e:	2020      	movs	r0, #32
 8000830:	f000 f922 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000834:	20ea      	movs	r0, #234	; 0xea
 8000836:	f000 f912 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f91c 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000840:	2000      	movs	r0, #0
 8000842:	f000 f919 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000846:	20b1      	movs	r0, #177	; 0xb1
 8000848:	f000 f909 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 f913 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000852:	201b      	movs	r0, #27
 8000854:	f000 f910 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000858:	20b6      	movs	r0, #182	; 0xb6
 800085a:	f000 f900 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800085e:	200a      	movs	r0, #10
 8000860:	f000 f90a 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000864:	20a2      	movs	r0, #162	; 0xa2
 8000866:	f000 f907 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800086a:	20c0      	movs	r0, #192	; 0xc0
 800086c:	f000 f8f7 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000870:	2010      	movs	r0, #16
 8000872:	f000 f901 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000876:	20c1      	movs	r0, #193	; 0xc1
 8000878:	f000 f8f1 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800087c:	2010      	movs	r0, #16
 800087e:	f000 f8fb 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000882:	20c5      	movs	r0, #197	; 0xc5
 8000884:	f000 f8eb 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000888:	2045      	movs	r0, #69	; 0x45
 800088a:	f000 f8f5 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800088e:	2015      	movs	r0, #21
 8000890:	f000 f8f2 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000894:	20c7      	movs	r0, #199	; 0xc7
 8000896:	f000 f8e2 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800089a:	2090      	movs	r0, #144	; 0x90
 800089c:	f000 f8ec 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	f000 f8dc 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80008a6:	20c8      	movs	r0, #200	; 0xc8
 80008a8:	f000 f8e6 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80008ac:	20f2      	movs	r0, #242	; 0xf2
 80008ae:	f000 f8d6 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 f8e0 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80008b8:	20b0      	movs	r0, #176	; 0xb0
 80008ba:	f000 f8d0 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80008be:	20c2      	movs	r0, #194	; 0xc2
 80008c0:	f000 f8da 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80008c4:	20b6      	movs	r0, #182	; 0xb6
 80008c6:	f000 f8ca 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80008ca:	200a      	movs	r0, #10
 80008cc:	f000 f8d4 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80008d0:	20a7      	movs	r0, #167	; 0xa7
 80008d2:	f000 f8d1 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80008d6:	2027      	movs	r0, #39	; 0x27
 80008d8:	f000 f8ce 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80008dc:	2004      	movs	r0, #4
 80008de:	f000 f8cb 	bl	8000a78 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80008e2:	202a      	movs	r0, #42	; 0x2a
 80008e4:	f000 f8bb 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 f8c5 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f8c2 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 f8bf 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80008fa:	20ef      	movs	r0, #239	; 0xef
 80008fc:	f000 f8bc 	bl	8000a78 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000900:	202b      	movs	r0, #43	; 0x2b
 8000902:	f000 f8ac 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f000 f8b6 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800090c:	2000      	movs	r0, #0
 800090e:	f000 f8b3 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000912:	2001      	movs	r0, #1
 8000914:	f000 f8b0 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000918:	203f      	movs	r0, #63	; 0x3f
 800091a:	f000 f8ad 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800091e:	20f6      	movs	r0, #246	; 0xf6
 8000920:	f000 f89d 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000924:	2001      	movs	r0, #1
 8000926:	f000 f8a7 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f8a4 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000930:	2006      	movs	r0, #6
 8000932:	f000 f8a1 	bl	8000a78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000936:	202c      	movs	r0, #44	; 0x2c
 8000938:	f000 f891 	bl	8000a5e <ili9341_WriteReg>
  LCD_Delay(200);
 800093c:	20c8      	movs	r0, #200	; 0xc8
 800093e:	f000 fa79 	bl	8000e34 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000942:	2026      	movs	r0, #38	; 0x26
 8000944:	f000 f88b 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000948:	2001      	movs	r0, #1
 800094a:	f000 f895 	bl	8000a78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800094e:	20e0      	movs	r0, #224	; 0xe0
 8000950:	f000 f885 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000954:	200f      	movs	r0, #15
 8000956:	f000 f88f 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800095a:	2029      	movs	r0, #41	; 0x29
 800095c:	f000 f88c 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000960:	2024      	movs	r0, #36	; 0x24
 8000962:	f000 f889 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000966:	200c      	movs	r0, #12
 8000968:	f000 f886 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800096c:	200e      	movs	r0, #14
 800096e:	f000 f883 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000972:	2009      	movs	r0, #9
 8000974:	f000 f880 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000978:	204e      	movs	r0, #78	; 0x4e
 800097a:	f000 f87d 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800097e:	2078      	movs	r0, #120	; 0x78
 8000980:	f000 f87a 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000984:	203c      	movs	r0, #60	; 0x3c
 8000986:	f000 f877 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800098a:	2009      	movs	r0, #9
 800098c:	f000 f874 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000990:	2013      	movs	r0, #19
 8000992:	f000 f871 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000996:	2005      	movs	r0, #5
 8000998:	f000 f86e 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800099c:	2017      	movs	r0, #23
 800099e:	f000 f86b 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80009a2:	2011      	movs	r0, #17
 80009a4:	f000 f868 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 f865 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80009ae:	20e1      	movs	r0, #225	; 0xe1
 80009b0:	f000 f855 	bl	8000a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 f85f 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80009ba:	2016      	movs	r0, #22
 80009bc:	f000 f85c 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80009c0:	201b      	movs	r0, #27
 80009c2:	f000 f859 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80009c6:	2004      	movs	r0, #4
 80009c8:	f000 f856 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80009cc:	2011      	movs	r0, #17
 80009ce:	f000 f853 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 f850 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80009d8:	2031      	movs	r0, #49	; 0x31
 80009da:	f000 f84d 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80009de:	2033      	movs	r0, #51	; 0x33
 80009e0:	f000 f84a 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80009e4:	2042      	movs	r0, #66	; 0x42
 80009e6:	f000 f847 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80009ea:	2005      	movs	r0, #5
 80009ec:	f000 f844 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80009f0:	200c      	movs	r0, #12
 80009f2:	f000 f841 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80009f6:	200a      	movs	r0, #10
 80009f8:	f000 f83e 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80009fc:	2028      	movs	r0, #40	; 0x28
 80009fe:	f000 f83b 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000a02:	202f      	movs	r0, #47	; 0x2f
 8000a04:	f000 f838 	bl	8000a78 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000a08:	200f      	movs	r0, #15
 8000a0a:	f000 f835 	bl	8000a78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000a0e:	2011      	movs	r0, #17
 8000a10:	f000 f825 	bl	8000a5e <ili9341_WriteReg>
  LCD_Delay(200);
 8000a14:	20c8      	movs	r0, #200	; 0xc8
 8000a16:	f000 fa0d 	bl	8000e34 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000a1a:	2029      	movs	r0, #41	; 0x29
 8000a1c:	f000 f81f 	bl	8000a5e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000a20:	202c      	movs	r0, #44	; 0x2c
 8000a22:	f000 f81c 	bl	8000a5e <ili9341_WriteReg>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000a2e:	f000 f913 	bl	8000c58 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000a32:	2103      	movs	r1, #3
 8000a34:	20d3      	movs	r0, #211	; 0xd3
 8000a36:	f000 f82c 	bl	8000a92 <ili9341_ReadData>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29b      	uxth	r3, r3
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000a46:	2029      	movs	r0, #41	; 0x29
 8000a48:	f000 f809 	bl	8000a5e <ili9341_WriteReg>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f000 f802 	bl	8000a5e <ili9341_WriteReg>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f98e 	bl	8000d8c <LCD_IO_WriteReg>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f95f 	bl	8000d48 <LCD_IO_WriteData>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	80fb      	strh	r3, [r7, #6]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000aa2:	797a      	ldrb	r2, [r7, #5]
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f991 	bl	8000dd0 <LCD_IO_ReadData>
 8000aae:	4603      	mov	r3, r0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000abc:	23f0      	movs	r3, #240	; 0xf0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000acc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <SPIx_Init+0x6c>)
 8000ae2:	f003 fe73 	bl	80047cc <HAL_SPI_GetState>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d12b      	bne.n	8000b44 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <SPIx_Init+0x6c>)
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <SPIx_Init+0x70>)
 8000af0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <SPIx_Init+0x6c>)
 8000af4:	2218      	movs	r2, #24
 8000af6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <SPIx_Init+0x6c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <SPIx_Init+0x6c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <SPIx_Init+0x6c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <SPIx_Init+0x6c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <SPIx_Init+0x6c>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <SPIx_Init+0x6c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <SPIx_Init+0x6c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <SPIx_Init+0x6c>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <SPIx_Init+0x6c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <SPIx_Init+0x6c>)
 8000b32:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b36:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <SPIx_Init+0x6c>)
 8000b3a:	f000 f853 	bl	8000be4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000b3e:	4802      	ldr	r0, [pc, #8]	; (8000b48 <SPIx_Init+0x6c>)
 8000b40:	f003 f990 	bl	8003e64 <HAL_SPI_Init>
  } 
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000070 	.word	0x20000070
 8000b4c:	40015000 	.word	0x40015000

08000b50 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <SPIx_Read+0x38>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f107 0108 	add.w	r1, r7, #8
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <SPIx_Read+0x3c>)
 8000b6c:	f003 fb7b 	bl	8004266 <HAL_SPI_Receive>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000b7a:	f000 f827 	bl	8000bcc <SPIx_Error>
  }
  
  return readvalue;
 8000b7e:	68bb      	ldr	r3, [r7, #8]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000003c 	.word	0x2000003c
 8000b8c:	20000070 	.word	0x20000070

08000b90 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <SPIx_Write+0x34>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	1db9      	adds	r1, r7, #6
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <SPIx_Write+0x38>)
 8000ba8:	f003 fa21 	bl	8003fee <HAL_SPI_Transmit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000bb6:	f000 f809 	bl	8000bcc <SPIx_Error>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000003c 	.word	0x2000003c
 8000bc8:	20000070 	.word	0x20000070

08000bcc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <SPIx_Error+0x14>)
 8000bd2:	f003 f9d0 	bl	8003f76 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000bd6:	f7ff ff81 	bl	8000adc <SPIx_Init>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000070 	.word	0x20000070

08000be4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <SPIx_MspInit+0x6c>)
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <SPIx_MspInit+0x6c>)
 8000bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <SPIx_MspInit+0x6c>)
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <SPIx_MspInit+0x6c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <SPIx_MspInit+0x6c>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <SPIx_MspInit+0x6c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000c24:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000c36:	2305      	movs	r3, #5
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <SPIx_MspInit+0x70>)
 8000c42:	f001 facb 	bl	80021dc <HAL_GPIO_Init>
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40021400 	.word	0x40021400

08000c58 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000c5e:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <LCD_IO_Init+0xe0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d164      	bne.n	8000d30 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <LCD_IO_Init+0xe0>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a31      	ldr	r2, [pc, #196]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4827      	ldr	r0, [pc, #156]	; (8000d40 <LCD_IO_Init+0xe8>)
 8000ca2:	f001 fa9b 	bl	80021dc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4819      	ldr	r0, [pc, #100]	; (8000d40 <LCD_IO_Init+0xe8>)
 8000cdc:	f001 fa7e 	bl	80021dc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <LCD_IO_Init+0xe4>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LCD_IO_Init+0xec>)
 8000d14:	f001 fa62 	bl	80021dc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <LCD_IO_Init+0xec>)
 8000d1e:	f001 fc09 	bl	8002534 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000d22:	2201      	movs	r2, #1
 8000d24:	2104      	movs	r1, #4
 8000d26:	4807      	ldr	r0, [pc, #28]	; (8000d44 <LCD_IO_Init+0xec>)
 8000d28:	f001 fc04 	bl	8002534 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000d2c:	f7ff fed6 	bl	8000adc <SPIx_Init>
  }
}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000c8 	.word	0x200000c8
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020c00 	.word	0x40020c00
 8000d44:	40020800 	.word	0x40020800

08000d48 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <LCD_IO_WriteData+0x3c>)
 8000d5a:	f001 fbeb 	bl	8002534 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2104      	movs	r1, #4
 8000d62:	4809      	ldr	r0, [pc, #36]	; (8000d88 <LCD_IO_WriteData+0x40>)
 8000d64:	f001 fbe6 	bl	8002534 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff10 	bl	8000b90 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000d70:	2201      	movs	r2, #1
 8000d72:	2104      	movs	r1, #4
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <LCD_IO_WriteData+0x40>)
 8000d76:	f001 fbdd 	bl	8002534 <HAL_GPIO_WritePin>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020c00 	.word	0x40020c00
 8000d88:	40020800 	.word	0x40020800

08000d8c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <LCD_IO_WriteReg+0x3c>)
 8000d9e:	f001 fbc9 	bl	8002534 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000da2:	2200      	movs	r2, #0
 8000da4:	2104      	movs	r1, #4
 8000da6:	4809      	ldr	r0, [pc, #36]	; (8000dcc <LCD_IO_WriteReg+0x40>)
 8000da8:	f001 fbc4 	bl	8002534 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff feed 	bl	8000b90 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000db6:	2201      	movs	r2, #1
 8000db8:	2104      	movs	r1, #4
 8000dba:	4804      	ldr	r0, [pc, #16]	; (8000dcc <LCD_IO_WriteReg+0x40>)
 8000dbc:	f001 fbba 	bl	8002534 <HAL_GPIO_WritePin>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	40020800 	.word	0x40020800

08000dd0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000de4:	2200      	movs	r2, #0
 8000de6:	2104      	movs	r1, #4
 8000de8:	4810      	ldr	r0, [pc, #64]	; (8000e2c <LCD_IO_ReadData+0x5c>)
 8000dea:	f001 fba3 	bl	8002534 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	480e      	ldr	r0, [pc, #56]	; (8000e30 <LCD_IO_ReadData+0x60>)
 8000df6:	f001 fb9d 	bl	8002534 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fec7 	bl	8000b90 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fea3 	bl	8000b50 <SPIx_Read>
 8000e0a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <LCD_IO_ReadData+0x60>)
 8000e14:	f001 fb8e 	bl	8002534 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <LCD_IO_ReadData+0x5c>)
 8000e1e:	f001 fb89 	bl	8002534 <HAL_GPIO_WritePin>
  
  return readvalue;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020c00 	.word	0x40020c00

08000e34 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 fed9 	bl	8001bf4 <HAL_Delay>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8000e50:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e52:	4a2e      	ldr	r2, [pc, #184]	; (8000f0c <BSP_LCD_Init+0xc0>)
 8000e54:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000e56:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e58:	2209      	movs	r2, #9
 8000e5a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000e62:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e64:	221d      	movs	r2, #29
 8000e66:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e70:	f240 120d 	movw	r2, #269	; 0x10d
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e78:	f240 1243 	movw	r2, #323	; 0x143
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e80:	f240 1217 	movw	r2, #279	; 0x117
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8000e86:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e88:	f240 1247 	movw	r2, #327	; 0x147
 8000e8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <BSP_LCD_Init+0xc4>)
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <BSP_LCD_Init+0xc4>)
 8000eae:	22c0      	movs	r2, #192	; 0xc0
 8000eb0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <BSP_LCD_Init+0xc4>)
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <BSP_LCD_Init+0xc4>)
 8000eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000ec0:	4813      	ldr	r0, [pc, #76]	; (8000f10 <BSP_LCD_Init+0xc4>)
 8000ec2:	f002 f805 	bl	8002ed0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8000ede:	f000 fa5f 	bl	80013a0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <BSP_LCD_Init+0xbc>)
 8000ee4:	f002 fc4a 	bl	800377c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <BSP_LCD_Init+0xc8>)
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <BSP_LCD_Init+0xcc>)
 8000eec:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <BSP_LCD_Init+0xc8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8000ef6:	f000 fc41 	bl	800177c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <BSP_LCD_Init+0xd0>)
 8000efc:	f000 f8ce 	bl	800109c <BSP_LCD_SetFont>

  return LCD_OK;
 8000f00:	2300      	movs	r3, #0
}  
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000cc 	.word	0x200000cc
 8000f0c:	40016800 	.word	0x40016800
 8000f10:	200001b4 	.word	0x200001b4
 8000f14:	20000200 	.word	0x20000200
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	20000040 	.word	0x20000040

08000f20 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <BSP_LCD_GetXSize+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	4798      	blx	r3
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000200 	.word	0x20000200

08000f38 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <BSP_LCD_GetYSize+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	4798      	blx	r3
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000200 	.word	0x20000200

08000f50 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b090      	sub	sp, #64	; 0x40
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000f60:	f7ff ffde 	bl	8000f20 <BSP_LCD_GetXSize>
 8000f64:	4603      	mov	r3, r0
 8000f66:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000f6c:	f7ff ffe4 	bl	8000f38 <BSP_LCD_GetYSize>
 8000f70:	4603      	mov	r3, r0
 8000f72:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000f7c:	23ff      	movs	r3, #255	; 0xff
 8000f7e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000fa0:	f7ff ffbe 	bl	8000f20 <BSP_LCD_GetXSize>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000fa8:	f7ff ffc6 	bl	8000f38 <BSP_LCD_GetYSize>
 8000fac:	4603      	mov	r3, r0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000fba:	f002 fcb9 	bl	8003930 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000fbe:	88fa      	ldrh	r2, [r7, #6]
 8000fc0:	4913      	ldr	r1, [pc, #76]	; (8001010 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	3304      	adds	r3, #4
 8000fce:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000fd4:	88fa      	ldrh	r2, [r7, #6]
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <BSP_LCD_LayerDefaultInit+0xc4>)
 8000fe6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000fe8:	88fa      	ldrh	r2, [r7, #6]
 8000fea:	4909      	ldr	r1, [pc, #36]	; (8001010 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000ffa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000ffe:	f002 fcd5 	bl	80039ac <HAL_LTDC_EnableDither>
}
 8001002:	bf00      	nop
 8001004:	3740      	adds	r7, #64	; 0x40
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000cc 	.word	0x200000cc
 8001010:	200001e8 	.word	0x200001e8
 8001014:	20000040 	.word	0x20000040

08001018 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <BSP_LCD_SelectLayer+0x1c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200001e4 	.word	0x200001e4

08001038 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <BSP_LCD_SetTextColor+0x28>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <BSP_LCD_SetTextColor+0x2c>)
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200001e4 	.word	0x200001e4
 8001064:	200001e8 	.word	0x200001e8

08001068 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <BSP_LCD_SetBackColor+0x2c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4908      	ldr	r1, [pc, #32]	; (8001098 <BSP_LCD_SetBackColor+0x30>)
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	3304      	adds	r3, #4
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200001e4 	.word	0x200001e4
 8001098:	200001e8 	.word	0x200001e8

0800109c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <BSP_LCD_SetFont+0x2c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4908      	ldr	r1, [pc, #32]	; (80010cc <BSP_LCD_SetFont+0x30>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3308      	adds	r3, #8
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200001e4 	.word	0x200001e4
 80010cc:	200001e8 	.word	0x200001e8

080010d0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <BSP_LCD_GetFont+0x24>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <BSP_LCD_GetFont+0x28>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200001e4 	.word	0x200001e4
 80010f8:	200001e8 	.word	0x200001e8

080010fc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80010fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fe:	b085      	sub	sp, #20
 8001100:	af02      	add	r7, sp, #8
 8001102:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <BSP_LCD_Clear+0x48>)
 8001106:	681c      	ldr	r4, [r3, #0]
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <BSP_LCD_Clear+0x48>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <BSP_LCD_Clear+0x4c>)
 800110e:	2134      	movs	r1, #52	; 0x34
 8001110:	fb01 f303 	mul.w	r3, r1, r3
 8001114:	4413      	add	r3, r2
 8001116:	335c      	adds	r3, #92	; 0x5c
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	461e      	mov	r6, r3
 800111c:	f7ff ff00 	bl	8000f20 <BSP_LCD_GetXSize>
 8001120:	4605      	mov	r5, r0
 8001122:	f7ff ff09 	bl	8000f38 <BSP_LCD_GetYSize>
 8001126:	4602      	mov	r2, r0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4613      	mov	r3, r2
 8001132:	462a      	mov	r2, r5
 8001134:	4631      	mov	r1, r6
 8001136:	4620      	mov	r0, r4
 8001138:	f000 fae8 	bl	800170c <FillBuffer>
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001144:	200001e4 	.word	0x200001e4
 8001148:	200000cc 	.word	0x200000cc

0800114c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
 8001156:	460b      	mov	r3, r1
 8001158:	80bb      	strh	r3, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <BSP_LCD_DisplayChar+0x80>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	491b      	ldr	r1, [pc, #108]	; (80011d0 <BSP_LCD_DisplayChar+0x84>)
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	3308      	adds	r3, #8
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6819      	ldr	r1, [r3, #0]
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <BSP_LCD_DisplayChar+0x80>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4c14      	ldr	r4, [pc, #80]	; (80011d0 <BSP_LCD_DisplayChar+0x84>)
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4423      	add	r3, r4
 800118a:	3308      	adds	r3, #8
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001190:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <BSP_LCD_DisplayChar+0x80>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4c0d      	ldr	r4, [pc, #52]	; (80011d0 <BSP_LCD_DisplayChar+0x84>)
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4423      	add	r3, r4
 80011a4:	3308      	adds	r3, #8
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	3307      	adds	r3, #7
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	da00      	bge.n	80011b2 <BSP_LCD_DisplayChar+0x66>
 80011b0:	3307      	adds	r3, #7
 80011b2:	10db      	asrs	r3, r3, #3
 80011b4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80011b8:	18ca      	adds	r2, r1, r3
 80011ba:	88b9      	ldrh	r1, [r7, #4]
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f9ea 	bl	8001598 <DrawChar>
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	200001e4 	.word	0x200001e4
 80011d0:	200001e8 	.word	0x200001e8

080011d4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60ba      	str	r2, [r7, #8]
 80011dc:	461a      	mov	r2, r3
 80011de:	4603      	mov	r3, r0
 80011e0:	81fb      	strh	r3, [r7, #14]
 80011e2:	460b      	mov	r3, r1
 80011e4:	81bb      	strh	r3, [r7, #12]
 80011e6:	4613      	mov	r3, r2
 80011e8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80011ea:	2301      	movs	r3, #1
 80011ec:	83fb      	strh	r3, [r7, #30]
 80011ee:	2300      	movs	r3, #0
 80011f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80011fe:	e002      	b.n	8001206 <BSP_LCD_DisplayStringAt+0x32>
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	3301      	adds	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	617a      	str	r2, [r7, #20]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f6      	bne.n	8001200 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001212:	f7ff fe85 	bl	8000f20 <BSP_LCD_GetXSize>
 8001216:	4601      	mov	r1, r0
 8001218:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <BSP_LCD_DisplayStringAt+0x174>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	484b      	ldr	r0, [pc, #300]	; (800134c <BSP_LCD_DisplayStringAt+0x178>)
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4403      	add	r3, r0
 8001228:	3308      	adds	r3, #8
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001232:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d01c      	beq.n	8001274 <BSP_LCD_DisplayStringAt+0xa0>
 800123a:	2b03      	cmp	r3, #3
 800123c:	dc33      	bgt.n	80012a6 <BSP_LCD_DisplayStringAt+0xd2>
 800123e:	2b01      	cmp	r3, #1
 8001240:	d002      	beq.n	8001248 <BSP_LCD_DisplayStringAt+0x74>
 8001242:	2b02      	cmp	r3, #2
 8001244:	d019      	beq.n	800127a <BSP_LCD_DisplayStringAt+0xa6>
 8001246:	e02e      	b.n	80012a6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad1      	subs	r1, r2, r3
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <BSP_LCD_DisplayStringAt+0x174>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	483e      	ldr	r0, [pc, #248]	; (800134c <BSP_LCD_DisplayStringAt+0x178>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4403      	add	r3, r0
 800125e:	3308      	adds	r3, #8
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	889b      	ldrh	r3, [r3, #4]
 8001264:	fb01 f303 	mul.w	r3, r1, r3
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	b29a      	uxth	r2, r3
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	4413      	add	r3, r2
 8001270:	83fb      	strh	r3, [r7, #30]
      break;
 8001272:	e01b      	b.n	80012ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	83fb      	strh	r3, [r7, #30]
      break;
 8001278:	e018      	b.n	80012ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	b299      	uxth	r1, r3
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <BSP_LCD_DisplayStringAt+0x174>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4831      	ldr	r0, [pc, #196]	; (800134c <BSP_LCD_DisplayStringAt+0x178>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4403      	add	r3, r0
 8001292:	3308      	adds	r3, #8
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	889b      	ldrh	r3, [r3, #4]
 8001298:	fb11 f303 	smulbb	r3, r1, r3
 800129c:	b29a      	uxth	r2, r3
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	4413      	add	r3, r2
 80012a2:	83fb      	strh	r3, [r7, #30]
      break;
 80012a4:	e002      	b.n	80012ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	83fb      	strh	r3, [r7, #30]
      break;
 80012aa:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80012ac:	e01a      	b.n	80012e4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	89b9      	ldrh	r1, [r7, #12]
 80012b4:	8bfb      	ldrh	r3, [r7, #30]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff48 	bl	800114c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <BSP_LCD_DisplayStringAt+0x174>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4922      	ldr	r1, [pc, #136]	; (800134c <BSP_LCD_DisplayStringAt+0x178>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	3308      	adds	r3, #8
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	889a      	ldrh	r2, [r3, #4]
 80012d2:	8bfb      	ldrh	r3, [r7, #30]
 80012d4:	4413      	add	r3, r2
 80012d6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3301      	adds	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
    i++;
 80012de:	8bbb      	ldrh	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2dc      	uxtb	r4, r3
 80012f2:	f7ff fe15 	bl	8000f20 <BSP_LCD_GetXSize>
 80012f6:	8bb9      	ldrh	r1, [r7, #28]
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <BSP_LCD_DisplayStringAt+0x174>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4d13      	ldr	r5, [pc, #76]	; (800134c <BSP_LCD_DisplayStringAt+0x178>)
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	442b      	add	r3, r5
 8001308:	3308      	adds	r3, #8
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	fb01 f303 	mul.w	r3, r1, r3
 8001312:	1ac3      	subs	r3, r0, r3
 8001314:	b299      	uxth	r1, r3
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <BSP_LCD_DisplayStringAt+0x174>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <BSP_LCD_DisplayStringAt+0x178>)
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4403      	add	r3, r0
 8001326:	3308      	adds	r3, #8
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	889b      	ldrh	r3, [r3, #4]
 800132c:	4299      	cmp	r1, r3
 800132e:	bf2c      	ite	cs
 8001330:	2301      	movcs	r3, #1
 8001332:	2300      	movcc	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4023      	ands	r3, r4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1b7      	bne.n	80012ae <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bdb0      	pop	{r4, r5, r7, pc}
 8001348:	200001e4 	.word	0x200001e4
 800134c:	200001e8 	.word	0x200001e8

08001350 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800135c:	f7ff feb8 	bl	80010d0 <BSP_LCD_GetFont>
 8001360:	4603      	mov	r3, r0
 8001362:	88db      	ldrh	r3, [r3, #6]
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	fb12 f303 	smulbb	r3, r2, r3
 800136a:	b299      	uxth	r1, r3
 800136c:	2303      	movs	r3, #3
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff2f 	bl	80011d4 <BSP_LCD_DisplayStringAt>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <BSP_LCD_DisplayOn+0x1c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800138e:	4b03      	ldr	r3, [pc, #12]	; (800139c <BSP_LCD_DisplayOn+0x1c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4798      	blx	r3
  }
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000200 	.word	0x20000200

080013a0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	; 0x38
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
 80013aa:	4b61      	ldr	r3, [pc, #388]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a60      	ldr	r2, [pc, #384]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013be:	623b      	str	r3, [r7, #32]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	4b5a      	ldr	r3, [pc, #360]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a59      	ldr	r2, [pc, #356]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b57      	ldr	r3, [pc, #348]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	4b53      	ldr	r3, [pc, #332]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a52      	ldr	r2, [pc, #328]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b50      	ldr	r3, [pc, #320]	; (8001530 <BSP_LCD_MspInit+0x190>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a4b      	ldr	r2, [pc, #300]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <BSP_LCD_MspInit+0x190>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <BSP_LCD_MspInit+0x190>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a44      	ldr	r2, [pc, #272]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b42      	ldr	r3, [pc, #264]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <BSP_LCD_MspInit+0x190>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a36      	ldr	r2, [pc, #216]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a2f      	ldr	r2, [pc, #188]	; (8001530 <BSP_LCD_MspInit+0x190>)
 8001474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <BSP_LCD_MspInit+0x190>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001486:	f641 0358 	movw	r3, #6232	; 0x1858
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001494:	2302      	movs	r3, #2
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001498:	230e      	movs	r3, #14
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	4824      	ldr	r0, [pc, #144]	; (8001534 <BSP_LCD_MspInit+0x194>)
 80014a4:	f000 fe9a 	bl	80021dc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80014a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	4820      	ldr	r0, [pc, #128]	; (8001538 <BSP_LCD_MspInit+0x198>)
 80014b6:	f000 fe91 	bl	80021dc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80014ba:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	481d      	ldr	r0, [pc, #116]	; (800153c <BSP_LCD_MspInit+0x19c>)
 80014c8:	f000 fe88 	bl	80021dc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80014cc:	2348      	movs	r3, #72	; 0x48
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	481a      	ldr	r0, [pc, #104]	; (8001540 <BSP_LCD_MspInit+0x1a0>)
 80014d8:	f000 fe80 	bl	80021dc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80014dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4816      	ldr	r0, [pc, #88]	; (8001544 <BSP_LCD_MspInit+0x1a4>)
 80014ea:	f000 fe77 	bl	80021dc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80014ee:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	4813      	ldr	r0, [pc, #76]	; (8001548 <BSP_LCD_MspInit+0x1a8>)
 80014fc:	f000 fe6e 	bl	80021dc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001500:	2303      	movs	r3, #3
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001504:	2309      	movs	r3, #9
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	480a      	ldr	r0, [pc, #40]	; (8001538 <BSP_LCD_MspInit+0x198>)
 8001510:	f000 fe64 	bl	80021dc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001514:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <BSP_LCD_MspInit+0x1a8>)
 8001522:	f000 fe5b 	bl	80021dc <HAL_GPIO_Init>
}
 8001526:	bf00      	nop
 8001528:	3738      	adds	r7, #56	; 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020400 	.word	0x40020400
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	40021400 	.word	0x40021400
 8001548:	40021800 	.word	0x40021800

0800154c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	603a      	str	r2, [r7, #0]
 8001556:	80fb      	strh	r3, [r7, #6]
 8001558:	460b      	mov	r3, r1
 800155a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <BSP_LCD_DrawPixel+0x44>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <BSP_LCD_DrawPixel+0x48>)
 8001562:	2134      	movs	r1, #52	; 0x34
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	335c      	adds	r3, #92	; 0x5c
 800156c:	681c      	ldr	r4, [r3, #0]
 800156e:	88bd      	ldrh	r5, [r7, #4]
 8001570:	f7ff fcd6 	bl	8000f20 <BSP_LCD_GetXSize>
 8001574:	4603      	mov	r3, r0
 8001576:	fb03 f205 	mul.w	r2, r3, r5
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4423      	add	r3, r4
 8001582:	461a      	mov	r2, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	200001e4 	.word	0x200001e4
 8001594:	200000cc 	.word	0x200000cc

08001598 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	603a      	str	r2, [r7, #0]
 80015a2:	80fb      	strh	r3, [r7, #6]
 80015a4:	460b      	mov	r3, r1
 80015a6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80015b4:	4b53      	ldr	r3, [pc, #332]	; (8001704 <DrawChar+0x16c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4953      	ldr	r1, [pc, #332]	; (8001708 <DrawChar+0x170>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	3308      	adds	r3, #8
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	88db      	ldrh	r3, [r3, #6]
 80015ca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80015cc:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <DrawChar+0x16c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	494d      	ldr	r1, [pc, #308]	; (8001708 <DrawChar+0x170>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	3308      	adds	r3, #8
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	889b      	ldrh	r3, [r3, #4]
 80015e2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80015e4:	8a3b      	ldrh	r3, [r7, #16]
 80015e6:	3307      	adds	r3, #7
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da00      	bge.n	80015ee <DrawChar+0x56>
 80015ec:	3307      	adds	r3, #7
 80015ee:	10db      	asrs	r3, r3, #3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	8a3b      	ldrh	r3, [r7, #16]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e076      	b.n	80016f2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001604:	8a3b      	ldrh	r3, [r7, #16]
 8001606:	3307      	adds	r3, #7
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <DrawChar+0x76>
 800160c:	3307      	adds	r3, #7
 800160e:	10db      	asrs	r3, r3, #3
 8001610:	461a      	mov	r2, r3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	4413      	add	r3, r2
 800161c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800161e:	8a3b      	ldrh	r3, [r7, #16]
 8001620:	3307      	adds	r3, #7
 8001622:	2b00      	cmp	r3, #0
 8001624:	da00      	bge.n	8001628 <DrawChar+0x90>
 8001626:	3307      	adds	r3, #7
 8001628:	10db      	asrs	r3, r3, #3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d002      	beq.n	8001634 <DrawChar+0x9c>
 800162e:	2b02      	cmp	r3, #2
 8001630:	d004      	beq.n	800163c <DrawChar+0xa4>
 8001632:	e00c      	b.n	800164e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	617b      	str	r3, [r7, #20]
      break;
 800163a:	e016      	b.n	800166a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	3201      	adds	r2, #1
 8001646:	7812      	ldrb	r2, [r2, #0]
 8001648:	4313      	orrs	r3, r2
 800164a:	617b      	str	r3, [r7, #20]
      break;
 800164c:	e00d      	b.n	800166a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	041a      	lsls	r2, r3, #16
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3301      	adds	r3, #1
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	4313      	orrs	r3, r2
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	3202      	adds	r2, #2
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	4313      	orrs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
      break;
 8001668:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	e036      	b.n	80016de <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001670:	8a3a      	ldrh	r2, [r7, #16]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad2      	subs	r2, r2, r3
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	4413      	add	r3, r2
 800167a:	3b01      	subs	r3, #1
 800167c:	2201      	movs	r2, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	461a      	mov	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d012      	beq.n	80016b2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	b29a      	uxth	r2, r3
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4413      	add	r3, r2
 8001694:	b298      	uxth	r0, r3
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <DrawChar+0x16c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	491b      	ldr	r1, [pc, #108]	; (8001708 <DrawChar+0x170>)
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff ff4e 	bl	800154c <BSP_LCD_DrawPixel>
 80016b0:	e012      	b.n	80016d8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4413      	add	r3, r2
 80016ba:	b298      	uxth	r0, r3
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <DrawChar+0x16c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4911      	ldr	r1, [pc, #68]	; (8001708 <DrawChar+0x170>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3304      	adds	r3, #4
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	88bb      	ldrh	r3, [r7, #4]
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff ff3a 	bl	800154c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	3301      	adds	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	8a3b      	ldrh	r3, [r7, #16]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3c4      	bcc.n	8001670 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	3301      	adds	r3, #1
 80016ea:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	3301      	adds	r3, #1
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	8a7b      	ldrh	r3, [r7, #18]
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d384      	bcc.n	8001604 <DrawChar+0x6c>
  }
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200001e4 	.word	0x200001e4
 8001708:	200001e8 	.word	0x200001e8

0800170c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <FillBuffer+0x68>)
 800171c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001720:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <FillBuffer+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <FillBuffer+0x68>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <FillBuffer+0x68>)
 8001730:	4a11      	ldr	r2, [pc, #68]	; (8001778 <FillBuffer+0x6c>)
 8001732:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001734:	480f      	ldr	r0, [pc, #60]	; (8001774 <FillBuffer+0x68>)
 8001736:	f001 fd8b 	bl	8003250 <HAL_DMA2D_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d115      	bne.n	800176c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	480c      	ldr	r0, [pc, #48]	; (8001774 <FillBuffer+0x68>)
 8001744:	f001 feec 	bl	8003520 <HAL_DMA2D_ConfigLayer>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10e      	bne.n	800176c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69f9      	ldr	r1, [r7, #28]
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <FillBuffer+0x68>)
 800175a:	f001 fdcc 	bl	80032f6 <HAL_DMA2D_Start>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d103      	bne.n	800176c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001764:	210a      	movs	r1, #10
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <FillBuffer+0x68>)
 8001768:	f001 fdf0 	bl	800334c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000174 	.word	0x20000174
 8001778:	4002b000 	.word	0x4002b000

0800177c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <BSP_SDRAM_Init+0xac>)
 8001782:	4a2a      	ldr	r2, [pc, #168]	; (800182c <BSP_SDRAM_Init+0xb0>)
 8001784:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <BSP_SDRAM_Init+0xb4>)
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <BSP_SDRAM_Init+0xb4>)
 800178e:	2207      	movs	r2, #7
 8001790:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <BSP_SDRAM_Init+0xb4>)
 8001794:	2204      	movs	r2, #4
 8001796:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <BSP_SDRAM_Init+0xb4>)
 800179a:	2207      	movs	r2, #7
 800179c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <BSP_SDRAM_Init+0xb4>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <BSP_SDRAM_Init+0xb4>)
 80017a6:	2202      	movs	r2, #2
 80017a8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <BSP_SDRAM_Init+0xb4>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017be:	2204      	movs	r2, #4
 80017c0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017c4:	2210      	movs	r2, #16
 80017c6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017d0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017d4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80017f2:	2100      	movs	r1, #0
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017f6:	f000 f87f 	bl	80018f8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80017fa:	490d      	ldr	r1, [pc, #52]	; (8001830 <BSP_SDRAM_Init+0xb4>)
 80017fc:	480a      	ldr	r0, [pc, #40]	; (8001828 <BSP_SDRAM_Init+0xac>)
 80017fe:	f002 fa96 	bl	8003d2e <HAL_SDRAM_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <BSP_SDRAM_Init+0xb8>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e002      	b.n	8001816 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <BSP_SDRAM_Init+0xb8>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001816:	f240 506a 	movw	r0, #1386	; 0x56a
 800181a:	f000 f80d 	bl	8001838 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <BSP_SDRAM_Init+0xb8>)
 8001820:	781b      	ldrb	r3, [r3, #0]
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000204 	.word	0x20000204
 800182c:	a0000140 	.word	0xa0000140
 8001830:	20000238 	.word	0x20000238
 8001834:	20000048 	.word	0x20000048

08001838 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800184c:	2208      	movs	r2, #8
 800184e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001852:	2201      	movs	r2, #1
 8001854:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800185c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001860:	4923      	ldr	r1, [pc, #140]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001862:	4824      	ldr	r0, [pc, #144]	; (80018f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001864:	f002 faa1 	bl	8003daa <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001868:	2001      	movs	r0, #1
 800186a:	f000 f9c3 	bl	8001bf4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001870:	2202      	movs	r2, #2
 8001872:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001876:	2208      	movs	r2, #8
 8001878:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800187c:	2201      	movs	r2, #1
 800187e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188a:	4919      	ldr	r1, [pc, #100]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800188c:	4819      	ldr	r0, [pc, #100]	; (80018f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800188e:	f002 fa8c 	bl	8003daa <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001894:	2203      	movs	r2, #3
 8001896:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800189a:	2208      	movs	r2, #8
 800189c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018a0:	2204      	movs	r2, #4
 80018a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80018aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ae:	4910      	ldr	r1, [pc, #64]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018b2:	f002 fa7a 	bl	8003daa <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80018b6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80018ba:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018be:	2204      	movs	r2, #4
 80018c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018c4:	2208      	movs	r2, #8
 80018c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80018d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d8:	4905      	ldr	r1, [pc, #20]	; (80018f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018dc:	f002 fa65 	bl	8003daa <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4804      	ldr	r0, [pc, #16]	; (80018f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018e4:	f002 fa96 	bl	8003e14 <HAL_SDRAM_ProgramRefreshRate>
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000254 	.word	0x20000254
 80018f4:	20000204 	.word	0x20000204

080018f8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b090      	sub	sp, #64	; 0x40
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80ec 	beq.w	8001ae2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
 800190e:	4b77      	ldr	r3, [pc, #476]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	4a76      	ldr	r2, [pc, #472]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6393      	str	r3, [r2, #56]	; 0x38
 800191a:	4b74      	ldr	r3, [pc, #464]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	4b70      	ldr	r3, [pc, #448]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a6f      	ldr	r2, [pc, #444]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001930:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
 8001946:	4b69      	ldr	r3, [pc, #420]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a68      	ldr	r2, [pc, #416]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	4b62      	ldr	r3, [pc, #392]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a61      	ldr	r2, [pc, #388]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b58      	ldr	r3, [pc, #352]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	4b54      	ldr	r3, [pc, #336]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a53      	ldr	r2, [pc, #332]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b51      	ldr	r3, [pc, #324]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 80019bc:	f043 0320 	orr.w	r3, r3, #32
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0320 	and.w	r3, r3, #32
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a45      	ldr	r2, [pc, #276]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 80019d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <BSP_SDRAM_MspInit+0x1f4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80019ee:	2302      	movs	r3, #2
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80019f6:	230c      	movs	r3, #12
 80019f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80019fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a02:	4619      	mov	r1, r3
 8001a04:	483a      	ldr	r0, [pc, #232]	; (8001af0 <BSP_SDRAM_MspInit+0x1f8>)
 8001a06:	f000 fbe9 	bl	80021dc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a12:	4619      	mov	r1, r3
 8001a14:	4837      	ldr	r0, [pc, #220]	; (8001af4 <BSP_SDRAM_MspInit+0x1fc>)
 8001a16:	f000 fbe1 	bl	80021dc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001a1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	4834      	ldr	r0, [pc, #208]	; (8001af8 <BSP_SDRAM_MspInit+0x200>)
 8001a28:	f000 fbd8 	bl	80021dc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001a2c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4830      	ldr	r0, [pc, #192]	; (8001afc <BSP_SDRAM_MspInit+0x204>)
 8001a3a:	f000 fbcf 	bl	80021dc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001a3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	482d      	ldr	r0, [pc, #180]	; (8001b00 <BSP_SDRAM_MspInit+0x208>)
 8001a4c:	f000 fbc6 	bl	80021dc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001a50:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4829      	ldr	r0, [pc, #164]	; (8001b04 <BSP_SDRAM_MspInit+0x20c>)
 8001a5e:	f000 fbbd 	bl	80021dc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a74:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a84:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a8c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a9a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <BSP_SDRAM_MspInit+0x214>)
 8001ab8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001ac6:	4810      	ldr	r0, [pc, #64]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001ac8:	f000 fa78 	bl	8001fbc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001acc:	480e      	ldr	r0, [pc, #56]	; (8001b08 <BSP_SDRAM_MspInit+0x210>)
 8001ace:	f000 f9c7 	bl	8001e60 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	2038      	movs	r0, #56	; 0x38
 8001ad8:	f000 f98b 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001adc:	2038      	movs	r0, #56	; 0x38
 8001ade:	f000 f9a4 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001ae2:	bf00      	nop
 8001ae4:	3740      	adds	r7, #64	; 0x40
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800
 8001b08:	20000264 	.word	0x20000264
 8001b0c:	40026410 	.word	0x40026410

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_Init+0x40>)
 8001b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_Init+0x40>)
 8001b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_Init+0x40>)
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 f94f 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f000 f808 	bl	8001b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b44:	f7fe fd9a 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x54>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x58>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f967 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00e      	b.n	8001ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d80a      	bhi.n	8001b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f000 f92f 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <HAL_InitTick+0x5c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000050 	.word	0x20000050
 8001bb0:	2000004c 	.word	0x2000004c

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000050 	.word	0x20000050
 8001bd8:	200002c4 	.word	0x200002c4

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	200002c4 	.word	0x200002c4

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ffee 	bl	8001bdc <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000050 	.word	0x20000050

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff feb6 	bl	8001bdc <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e099      	b.n	8001fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9c:	e00f      	b.n	8001ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9e:	f7ff fe9d 	bl	8001bdc <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d908      	bls.n	8001ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e078      	b.n	8001fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e8      	bne.n	8001e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_DMA_Init+0x158>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d107      	bne.n	8001f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4313      	orrs	r3, r2
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d117      	bne.n	8001f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8bd 	bl	80020e4 <DMA_CheckFifoParam>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e016      	b.n	8001fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f874 	bl	8002078 <DMA_CalcBaseAndBitshift>
 8001f90:	4603      	mov	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	223f      	movs	r2, #63	; 0x3f
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	f010803f 	.word	0xf010803f

08001fbc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e050      	b.n	8002070 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d101      	bne.n	8001fde <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e048      	b.n	8002070 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2221      	movs	r2, #33	; 0x21
 800201c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f82a 	bl	8002078 <DMA_CalcBaseAndBitshift>
 8002024:	4603      	mov	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	223f      	movs	r2, #63	; 0x3f
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3b10      	subs	r3, #16
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <DMA_CalcBaseAndBitshift+0x64>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d909      	bls.n	80020ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	659a      	str	r2, [r3, #88]	; 0x58
 80020b8:	e007      	b.n	80020ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	aaaaaaab 	.word	0xaaaaaaab
 80020e0:	080067d0 	.word	0x080067d0

080020e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11f      	bne.n	800213e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d856      	bhi.n	80021b2 <DMA_CheckFifoParam+0xce>
 8002104:	a201      	add	r2, pc, #4	; (adr r2, 800210c <DMA_CheckFifoParam+0x28>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	0800211d 	.word	0x0800211d
 8002110:	0800212f 	.word	0x0800212f
 8002114:	0800211d 	.word	0x0800211d
 8002118:	080021b3 	.word	0x080021b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d046      	beq.n	80021b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212c:	e043      	b.n	80021b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002136:	d140      	bne.n	80021ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213c:	e03d      	b.n	80021ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002146:	d121      	bne.n	800218c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d837      	bhi.n	80021be <DMA_CheckFifoParam+0xda>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <DMA_CheckFifoParam+0x70>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002165 	.word	0x08002165
 8002158:	0800216b 	.word	0x0800216b
 800215c:	08002165 	.word	0x08002165
 8002160:	0800217d 	.word	0x0800217d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      break;
 8002168:	e030      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d025      	beq.n	80021c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217a:	e022      	b.n	80021c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002184:	d11f      	bne.n	80021c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800218a:	e01c      	b.n	80021c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d903      	bls.n	800219a <DMA_CheckFifoParam+0xb6>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d003      	beq.n	80021a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002198:	e018      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
      break;
 800219e:	e015      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      break;
 80021b0:	e00b      	b.n	80021ca <DMA_CheckFifoParam+0xe6>
      break;
 80021b2:	bf00      	nop
 80021b4:	e00a      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021b6:	bf00      	nop
 80021b8:	e008      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021ba:	bf00      	nop
 80021bc:	e006      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021be:	bf00      	nop
 80021c0:	e004      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
 80021c4:	e002      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;   
 80021c6:	bf00      	nop
 80021c8:	e000      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
    }
  } 
  
  return status; 
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e177      	b.n	80024e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8166 	bne.w	80024e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80c0 	beq.w	80024e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_GPIO_Init+0x324>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a65      	ldr	r2, [pc, #404]	; (8002500 <HAL_GPIO_Init+0x324>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_GPIO_Init+0x324>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HAL_GPIO_Init+0x328>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_GPIO_Init+0x32c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d037      	beq.n	800241a <HAL_GPIO_Init+0x23e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a57      	ldr	r2, [pc, #348]	; (800250c <HAL_GPIO_Init+0x330>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_GPIO_Init+0x23a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a56      	ldr	r2, [pc, #344]	; (8002510 <HAL_GPIO_Init+0x334>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x236>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a55      	ldr	r2, [pc, #340]	; (8002514 <HAL_GPIO_Init+0x338>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x232>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_GPIO_Init+0x33c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x22e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a53      	ldr	r2, [pc, #332]	; (800251c <HAL_GPIO_Init+0x340>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x22a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_GPIO_Init+0x344>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x226>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_GPIO_Init+0x348>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x222>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_GPIO_Init+0x34c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x21e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	; (800252c <HAL_GPIO_Init+0x350>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023f2:	2309      	movs	r3, #9
 80023f4:	e012      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023f6:	230a      	movs	r3, #10
 80023f8:	e010      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023fa:	2308      	movs	r3, #8
 80023fc:	e00e      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00c      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002402:	2306      	movs	r3, #6
 8002404:	e00a      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002406:	2305      	movs	r3, #5
 8002408:	e008      	b.n	800241c <HAL_GPIO_Init+0x240>
 800240a:	2304      	movs	r3, #4
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x240>
 800240e:	2303      	movs	r3, #3
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x240>
 800241a:	2300      	movs	r3, #0
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f002 0203 	and.w	r2, r2, #3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4093      	lsls	r3, r2
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242c:	4935      	ldr	r1, [pc, #212]	; (8002504 <HAL_GPIO_Init+0x328>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_GPIO_Init+0x354>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a34      	ldr	r2, [pc, #208]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <HAL_GPIO_Init+0x354>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b2:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	f67f ae84 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40021c00 	.word	0x40021c00
 8002528:	40022000 	.word	0x40022000
 800252c:	40022400 	.word	0x40022400
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_PWREx_EnableOverDrive+0x94>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002594:	f7ff fb22 	bl	8001bdc <HAL_GetTick>
 8002598:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800259a:	e009      	b.n	80025b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800259c:	f7ff fb1e 	bl	8001bdc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025aa:	d901      	bls.n	80025b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e01f      	b.n	80025f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <HAL_PWREx_EnableOverDrive+0x98>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d1ee      	bne.n	800259c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c4:	f7ff fb0a 	bl	8001bdc <HAL_GetTick>
 80025c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025ca:	e009      	b.n	80025e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025cc:	f7ff fb06 	bl	8001bdc <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025da:	d901      	bls.n	80025e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e007      	b.n	80025f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_PWREx_EnableOverDrive+0x98>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025ec:	d1ee      	bne.n	80025cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	420e0040 	.word	0x420e0040
 8002600:	40007000 	.word	0x40007000
 8002604:	420e0044 	.word	0x420e0044

08002608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e267      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d075      	beq.n	8002712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d00c      	beq.n	800264c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b85      	ldr	r3, [pc, #532]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263a:	2b08      	cmp	r3, #8
 800263c:	d112      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4b82      	ldr	r3, [pc, #520]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264a:	d10b      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	4b7e      	ldr	r3, [pc, #504]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d05b      	beq.n	8002710 <HAL_RCC_OscConfig+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d157      	bne.n	8002710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e242      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d106      	bne.n	800267c <HAL_RCC_OscConfig+0x74>
 800266e:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a75      	ldr	r2, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x98>
 8002686:	4b70      	ldr	r3, [pc, #448]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6f      	ldr	r2, [pc, #444]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b6d      	ldr	r3, [pc, #436]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6c      	ldr	r2, [pc, #432]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 80026a0:	4b69      	ldr	r3, [pc, #420]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b66      	ldr	r3, [pc, #408]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a65      	ldr	r2, [pc, #404]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff fa8c 	bl	8001bdc <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff fa88 	bl	8001bdc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e207      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fa78 	bl	8001bdc <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff fa74 	bl	8001bdc <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1f3      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b51      	ldr	r3, [pc, #324]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0xe8>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002736:	4b44      	ldr	r3, [pc, #272]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1c7      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4937      	ldr	r1, [pc, #220]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	e03a      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x244>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7ff fa2d 	bl	8001bdc <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002786:	f7ff fa29 	bl	8001bdc <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1a8      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4925      	ldr	r1, [pc, #148]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCC_OscConfig+0x244>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff fa0c 	bl	8001bdc <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c8:	f7ff fa08 	bl	8001bdc <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e187      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d036      	beq.n	8002860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_RCC_OscConfig+0x248>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7ff f9ec 	bl	8001bdc <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002808:	f7ff f9e8 	bl	8001bdc <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e167      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800281c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x200>
 8002826:	e01b      	b.n	8002860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_OscConfig+0x248>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7ff f9d5 	bl	8001bdc <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e00e      	b.n	8002854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7ff f9d1 	bl	8001bdc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d907      	bls.n	8002854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e150      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002848:	40023800 	.word	0x40023800
 800284c:	42470000 	.word	0x42470000
 8002850:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b88      	ldr	r3, [pc, #544]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ea      	bne.n	8002836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8097 	beq.w	800299c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b81      	ldr	r3, [pc, #516]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a7c      	ldr	r2, [pc, #496]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b7a      	ldr	r3, [pc, #488]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a73      	ldr	r2, [pc, #460]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7ff f991 	bl	8001bdc <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7ff f98d 	bl	8001bdc <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e10c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2ea>
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a63      	ldr	r2, [pc, #396]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	e01c      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x30c>
 80028fa:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a5e      	ldr	r2, [pc, #376]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 8002914:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	; 0x70
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002926:	f023 0304 	bic.w	r3, r3, #4
 800292a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7ff f952 	bl	8001bdc <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7ff f94e 	bl	8001bdc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0cb      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0ee      	beq.n	800293c <HAL_RCC_OscConfig+0x334>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7ff f93c 	bl	8001bdc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7ff f938 	bl	8001bdc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0b5      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ee      	bne.n	8002968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a1 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a6:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d05c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d141      	bne.n	8002a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff f90c 	bl	8001bdc <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7ff f908 	bl	8001bdc <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e087      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	041b      	lsls	r3, r3, #16
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	491b      	ldr	r1, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7ff f8e1 	bl	8001bdc <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7ff f8dd 	bl	8001bdc <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e05c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x416>
 8002a3c:	e054      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff f8ca 	bl	8001bdc <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7ff f8c6 	bl	8001bdc <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e045      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x444>
 8002a6a:	e03d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e038      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d028      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d121      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d90c      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4c:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a58      	ldr	r2, [pc, #352]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b64:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	494d      	ldr	r1, [pc, #308]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d044      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d119      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e067      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4934      	ldr	r1, [pc, #208]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fff8 	bl	8001bdc <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fff4 	bl	8001bdc <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e04f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d20c      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e032      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4916      	ldr	r1, [pc, #88]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	490e      	ldr	r1, [pc, #56]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c7e:	f000 f821 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	490a      	ldr	r1, [pc, #40]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ff58 	bl	8001b54 <HAL_InitTick>

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	08004d08 	.word	0x08004d08
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	2000004c 	.word	0x2000004c

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc8:	b094      	sub	sp, #80	; 0x50
 8002cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cdc:	4b79      	ldr	r3, [pc, #484]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	f200 80e1 	bhi.w	8002eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002cf6:	e0db      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cfc:	e0db      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x208>)
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d02:	e0d8      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d063      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	2200      	movs	r2, #0
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
 8002d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	f04f 0000 	mov.w	r0, #0
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d48:	0150      	lsls	r0, r2, #5
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4621      	mov	r1, r4
 8002d50:	1a51      	subs	r1, r2, r1
 8002d52:	6139      	str	r1, [r7, #16]
 8002d54:	4629      	mov	r1, r5
 8002d56:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d68:	4659      	mov	r1, fp
 8002d6a:	018b      	lsls	r3, r1, #6
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d72:	4651      	mov	r1, sl
 8002d74:	018a      	lsls	r2, r1, #6
 8002d76:	4651      	mov	r1, sl
 8002d78:	ebb2 0801 	subs.w	r8, r2, r1
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d96:	4690      	mov	r8, r2
 8002d98:	4699      	mov	r9, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	eb18 0303 	adds.w	r3, r8, r3
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	462b      	mov	r3, r5
 8002da4:	eb49 0303 	adc.w	r3, r9, r3
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002db6:	4629      	mov	r1, r5
 8002db8:	024b      	lsls	r3, r1, #9
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	024a      	lsls	r2, r1, #9
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dca:	2200      	movs	r2, #0
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd4:	f7fd fa0a 	bl	80001ec <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de0:	e058      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	2200      	movs	r2, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	4611      	mov	r1, r2
 8002dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	0159      	lsls	r1, r3, #5
 8002e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0e:	0150      	lsls	r0, r2, #5
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4641      	mov	r1, r8
 8002e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e34:	ebb2 040a 	subs.w	r4, r2, sl
 8002e38:	eb63 050b 	sbc.w	r5, r3, fp
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	00eb      	lsls	r3, r5, #3
 8002e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4a:	00e2      	lsls	r2, r4, #3
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	18e3      	adds	r3, r4, r3
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	464b      	mov	r3, r9
 8002e58:	eb45 0303 	adc.w	r3, r5, r3
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	028b      	lsls	r3, r1, #10
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e74:	4621      	mov	r1, r4
 8002e76:	028a      	lsls	r2, r1, #10
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	61fa      	str	r2, [r7, #28]
 8002e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e88:	f7fd f9b0 	bl	80001ec <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eae:	e002      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3750      	adds	r7, #80	; 0x50
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d075      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f04:	4b91      	ldr	r3, [pc, #580]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fe67 	bl	8001bdc <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f12:	f7fe fe63 	bl	8001bdc <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e189      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f24:	4b8a      	ldr	r3, [pc, #552]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	019a      	lsls	r2, r3, #6
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	071b      	lsls	r3, r3, #28
 8002f48:	4981      	ldr	r1, [pc, #516]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01f      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f5c:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f62:	0f1b      	lsrs	r3, r3, #28
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	019a      	lsls	r2, r3, #6
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	431a      	orrs	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	071b      	lsls	r3, r3, #28
 8002f7c:	4974      	ldr	r1, [pc, #464]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f84:	4b72      	ldr	r3, [pc, #456]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8a:	f023 021f 	bic.w	r2, r3, #31
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	496e      	ldr	r1, [pc, #440]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	019a      	lsls	r2, r3, #6
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	071b      	lsls	r3, r3, #28
 8002fbc:	4964      	ldr	r1, [pc, #400]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fca:	f7fe fe07 	bl	8001bdc <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fd2:	f7fe fe03 	bl	8001bdc <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e129      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fe4:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003004:	2b00      	cmp	r3, #0
 8003006:	d079      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003008:	4b52      	ldr	r3, [pc, #328]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800300e:	f7fe fde5 	bl	8001bdc <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003016:	f7fe fde1 	bl	8001bdc <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e107      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003028:	4b49      	ldr	r3, [pc, #292]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003034:	d0ef      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d020      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003042:	4b43      	ldr	r3, [pc, #268]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	0f1b      	lsrs	r3, r3, #28
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	019a      	lsls	r2, r3, #6
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	431a      	orrs	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	071b      	lsls	r3, r3, #28
 8003062:	493b      	ldr	r1, [pc, #236]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800306a:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800306c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003070:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	3b01      	subs	r3, #1
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	4934      	ldr	r1, [pc, #208]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01e      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	0e1b      	lsrs	r3, r3, #24
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	019a      	lsls	r2, r3, #6
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	061b      	lsls	r3, r3, #24
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	071b      	lsls	r3, r3, #28
 80030b0:	4927      	ldr	r1, [pc, #156]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4922      	ldr	r1, [pc, #136]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d4:	f7fe fd82 	bl	8001bdc <HAL_GetTick>
 80030d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030dc:	f7fe fd7e 	bl	8001bdc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0a4      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030fa:	d1ef      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 808b 	beq.w	8003220 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a0b      	ldr	r2, [pc, #44]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003132:	f7fe fd53 	bl	8001bdc <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003138:	e010      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe fd4f 	bl	8001bdc <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d909      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e075      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800314c:	42470068 	.word	0x42470068
 8003150:	40023800 	.word	0x40023800
 8003154:	42470070 	.word	0x42470070
 8003158:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0e8      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003170:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02f      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	429a      	cmp	r2, r3
 8003184:	d028      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800319c:	4a29      	ldr	r2, [pc, #164]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d114      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe fd15 	bl	8001bdc <HAL_GetTick>
 80031b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe fd11 	bl	8001bdc <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e035      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ee      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e4:	d10d      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80031e6:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fa:	4912      	ldr	r1, [pc, #72]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]
 8003200:	e005      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003208:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800320c:	6093      	str	r3, [r2, #8]
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800321c:	4313      	orrs	r3, r2
 800321e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003234:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40007000 	.word	0x40007000
 8003244:	40023800 	.word	0x40023800
 8003248:	42470e40 	.word	0x42470e40
 800324c:	424711e0 	.word	0x424711e0

08003250 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e03b      	b.n	80032da <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f833 	bl	80032e2 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a0:	f023 0107 	bic.w	r1, r3, #7
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68d1      	ldr	r1, [r2, #12]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af02      	add	r7, sp, #8
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_DMA2D_Start+0x1c>
 800330e:	2302      	movs	r3, #2
 8003310:	e018      	b.n	8003344 <HAL_DMA2D_Start+0x4e>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f989 	bl	8003644 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d056      	beq.n	8003416 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003368:	f7fe fc38 	bl	8001bdc <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800336e:	e04b      	b.n	8003408 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800337e:	2b00      	cmp	r3, #0
 8003380:	d023      	beq.n	80033ca <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	f043 0202 	orr.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2221      	movs	r2, #33	; 0x21
 80033b4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2204      	movs	r2, #4
 80033ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0a5      	b.n	8003516 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d01a      	beq.n	8003408 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fe fc03 	bl	8001bdc <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <HAL_DMA2D_PollForTransfer+0x9c>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2203      	movs	r2, #3
 80033f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e086      	b.n	8003516 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0ac      	beq.n	8003370 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d061      	beq.n	80034fc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003438:	f7fe fbd0 	bl	8001bdc <HAL_GetTick>
 800343c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800343e:	e056      	b.n	80034ee <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02e      	beq.n	80034b0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	f043 0202 	orr.w	r2, r3, #2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	f043 0201 	orr.w	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2229      	movs	r2, #41	; 0x29
 800349a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2204      	movs	r2, #4
 80034a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e032      	b.n	8003516 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d01a      	beq.n	80034ee <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034b8:	f7fe fb90 	bl	8001bdc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d302      	bcc.n	80034ce <HAL_DMA2D_PollForTransfer+0x182>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2203      	movs	r2, #3
 80034de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e013      	b.n	8003516 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0a1      	beq.n	8003440 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2212      	movs	r2, #18
 8003502:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_DMA2D_ConfigLayer+0x20>
 800353c:	2302      	movs	r3, #2
 800353e:	e079      	b.n	8003634 <HAL_DMA2D_ConfigLayer+0x114>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	3318      	adds	r3, #24
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800356a:	4b35      	ldr	r3, [pc, #212]	; (8003640 <HAL_DMA2D_ConfigLayer+0x120>)
 800356c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b0a      	cmp	r3, #10
 8003574:	d003      	beq.n	800357e <HAL_DMA2D_ConfigLayer+0x5e>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b09      	cmp	r3, #9
 800357c:	d107      	bne.n	800358e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e005      	b.n	800359a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d120      	bne.n	80035e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	ea02 0103 	and.w	r1, r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b0a      	cmp	r3, #10
 80035c8:	d003      	beq.n	80035d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b09      	cmp	r3, #9
 80035d0:	d127      	bne.n	8003622 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
 80035e0:	e01f      	b.n	8003622 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	ea02 0103 	and.w	r1, r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b0a      	cmp	r3, #10
 800360a:	d003      	beq.n	8003614 <HAL_DMA2D_ConfigLayer+0xf4>
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b09      	cmp	r3, #9
 8003612:	d106      	bne.n	8003622 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003620:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	ff03000f 	.word	0xff03000f

08003644 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003644:	b480      	push	{r7}
 8003646:	b08b      	sub	sp, #44	; 0x2c
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	041a      	lsls	r2, r3, #16
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	431a      	orrs	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800367c:	d174      	bne.n	8003768 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003684:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800368c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003694:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d108      	bne.n	80036b6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	e053      	b.n	800375e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d106      	bne.n	80036cc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e048      	b.n	800375e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d111      	bne.n	80036f8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	0cdb      	lsrs	r3, r3, #19
 80036d8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	0a9b      	lsrs	r3, r3, #10
 80036de:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	08db      	lsrs	r3, r3, #3
 80036e4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	02db      	lsls	r3, r3, #11
 80036ee:	4313      	orrs	r3, r2
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e032      	b.n	800375e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d117      	bne.n	8003730 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	0fdb      	lsrs	r3, r3, #31
 8003704:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	0cdb      	lsrs	r3, r3, #19
 800370a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	0adb      	lsrs	r3, r3, #11
 8003710:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	08db      	lsrs	r3, r3, #3
 8003716:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	029b      	lsls	r3, r3, #10
 8003720:	431a      	orrs	r2, r3
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	03db      	lsls	r3, r3, #15
 8003726:	4313      	orrs	r3, r2
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	e016      	b.n	800375e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	0f1b      	lsrs	r3, r3, #28
 8003734:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	0d1b      	lsrs	r3, r3, #20
 800373a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	0b1b      	lsrs	r3, r3, #12
 8003740:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	011a      	lsls	r2, r3, #4
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	431a      	orrs	r2, r3
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	031b      	lsls	r3, r3, #12
 8003756:	4313      	orrs	r3, r2
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003766:	e003      	b.n	8003770 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	60da      	str	r2, [r3, #12]
}
 8003770:	bf00      	nop
 8003772:	372c      	adds	r7, #44	; 0x2c
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0bf      	b.n	800390e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8ba 	bl	800391c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80037be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6999      	ldr	r1, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6899      	ldr	r1, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_LTDC_Init+0x19c>)
 80037f0:	400b      	ands	r3, r1
 80037f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68d9      	ldr	r1, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_LTDC_Init+0x19c>)
 800381e:	400b      	ands	r3, r1
 8003820:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68d9      	ldr	r1, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6919      	ldr	r1, [r3, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_LTDC_Init+0x19c>)
 800384c:	400b      	ands	r3, r1
 800384e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6919      	ldr	r1, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6959      	ldr	r1, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b27      	ldr	r3, [pc, #156]	; (8003918 <HAL_LTDC_Init+0x19c>)
 800387a:	400b      	ands	r3, r1
 800387c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6959      	ldr	r1, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0206 	orr.w	r2, r2, #6
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	f000f800 	.word	0xf000f800

0800391c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003930:	b5b0      	push	{r4, r5, r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_LTDC_ConfigLayer+0x1a>
 8003946:	2302      	movs	r3, #2
 8003948:	e02c      	b.n	80039a4 <HAL_LTDC_ConfigLayer+0x74>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2134      	movs	r1, #52	; 0x34
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4614      	mov	r4, r2
 800396e:	461d      	mov	r5, r3
 8003970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800397a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f83b 	bl	8003a00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2201      	movs	r2, #1
 8003990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bdb0      	pop	{r4, r5, r7, pc}

080039ac <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_LTDC_EnableDither+0x16>
 80039be:	2302      	movs	r3, #2
 80039c0:	e016      	b.n	80039f0 <HAL_LTDC_EnableDither+0x44>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_LTDC_EnableDither+0x50>)
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_LTDC_EnableDither+0x50>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40016800 	.word	0x40016800

08003a00 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	; 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	4413      	add	r3, r2
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	01db      	lsls	r3, r3, #7
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3384      	adds	r3, #132	; 0x84
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	4611      	mov	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	01d2      	lsls	r2, r2, #7
 8003a3c:	440a      	add	r2, r1
 8003a3e:	3284      	adds	r2, #132	; 0x84
 8003a40:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a44:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a56:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a58:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	01db      	lsls	r3, r3, #7
 8003a64:	440b      	add	r3, r1
 8003a66:	3384      	adds	r3, #132	; 0x84
 8003a68:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a6e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a7e:	4413      	add	r3, r2
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	01db      	lsls	r3, r3, #7
 8003a8e:	4413      	add	r3, r2
 8003a90:	3384      	adds	r3, #132	; 0x84
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	01d2      	lsls	r2, r2, #7
 8003a9e:	440a      	add	r2, r1
 8003aa0:	3284      	adds	r2, #132	; 0x84
 8003aa2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003aa6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab6:	4413      	add	r3, r2
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	01db      	lsls	r3, r3, #7
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3384      	adds	r3, #132	; 0x84
 8003ac8:	4619      	mov	r1, r3
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	01db      	lsls	r3, r3, #7
 8003ada:	4413      	add	r3, r2
 8003adc:	3384      	adds	r3, #132	; 0x84
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	01d2      	lsls	r2, r2, #7
 8003aea:	440a      	add	r2, r1
 8003aec:	3284      	adds	r2, #132	; 0x84
 8003aee:	f023 0307 	bic.w	r3, r3, #7
 8003af2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	01db      	lsls	r3, r3, #7
 8003afe:	4413      	add	r3, r2
 8003b00:	3384      	adds	r3, #132	; 0x84
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	01db      	lsls	r3, r3, #7
 8003b30:	4413      	add	r3, r2
 8003b32:	3384      	adds	r3, #132	; 0x84
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	01db      	lsls	r3, r3, #7
 8003b40:	4413      	add	r3, r2
 8003b42:	3384      	adds	r3, #132	; 0x84
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b50:	461a      	mov	r2, r3
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	01db      	lsls	r3, r3, #7
 8003b64:	440b      	add	r3, r1
 8003b66:	3384      	adds	r3, #132	; 0x84
 8003b68:	4619      	mov	r1, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	01db      	lsls	r3, r3, #7
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3384      	adds	r3, #132	; 0x84
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	4611      	mov	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	01d2      	lsls	r2, r2, #7
 8003b8a:	440a      	add	r2, r1
 8003b8c:	3284      	adds	r2, #132	; 0x84
 8003b8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b92:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	01db      	lsls	r3, r3, #7
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3384      	adds	r3, #132	; 0x84
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3384      	adds	r3, #132	; 0x84
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	01d2      	lsls	r2, r2, #7
 8003bc4:	440a      	add	r2, r1
 8003bc6:	3284      	adds	r2, #132	; 0x84
 8003bc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bcc:	f023 0307 	bic.w	r3, r3, #7
 8003bd0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	6809      	ldr	r1, [r1, #0]
 8003bde:	4608      	mov	r0, r1
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	01c9      	lsls	r1, r1, #7
 8003be4:	4401      	add	r1, r0
 8003be6:	3184      	adds	r1, #132	; 0x84
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	01db      	lsls	r3, r3, #7
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3384      	adds	r3, #132	; 0x84
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	01db      	lsls	r3, r3, #7
 8003c06:	4413      	add	r3, r2
 8003c08:	3384      	adds	r3, #132	; 0x84
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	01db      	lsls	r3, r3, #7
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3384      	adds	r3, #132	; 0x84
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003c2e:	2304      	movs	r3, #4
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e01b      	b.n	8003c6c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	e014      	b.n	8003c6c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d00b      	beq.n	8003c62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d007      	beq.n	8003c62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d003      	beq.n	8003c62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c5e:	2b07      	cmp	r3, #7
 8003c60:	d102      	bne.n	8003c68 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003c62:	2302      	movs	r3, #2
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	e001      	b.n	8003c6c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	01db      	lsls	r3, r3, #7
 8003c76:	4413      	add	r3, r2
 8003c78:	3384      	adds	r3, #132	; 0x84
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	4611      	mov	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	01d2      	lsls	r2, r2, #7
 8003c86:	440a      	add	r2, r1
 8003c88:	3284      	adds	r2, #132	; 0x84
 8003c8a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	1acb      	subs	r3, r1, r3
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	6809      	ldr	r1, [r1, #0]
 8003cb2:	4608      	mov	r0, r1
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	01c9      	lsls	r1, r1, #7
 8003cb8:	4401      	add	r1, r0
 8003cba:	3184      	adds	r1, #132	; 0x84
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	01db      	lsls	r3, r3, #7
 8003cca:	4413      	add	r3, r2
 8003ccc:	3384      	adds	r3, #132	; 0x84
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	01d2      	lsls	r2, r2, #7
 8003cda:	440a      	add	r2, r1
 8003cdc:	3284      	adds	r2, #132	; 0x84
 8003cde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	01db      	lsls	r3, r3, #7
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3384      	adds	r3, #132	; 0x84
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	01db      	lsls	r3, r3, #7
 8003d08:	4413      	add	r3, r2
 8003d0a:	3384      	adds	r3, #132	; 0x84
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	4611      	mov	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	01d2      	lsls	r2, r2, #7
 8003d18:	440a      	add	r2, r1
 8003d1a:	3284      	adds	r2, #132	; 0x84
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6013      	str	r3, [r2, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3724      	adds	r7, #36	; 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e025      	b.n	8003d8e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f81d 	bl	8003d96 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fe6a 	bl	8004a48 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	f000 febf 	bl	8004b02 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e021      	b.n	8003e0c <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d002      	beq.n	8003dd4 <HAL_SDRAM_SendCommand+0x2a>
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d118      	bne.n	8003e06 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fef5 	bl	8004bd4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d104      	bne.n	8003dfc <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2205      	movs	r2, #5
 8003df6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003dfa:	e006      	b.n	8003e0a <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003e04:	e001      	b.n	8003e0a <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d101      	bne.n	8003e2e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e016      	b.n	8003e5c <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10f      	bne.n	8003e5a <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff00 	bl	8004c4e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e07b      	b.n	8003f6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d108      	bne.n	8003e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e86:	d009      	beq.n	8003e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	61da      	str	r2, [r3, #28]
 8003e8e:	e005      	b.n	8003e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f885 	bl	8003fc6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	ea42 0103 	orr.w	r1, r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0104 	and.w	r1, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	f003 0210 	and.w	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e01a      	b.n	8003fbe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f81a 	bl	8003fda <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b088      	sub	sp, #32
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_SPI_Transmit+0x22>
 800400c:	2302      	movs	r3, #2
 800400e:	e126      	b.n	800425e <HAL_SPI_Transmit+0x270>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004018:	f7fd fde0 	bl	8001bdc <HAL_GetTick>
 800401c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	d002      	beq.n	8004034 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800402e:	2302      	movs	r3, #2
 8004030:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004032:	e10b      	b.n	800424c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_SPI_Transmit+0x52>
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004044:	e102      	b.n	800424c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2203      	movs	r2, #3
 800404a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	d10f      	bne.n	80040ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d007      	beq.n	80040cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d4:	d14b      	bne.n	800416e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_Transmit+0xf6>
 80040de:	8afb      	ldrh	r3, [r7, #22]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d13e      	bne.n	8004162 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004108:	e02b      	b.n	8004162 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b02      	cmp	r3, #2
 8004116:	d112      	bne.n	800413e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	86da      	strh	r2, [r3, #54]	; 0x36
 800413c:	e011      	b.n	8004162 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800413e:	f7fd fd4d 	bl	8001bdc <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d803      	bhi.n	8004156 <HAL_SPI_Transmit+0x168>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d102      	bne.n	800415c <HAL_SPI_Transmit+0x16e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004160:	e074      	b.n	800424c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ce      	bne.n	800410a <HAL_SPI_Transmit+0x11c>
 800416c:	e04c      	b.n	8004208 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_SPI_Transmit+0x18e>
 8004176:	8afb      	ldrh	r3, [r7, #22]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d140      	bne.n	80041fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	7812      	ldrb	r2, [r2, #0]
 8004188:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041a2:	e02c      	b.n	80041fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d113      	bne.n	80041da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80041d8:	e011      	b.n	80041fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041da:	f7fd fcff 	bl	8001bdc <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d803      	bhi.n	80041f2 <HAL_SPI_Transmit+0x204>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_Transmit+0x20a>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041fc:	e026      	b.n	800424c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1cd      	bne.n	80041a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fbd9 	bl	80049c4 <SPI_EndRxTxTransaction>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e000      	b.n	800424c <HAL_SPI_Transmit+0x25e>
  }

error:
 800424a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800425c:	7ffb      	ldrb	r3, [r7, #31]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b088      	sub	sp, #32
 800426a:	af02      	add	r7, sp, #8
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d112      	bne.n	80042aa <HAL_SPI_Receive+0x44>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10e      	bne.n	80042aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2204      	movs	r2, #4
 8004290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f8f1 	bl	8004488 <HAL_SPI_TransmitReceive>
 80042a6:	4603      	mov	r3, r0
 80042a8:	e0ea      	b.n	8004480 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_SPI_Receive+0x52>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e0e3      	b.n	8004480 <HAL_SPI_Receive+0x21a>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c0:	f7fd fc8c 	bl	8001bdc <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d002      	beq.n	80042d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
 80042d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042d6:	e0ca      	b.n	800446e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_SPI_Receive+0x7e>
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042e8:	e0c1      	b.n	800446e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2204      	movs	r2, #4
 80042ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	d10f      	bne.n	8004352 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004340:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d007      	beq.n	8004370 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d162      	bne.n	800443e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004378:	e02e      	b.n	80043d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d115      	bne.n	80043b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f103 020c 	add.w	r2, r3, #12
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b2:	e011      	b.n	80043d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b4:	f7fd fc12 	bl	8001bdc <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d803      	bhi.n	80043cc <HAL_SPI_Receive+0x166>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d102      	bne.n	80043d2 <HAL_SPI_Receive+0x16c>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043d6:	e04a      	b.n	800446e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1cb      	bne.n	800437a <HAL_SPI_Receive+0x114>
 80043e2:	e031      	b.n	8004448 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d113      	bne.n	800441a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	b292      	uxth	r2, r2
 80043fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004418:	e011      	b.n	800443e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441a:	f7fd fbdf 	bl	8001bdc <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d803      	bhi.n	8004432 <HAL_SPI_Receive+0x1cc>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d102      	bne.n	8004438 <HAL_SPI_Receive+0x1d2>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800443c:	e017      	b.n	800446e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1cd      	bne.n	80043e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	6839      	ldr	r1, [r7, #0]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fa53 	bl	80048f8 <SPI_EndRxTransaction>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	75fb      	strb	r3, [r7, #23]
 800446a:	e000      	b.n	800446e <HAL_SPI_Receive+0x208>
  }

error :
 800446c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800447e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004496:	2301      	movs	r3, #1
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x26>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e18a      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x33c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b6:	f7fd fb91 	bl	8001bdc <HAL_GetTick>
 80044ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d00f      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x70>
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044de:	d107      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d103      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x68>
 80044e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d003      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044f6:	e15b      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_SPI_TransmitReceive+0x82>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_SPI_TransmitReceive+0x82>
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004510:	e14e      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b04      	cmp	r3, #4
 800451c:	d003      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2205      	movs	r2, #5
 8004522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	887a      	ldrh	r2, [r7, #2]
 8004536:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	887a      	ldrh	r2, [r7, #2]
 800453c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	887a      	ldrh	r2, [r7, #2]
 8004548:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	887a      	ldrh	r2, [r7, #2]
 800454e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d007      	beq.n	800457a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004582:	d178      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x10a>
 800458c:	8b7b      	ldrh	r3, [r7, #26]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d166      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	881a      	ldrh	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	1c9a      	adds	r2, r3, #2
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b6:	e053      	b.n	8004660 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d11b      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x176>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d016      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x176>
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d113      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	881a      	ldrh	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	1c9a      	adds	r2, r3, #2
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d119      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x1b8>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d014      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	b292      	uxth	r2, r2
 8004622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800463c:	2301      	movs	r3, #1
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004640:	f7fd facc 	bl	8001bdc <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800464c:	429a      	cmp	r2, r3
 800464e:	d807      	bhi.n	8004660 <HAL_SPI_TransmitReceive+0x1d8>
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d003      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800465e:	e0a7      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1a6      	bne.n	80045b8 <HAL_SPI_TransmitReceive+0x130>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1a1      	bne.n	80045b8 <HAL_SPI_TransmitReceive+0x130>
 8004674:	e07c      	b.n	8004770 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x1fc>
 800467e:	8b7b      	ldrh	r3, [r7, #26]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d16b      	bne.n	800475c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	7812      	ldrb	r2, [r2, #0]
 8004690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046aa:	e057      	b.n	800475c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d11c      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x26c>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d017      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x26c>
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d114      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <HAL_SPI_TransmitReceive+0x2ae>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d014      	beq.n	8004736 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004732:	2301      	movs	r3, #1
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004736:	f7fd fa51 	bl	8001bdc <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004742:	429a      	cmp	r2, r3
 8004744:	d803      	bhi.n	800474e <HAL_SPI_TransmitReceive+0x2c6>
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d102      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x2cc>
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800475a:	e029      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1a2      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x224>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d19d      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f925 	bl	80049c4 <SPI_EndRxTxTransaction>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800478c:	e010      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	e000      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3730      	adds	r7, #48	; 0x30
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047da:	b2db      	uxtb	r3, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047f8:	f7fd f9f0 	bl	8001bdc <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	4413      	add	r3, r2
 8004806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004808:	f7fd f9e8 	bl	8001bdc <HAL_GetTick>
 800480c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800480e:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	015b      	lsls	r3, r3, #5
 8004814:	0d1b      	lsrs	r3, r3, #20
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800481e:	e054      	b.n	80048ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d050      	beq.n	80048ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004828:	f7fd f9d8 	bl	8001bdc <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	429a      	cmp	r2, r3
 8004836:	d902      	bls.n	800483e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d13d      	bne.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800484c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004856:	d111      	bne.n	800487c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004860:	d004      	beq.n	800486c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d107      	bne.n	800487c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004884:	d10f      	bne.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e017      	b.n	80048ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	bf0c      	ite	eq
 80048da:	2301      	moveq	r3, #1
 80048dc:	2300      	movne	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d19b      	bne.n	8004820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000000 	.word	0x20000000

080048f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800490c:	d111      	bne.n	8004932 <SPI_EndRxTransaction+0x3a>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004916:	d004      	beq.n	8004922 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004920:	d107      	bne.n	8004932 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004930:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493a:	d12a      	bne.n	8004992 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d012      	beq.n	800496c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2200      	movs	r2, #0
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7ff ff49 	bl	80047e8 <SPI_WaitFlagStateUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02d      	beq.n	80049b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e026      	b.n	80049ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	2101      	movs	r1, #1
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff ff36 	bl	80047e8 <SPI_WaitFlagStateUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01a      	beq.n	80049b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e013      	b.n	80049ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2200      	movs	r2, #0
 800499a:	2101      	movs	r1, #1
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff ff23 	bl	80047e8 <SPI_WaitFlagStateUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e000      	b.n	80049ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <SPI_EndRxTxTransaction+0x7c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <SPI_EndRxTxTransaction+0x80>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	0d5b      	lsrs	r3, r3, #21
 80049dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ee:	d112      	bne.n	8004a16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2200      	movs	r2, #0
 80049f8:	2180      	movs	r1, #128	; 0x80
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff fef4 	bl	80047e8 <SPI_WaitFlagStateUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d016      	beq.n	8004a34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	f043 0220 	orr.w	r2, r3, #32
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e00f      	b.n	8004a36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d0f2      	beq.n	8004a16 <SPI_EndRxTxTransaction+0x52>
 8004a30:	e000      	b.n	8004a34 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a32:	bf00      	nop
  }

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000000 	.word	0x20000000
 8004a44:	165e9f81 	.word	0x165e9f81

08004a48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d123      	bne.n	8004aa2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	6851      	ldr	r1, [r2, #4]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	6892      	ldr	r2, [r2, #8]
 8004a6e:	4311      	orrs	r1, r2
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	68d2      	ldr	r2, [r2, #12]
 8004a74:	4311      	orrs	r1, r2
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	6912      	ldr	r2, [r2, #16]
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	6952      	ldr	r2, [r2, #20]
 8004a80:	4311      	orrs	r1, r2
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	6992      	ldr	r2, [r2, #24]
 8004a86:	4311      	orrs	r1, r2
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	69d2      	ldr	r2, [r2, #28]
 8004a8c:	4311      	orrs	r1, r2
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	6a12      	ldr	r2, [r2, #32]
 8004a92:	4311      	orrs	r1, r2
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e028      	b.n	8004af4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	69d9      	ldr	r1, [r3, #28]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	4319      	orrs	r1, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ac8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	6851      	ldr	r1, [r2, #4]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	6892      	ldr	r2, [r2, #8]
 8004ad4:	4311      	orrs	r1, r2
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	68d2      	ldr	r2, [r2, #12]
 8004ada:	4311      	orrs	r1, r2
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	6912      	ldr	r2, [r2, #16]
 8004ae0:	4311      	orrs	r1, r2
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	6952      	ldr	r2, [r2, #20]
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	6992      	ldr	r2, [r2, #24]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d128      	bne.n	8004b66 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	1e59      	subs	r1, r3, #1
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	4319      	orrs	r1, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	4319      	orrs	r1, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	031b      	lsls	r3, r3, #12
 8004b3e:	4319      	orrs	r1, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	4319      	orrs	r1, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	051b      	lsls	r3, r3, #20
 8004b52:	4319      	orrs	r1, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	e02f      	b.n	8004bc6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	68d2      	ldr	r2, [r2, #12]
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0311      	lsls	r1, r2, #12
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	6952      	ldr	r2, [r2, #20]
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	0512      	lsls	r2, r2, #20
 8004b82:	430a      	orrs	r2, r1
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	1e59      	subs	r1, r3, #1
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	4319      	orrs	r1, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	4319      	orrs	r1, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	4319      	orrs	r1, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	0d9b      	lsrs	r3, r3, #22
 8004bea:	059b      	lsls	r3, r3, #22
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	6811      	ldr	r1, [r2, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	6852      	ldr	r2, [r2, #4]
 8004bf4:	4311      	orrs	r1, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	6892      	ldr	r2, [r2, #8]
 8004bfa:	3a01      	subs	r2, #1
 8004bfc:	0152      	lsls	r2, r2, #5
 8004bfe:	4311      	orrs	r1, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	68d2      	ldr	r2, [r2, #12]
 8004c04:	0252      	lsls	r2, r2, #9
 8004c06:	430a      	orrs	r2, r1
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c0e:	f7fc ffe5 	bl	8001bdc <HAL_GetTick>
 8004c12:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004c14:	e010      	b.n	8004c38 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d00c      	beq.n	8004c38 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <FMC_SDRAM_SendCommand+0x60>
 8004c24:	f7fc ffda 	bl	8001bdc <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d201      	bcs.n	8004c38 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e006      	b.n	8004c46 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d0e8      	beq.n	8004c16 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c60:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	0052      	lsls	r2, r2, #1
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4d0d      	ldr	r5, [pc, #52]	; (8004cb4 <__libc_init_array+0x38>)
 8004c80:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c82:	1b64      	subs	r4, r4, r5
 8004c84:	10a4      	asrs	r4, r4, #2
 8004c86:	2600      	movs	r6, #0
 8004c88:	42a6      	cmp	r6, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	4d0b      	ldr	r5, [pc, #44]	; (8004cbc <__libc_init_array+0x40>)
 8004c8e:	4c0c      	ldr	r4, [pc, #48]	; (8004cc0 <__libc_init_array+0x44>)
 8004c90:	f000 f820 	bl	8004cd4 <_init>
 8004c94:	1b64      	subs	r4, r4, r5
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	2600      	movs	r6, #0
 8004c9a:	42a6      	cmp	r6, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca4:	4798      	blx	r3
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cae:	4798      	blx	r3
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	080067e0 	.word	0x080067e0
 8004cb8:	080067e0 	.word	0x080067e0
 8004cbc:	080067e0 	.word	0x080067e0
 8004cc0:	080067e4 	.word	0x080067e4

08004cc4 <memset>:
 8004cc4:	4402      	add	r2, r0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d100      	bne.n	8004cce <memset+0xa>
 8004ccc:	4770      	bx	lr
 8004cce:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd2:	e7f9      	b.n	8004cc8 <memset+0x4>

08004cd4 <_init>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr

08004ce0 <_fini>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr
