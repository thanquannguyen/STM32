
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004764  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800499c  0800499c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049a4  080049a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080049ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000049c0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200049d0  200049d0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013882  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b56  00000000  00000000  000338c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00036418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b4d  00000000  00000000  00038600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013394  00000000  00000000  0003b14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e10fe  00000000  00000000  0004e4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f5df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000497c  00000000  00000000  0012f630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080048fc 	.word	0x080048fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080048fc 	.word	0x080048fc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa06 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f824 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f882 	bl	8000608 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f001 fc6c 	bl	8001de0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask1, NULL, &Task01_attributes);
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <main+0x3c>)
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x40>)
 800050e:	f001 fcb1 	bl	8001e74 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0x44>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <main+0x48>)
 800051a:	2100      	movs	r1, #0
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0x4c>)
 800051e:	f001 fca9 	bl	8001e74 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <main+0x50>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f001 fc7e 	bl	8001e28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x38>
 800052e:	bf00      	nop
 8000530:	0800493c 	.word	0x0800493c
 8000534:	08000691 	.word	0x08000691
 8000538:	2000002c 	.word	0x2000002c
 800053c:	08004960 	.word	0x08004960
 8000540:	080006b1 	.word	0x080006b1
 8000544:	20000030 	.word	0x20000030

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 f9c8 	bl	80048ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <SystemClock_Config+0xb8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a22      	ldr	r2, [pc, #136]	; (8000600 <SystemClock_Config+0xb8>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <SystemClock_Config+0xb8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <SystemClock_Config+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <SystemClock_Config+0xbc>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <SystemClock_Config+0xbc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fca7 	bl	8000f10 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c8:	f000 f894 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 ff0a 	bl	8001400 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005f2:	f000 f87f 	bl	80006f4 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_GPIO_Init+0x80>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <MX_GPIO_Init+0x80>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_GPIO_Init+0x80>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_GPIO_Init+0x80>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a11      	ldr	r2, [pc, #68]	; (8000688 <MX_GPIO_Init+0x80>)
 8000644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_GPIO_Init+0x80>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <MX_GPIO_Init+0x84>)
 800065e:	f000 fc23 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000662:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_GPIO_Init+0x84>)
 800067c:	f000 fa68 	bl	8000b50 <HAL_GPIO_Init>

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40021800 	.word	0x40021800

08000690 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//    osDelay(1);
	    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <StartTask1+0x1c>)
 800069e:	f000 fc1c 	bl	8000eda <HAL_GPIO_TogglePin>
	    osDelay(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a6:	f001 fc77 	bl	8001f98 <osDelay>
	    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80006aa:	e7f5      	b.n	8000698 <StartTask1+0x8>
 80006ac:	40021800 	.word	0x40021800

080006b0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
//    osDelay(1);
	    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80006b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <StartTask02+0x1c>)
 80006be:	f000 fc0c 	bl	8000eda <HAL_GPIO_TogglePin>
	    osDelay(2000);
 80006c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c6:	f001 fc67 	bl	8001f98 <osDelay>
	    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80006ca:	e7f5      	b.n	80006b8 <StartTask02+0x8>
 80006cc:	40021800 	.word	0x40021800

080006d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d101      	bne.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006e2:	f000 f933 	bl	800094c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40001000 	.word	0x40001000

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x54>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <HAL_MspInit+0x54>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x54>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_MspInit+0x54>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_MspInit+0x54>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_MspInit+0x54>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	210f      	movs	r1, #15
 8000742:	f06f 0001 	mvn.w	r0, #1
 8000746:	f000 f9d9 	bl	8000afc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08e      	sub	sp, #56	; 0x38
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <HAL_InitTick+0xe4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a32      	ldr	r2, [pc, #200]	; (800083c <HAL_InitTick+0xe4>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <HAL_InitTick+0xe4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 0310 	and.w	r3, r3, #16
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000784:	f107 0210 	add.w	r2, r7, #16
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f802 	bl	8001798 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079a:	2b00      	cmp	r3, #0
 800079c:	d103      	bne.n	80007a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800079e:	f000 ffe7 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 80007a2:	6378      	str	r0, [r7, #52]	; 0x34
 80007a4:	e004      	b.n	80007b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007a6:	f000 ffe3 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 80007aa:	4603      	mov	r3, r0
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <HAL_InitTick+0xe8>)
 80007b4:	fba2 2303 	umull	r2, r3, r2, r3
 80007b8:	0c9b      	lsrs	r3, r3, #18
 80007ba:	3b01      	subs	r3, #1
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <HAL_InitTick+0xec>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <HAL_InitTick+0xf0>)
 80007c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <HAL_InitTick+0xec>)
 80007c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007cc:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <HAL_InitTick+0xec>)
 80007ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_InitTick+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <HAL_InitTick+0xec>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_InitTick+0xec>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007e4:	4817      	ldr	r0, [pc, #92]	; (8000844 <HAL_InitTick+0xec>)
 80007e6:	f001 f809 	bl	80017fc <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d11b      	bne.n	8000830 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007f8:	4812      	ldr	r0, [pc, #72]	; (8000844 <HAL_InitTick+0xec>)
 80007fa:	f001 f859 	bl	80018b0 <HAL_TIM_Base_Start_IT>
 80007fe:	4603      	mov	r3, r0
 8000800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000804:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000808:	2b00      	cmp	r3, #0
 800080a:	d111      	bne.n	8000830 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800080c:	2036      	movs	r0, #54	; 0x36
 800080e:	f000 f991 	bl	8000b34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d808      	bhi.n	800082a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	2036      	movs	r0, #54	; 0x36
 800081e:	f000 f96d 	bl	8000afc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_InitTick+0xf4>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	e002      	b.n	8000830 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000834:	4618      	mov	r0, r3
 8000836:	3738      	adds	r7, #56	; 0x38
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	431bde83 	.word	0x431bde83
 8000844:	20000034 	.word	0x20000034
 8000848:	40001000 	.word	0x40001000
 800084c:	20000004 	.word	0x20000004

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM6_DAC_IRQHandler+0x10>)
 8000882:	f001 f885 	bl	8001990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000034 	.word	0x20000034

08000890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <SystemInit+0x20>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <SystemInit+0x20>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ba:	490e      	ldr	r1, [pc, #56]	; (80008f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d0:	4c0b      	ldr	r4, [pc, #44]	; (8000900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008de:	f7ff ffd7 	bl	8000890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f003 ffd1 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e6:	f7ff fe05 	bl	80004f4 <main>
  bx  lr    
 80008ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f8:	080049ac 	.word	0x080049ac
  ldr r2, =_sbss
 80008fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000900:	200049d0 	.word	0x200049d0

08000904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>
	...

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_Init+0x40>)
 8000912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_Init+0x40>)
 800091e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_Init+0x40>)
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f8d8 	bl	8000ae6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	200f      	movs	r0, #15
 8000938:	f7ff ff0e 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff fee0 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023c00 	.word	0x40023c00

0800094c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x20>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_IncTick+0x24>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_IncTick+0x24>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	2000007c 	.word	0x2000007c

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2000007c 	.word	0x2000007c

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db0b      	blt.n	8000a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f003 021f 	and.w	r2, r3, #31
 8000a08:	4907      	ldr	r1, [pc, #28]	; (8000a28 <__NVIC_EnableIRQ+0x38>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	095b      	lsrs	r3, r3, #5
 8000a10:	2001      	movs	r0, #1
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
 8000a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ff4c 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0e:	f7ff ff61 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	68b9      	ldr	r1, [r7, #8]
 8000b18:	6978      	ldr	r0, [r7, #20]
 8000b1a:	f7ff ffb1 	bl	8000a80 <NVIC_EncodePriority>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff80 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff54 	bl	80009f0 <__NVIC_EnableIRQ>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	e177      	b.n	8000e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f040 8166 	bne.w	8000e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d005      	beq.n	8000ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d130      	bne.n	8000c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	091b      	lsrs	r3, r3, #4
 8000bee:	f003 0201 	and.w	r2, r3, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d017      	beq.n	8000c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d123      	bne.n	8000c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	69b9      	ldr	r1, [r7, #24]
 8000c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0203 	and.w	r2, r3, #3
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80c0 	beq.w	8000e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b66      	ldr	r3, [pc, #408]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a65      	ldr	r2, [pc, #404]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b63      	ldr	r3, [pc, #396]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf2:	4a61      	ldr	r2, [pc, #388]	; (8000e78 <HAL_GPIO_Init+0x328>)
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a58      	ldr	r2, [pc, #352]	; (8000e7c <HAL_GPIO_Init+0x32c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d037      	beq.n	8000d8e <HAL_GPIO_Init+0x23e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a57      	ldr	r2, [pc, #348]	; (8000e80 <HAL_GPIO_Init+0x330>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d031      	beq.n	8000d8a <HAL_GPIO_Init+0x23a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a56      	ldr	r2, [pc, #344]	; (8000e84 <HAL_GPIO_Init+0x334>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d02b      	beq.n	8000d86 <HAL_GPIO_Init+0x236>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a55      	ldr	r2, [pc, #340]	; (8000e88 <HAL_GPIO_Init+0x338>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d025      	beq.n	8000d82 <HAL_GPIO_Init+0x232>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a54      	ldr	r2, [pc, #336]	; (8000e8c <HAL_GPIO_Init+0x33c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01f      	beq.n	8000d7e <HAL_GPIO_Init+0x22e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a53      	ldr	r2, [pc, #332]	; (8000e90 <HAL_GPIO_Init+0x340>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d019      	beq.n	8000d7a <HAL_GPIO_Init+0x22a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <HAL_GPIO_Init+0x344>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0x226>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a51      	ldr	r2, [pc, #324]	; (8000e98 <HAL_GPIO_Init+0x348>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x222>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a50      	ldr	r2, [pc, #320]	; (8000e9c <HAL_GPIO_Init+0x34c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x21e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <HAL_GPIO_Init+0x350>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x21a>
 8000d66:	2309      	movs	r3, #9
 8000d68:	e012      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	e010      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d6e:	2308      	movs	r3, #8
 8000d70:	e00e      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e00c      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d76:	2306      	movs	r3, #6
 8000d78:	e00a      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e008      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e004      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	f002 0203 	and.w	r2, r2, #3
 8000d96:	0092      	lsls	r2, r2, #2
 8000d98:	4093      	lsls	r3, r2
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da0:	4935      	ldr	r1, [pc, #212]	; (8000e78 <HAL_GPIO_Init+0x328>)
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dd2:	4a34      	ldr	r2, [pc, #208]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dfc:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	f67f ae84 	bls.w	8000b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021c00 	.word	0x40021c00
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	40022400 	.word	0x40022400
 8000ea4:	40013c00 	.word	0x40013c00

08000ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ec4:	e003      	b.n	8000ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	041a      	lsls	r2, r3, #16
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	619a      	str	r2, [r3, #24]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eec:	887a      	ldrh	r2, [r7, #2]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	041a      	lsls	r2, r3, #16
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	400b      	ands	r3, r1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	619a      	str	r2, [r3, #24]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e267      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d075      	beq.n	800101a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f2e:	4b88      	ldr	r3, [pc, #544]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d00c      	beq.n	8000f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f3a:	4b85      	ldr	r3, [pc, #532]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d112      	bne.n	8000f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f46:	4b82      	ldr	r3, [pc, #520]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f52:	d10b      	bne.n	8000f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	4b7e      	ldr	r3, [pc, #504]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d05b      	beq.n	8001018 <HAL_RCC_OscConfig+0x108>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d157      	bne.n	8001018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e242      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f74:	d106      	bne.n	8000f84 <HAL_RCC_OscConfig+0x74>
 8000f76:	4b76      	ldr	r3, [pc, #472]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a75      	ldr	r2, [pc, #468]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e01d      	b.n	8000fc0 <HAL_RCC_OscConfig+0xb0>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x98>
 8000f8e:	4b70      	ldr	r3, [pc, #448]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6f      	ldr	r2, [pc, #444]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6c      	ldr	r2, [pc, #432]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_RCC_OscConfig+0xb0>
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a68      	ldr	r2, [pc, #416]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b66      	ldr	r3, [pc, #408]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a65      	ldr	r2, [pc, #404]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fcd4 	bl	8000974 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fcd0 	bl	8000974 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e207      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	4b5b      	ldr	r3, [pc, #364]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xc0>
 8000fee:	e014      	b.n	800101a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fcc0 	bl	8000974 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fcbc 	bl	8000974 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e1f3      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0xe8>
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d063      	beq.n	80010ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001026:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800103a:	2b08      	cmp	r3, #8
 800103c:	d11c      	bne.n	8001078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d116      	bne.n	8001078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <HAL_RCC_OscConfig+0x152>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d001      	beq.n	8001062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e1c7      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4937      	ldr	r1, [pc, #220]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	e03a      	b.n	80010ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <HAL_RCC_OscConfig+0x244>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff fc75 	bl	8000974 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fc71 	bl	8000974 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e1a8      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4925      	ldr	r1, [pc, #148]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e015      	b.n	80010ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_RCC_OscConfig+0x244>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c8:	f7ff fc54 	bl	8000974 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fc50 	bl	8000974 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e187      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d036      	beq.n	8001168 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d016      	beq.n	8001130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_RCC_OscConfig+0x248>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001108:	f7ff fc34 	bl	8000974 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001110:	f7ff fc30 	bl	8000974 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e167      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_RCC_OscConfig+0x240>)
 8001124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0x200>
 800112e:	e01b      	b.n	8001168 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_RCC_OscConfig+0x248>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fc1d 	bl	8000974 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113c:	e00e      	b.n	800115c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113e:	f7ff fc19 	bl	8000974 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d907      	bls.n	800115c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e150      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
 8001150:	40023800 	.word	0x40023800
 8001154:	42470000 	.word	0x42470000
 8001158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	4b88      	ldr	r3, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800115e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ea      	bne.n	800113e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8097 	beq.w	80012a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117a:	4b81      	ldr	r3, [pc, #516]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10f      	bne.n	80011a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b7d      	ldr	r3, [pc, #500]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a7c      	ldr	r2, [pc, #496]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b7a      	ldr	r3, [pc, #488]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a2:	2301      	movs	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a6:	4b77      	ldr	r3, [pc, #476]	; (8001384 <HAL_RCC_OscConfig+0x474>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d118      	bne.n	80011e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b2:	4b74      	ldr	r3, [pc, #464]	; (8001384 <HAL_RCC_OscConfig+0x474>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a73      	ldr	r2, [pc, #460]	; (8001384 <HAL_RCC_OscConfig+0x474>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011be:	f7ff fbd9 	bl	8000974 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c6:	f7ff fbd5 	bl	8000974 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e10c      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <HAL_RCC_OscConfig+0x474>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x2ea>
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 80011ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f0:	4a63      	ldr	r2, [pc, #396]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6713      	str	r3, [r2, #112]	; 0x70
 80011f8:	e01c      	b.n	8001234 <HAL_RCC_OscConfig+0x324>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0x30c>
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001206:	4a5e      	ldr	r2, [pc, #376]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6713      	str	r3, [r2, #112]	; 0x70
 800120e:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001212:	4a5b      	ldr	r2, [pc, #364]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6713      	str	r3, [r2, #112]	; 0x70
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0x324>
 800121c:	4b58      	ldr	r3, [pc, #352]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001220:	4a57      	ldr	r2, [pc, #348]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	6713      	str	r3, [r2, #112]	; 0x70
 8001228:	4b55      	ldr	r3, [pc, #340]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800122a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122c:	4a54      	ldr	r2, [pc, #336]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800122e:	f023 0304 	bic.w	r3, r3, #4
 8001232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d015      	beq.n	8001268 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff fb9a 	bl	8000974 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fb96 	bl	8000974 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0cb      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125a:	4b49      	ldr	r3, [pc, #292]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0ee      	beq.n	8001244 <HAL_RCC_OscConfig+0x334>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fb84 	bl	8000974 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126e:	e00a      	b.n	8001286 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7ff fb80 	bl	8000974 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e0b5      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ee      	bne.n	8001270 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d105      	bne.n	80012a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a38      	ldr	r2, [pc, #224]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800129e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a1 	beq.w	80013f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d05c      	beq.n	8001374 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d141      	bne.n	8001346 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <HAL_RCC_OscConfig+0x478>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb54 	bl	8000974 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fb50 	bl	8000974 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e087      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e2:	4b27      	ldr	r3, [pc, #156]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	3b01      	subs	r3, #1
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	061b      	lsls	r3, r3, #24
 8001312:	491b      	ldr	r1, [pc, #108]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_RCC_OscConfig+0x478>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fb29 	bl	8000974 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fb25 	bl	8000974 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e05c      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x416>
 8001344:	e054      	b.n	80013f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_RCC_OscConfig+0x478>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fb12 	bl	8000974 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fb0e 	bl	8000974 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e045      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_RCC_OscConfig+0x470>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x444>
 8001372:	e03d      	b.n	80013f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d107      	bne.n	800138c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e038      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
 8001380:	40023800 	.word	0x40023800
 8001384:	40007000 	.word	0x40007000
 8001388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_OscConfig+0x4ec>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d028      	beq.n	80013ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d121      	bne.n	80013ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d11a      	bne.n	80013ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013bc:	4013      	ands	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d111      	bne.n	80013ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	3b01      	subs	r3, #1
 80013d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d107      	bne.n	80013ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0cc      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d90c      	bls.n	800143c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b65      	ldr	r3, [pc, #404]	; (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0b8      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a58      	ldr	r2, [pc, #352]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800145e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	494d      	ldr	r1, [pc, #308]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	4313      	orrs	r3, r2
 8001488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d044      	beq.n	8001520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d119      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e07f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d003      	beq.n	80014be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e06f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e067      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014de:	4b37      	ldr	r3, [pc, #220]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f023 0203 	bic.w	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4934      	ldr	r1, [pc, #208]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f0:	f7ff fa40 	bl	8000974 <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	e00a      	b.n	800150e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f8:	f7ff fa3c 	bl	8000974 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e04f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 020c 	and.w	r2, r3, #12
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	429a      	cmp	r2, r3
 800151e:	d1eb      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d20c      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e032      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4916      	ldr	r1, [pc, #88]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	490e      	ldr	r1, [pc, #56]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001586:	f000 f821 	bl	80015cc <HAL_RCC_GetSysClockFreq>
 800158a:	4602      	mov	r2, r0
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	490a      	ldr	r1, [pc, #40]	; (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	5ccb      	ldrb	r3, [r1, r3]
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f8d6 	bl	8000758 <HAL_InitTick>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023c00 	.word	0x40023c00
 80015bc:	40023800 	.word	0x40023800
 80015c0:	08004984 	.word	0x08004984
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015d0:	b090      	sub	sp, #64	; 0x40
 80015d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
 80015d8:	2300      	movs	r3, #0
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015dc:	2300      	movs	r3, #0
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_GetSysClockFreq+0x180>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d00d      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x40>
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	f200 80a1 	bhi.w	8001738 <HAL_RCC_GetSysClockFreq+0x16c>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0x34>
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d003      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x3a>
 80015fe:	e09b      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_GetSysClockFreq+0x184>)
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001604:	e09b      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001606:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_GetSysClockFreq+0x188>)
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800160a:	e098      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800160c:	4b4f      	ldr	r3, [pc, #316]	; (800174c <HAL_RCC_GetSysClockFreq+0x180>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001616:	4b4d      	ldr	r3, [pc, #308]	; (800174c <HAL_RCC_GetSysClockFreq+0x180>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d028      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <HAL_RCC_GetSysClockFreq+0x180>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	099b      	lsrs	r3, r3, #6
 8001628:	2200      	movs	r2, #0
 800162a:	623b      	str	r3, [r7, #32]
 800162c:	627a      	str	r2, [r7, #36]	; 0x24
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001634:	2100      	movs	r1, #0
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_GetSysClockFreq+0x188>)
 8001638:	fb03 f201 	mul.w	r2, r3, r1
 800163c:	2300      	movs	r3, #0
 800163e:	fb00 f303 	mul.w	r3, r0, r3
 8001642:	4413      	add	r3, r2
 8001644:	4a43      	ldr	r2, [pc, #268]	; (8001754 <HAL_RCC_GetSysClockFreq+0x188>)
 8001646:	fba0 1202 	umull	r1, r2, r0, r2
 800164a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800164c:	460a      	mov	r2, r1
 800164e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001652:	4413      	add	r3, r2
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	2200      	movs	r2, #0
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	61fa      	str	r2, [r7, #28]
 800165e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001662:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001666:	f7fe fdc3 	bl	80001f0 <__aeabi_uldivmod>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4613      	mov	r3, r2
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001672:	e053      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_RCC_GetSysClockFreq+0x180>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	2200      	movs	r2, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	617a      	str	r2, [r7, #20]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001686:	f04f 0b00 	mov.w	fp, #0
 800168a:	4652      	mov	r2, sl
 800168c:	465b      	mov	r3, fp
 800168e:	f04f 0000 	mov.w	r0, #0
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	0159      	lsls	r1, r3, #5
 8001698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800169c:	0150      	lsls	r0, r2, #5
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	ebb2 080a 	subs.w	r8, r2, sl
 80016a6:	eb63 090b 	sbc.w	r9, r3, fp
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016be:	ebb2 0408 	subs.w	r4, r2, r8
 80016c2:	eb63 0509 	sbc.w	r5, r3, r9
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	00eb      	lsls	r3, r5, #3
 80016d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016d4:	00e2      	lsls	r2, r4, #3
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	eb14 030a 	adds.w	r3, r4, sl
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	eb45 030b 	adc.w	r3, r5, fp
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016f2:	4629      	mov	r1, r5
 80016f4:	028b      	lsls	r3, r1, #10
 80016f6:	4621      	mov	r1, r4
 80016f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016fc:	4621      	mov	r1, r4
 80016fe:	028a      	lsls	r2, r1, #10
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	2200      	movs	r2, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	60fa      	str	r2, [r7, #12]
 800170c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001710:	f7fe fd6e 	bl	80001f0 <__aeabi_uldivmod>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4613      	mov	r3, r2
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_GetSysClockFreq+0x180>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	3301      	adds	r3, #1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800172c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800172e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001736:	e002      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetSysClockFreq+0x184>)
 800173a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800173c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001740:	4618      	mov	r0, r3
 8001742:	3740      	adds	r7, #64	; 0x40
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	00f42400 	.word	0x00f42400
 8001754:	017d7840 	.word	0x017d7840

08001758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_RCC_GetHCLKFreq+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000

08001770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001774:	f7ff fff0 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	0a9b      	lsrs	r3, r3, #10
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	4903      	ldr	r1, [pc, #12]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	08004994 	.word	0x08004994

08001798 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	220f      	movs	r2, #15
 80017a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_GetClockConfig+0x5c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_RCC_GetClockConfig+0x5c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_RCC_GetClockConfig+0x5c>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_GetClockConfig+0x5c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <HAL_RCC_GetClockConfig+0x60>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 020f 	and.w	r2, r3, #15
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40023c00 	.word	0x40023c00

080017fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e041      	b.n	8001892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f839 	bl	800189a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3304      	adds	r3, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f000 f9d8 	bl	8001bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d001      	beq.n	80018c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e04e      	b.n	8001966 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a23      	ldr	r2, [pc, #140]	; (8001974 <HAL_TIM_Base_Start_IT+0xc4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d022      	beq.n	8001930 <HAL_TIM_Base_Start_IT+0x80>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f2:	d01d      	beq.n	8001930 <HAL_TIM_Base_Start_IT+0x80>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <HAL_TIM_Base_Start_IT+0xc8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d018      	beq.n	8001930 <HAL_TIM_Base_Start_IT+0x80>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1e      	ldr	r2, [pc, #120]	; (800197c <HAL_TIM_Base_Start_IT+0xcc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_TIM_Base_Start_IT+0x80>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <HAL_TIM_Base_Start_IT+0xd0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00e      	beq.n	8001930 <HAL_TIM_Base_Start_IT+0x80>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <HAL_TIM_Base_Start_IT+0xd4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d009      	beq.n	8001930 <HAL_TIM_Base_Start_IT+0x80>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_TIM_Base_Start_IT+0xd8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d004      	beq.n	8001930 <HAL_TIM_Base_Start_IT+0x80>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_TIM_Base_Start_IT+0xdc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d111      	bne.n	8001954 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b06      	cmp	r3, #6
 8001940:	d010      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001952:	e007      	b.n	8001964 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40010000 	.word	0x40010000
 8001978:	40000400 	.word	0x40000400
 800197c:	40000800 	.word	0x40000800
 8001980:	40000c00 	.word	0x40000c00
 8001984:	40010400 	.word	0x40010400
 8001988:	40014000 	.word	0x40014000
 800198c:	40001800 	.word	0x40001800

08001990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d122      	bne.n	80019ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d11b      	bne.n	80019ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0202 	mvn.w	r2, #2
 80019bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f8ee 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 80019d8:	e005      	b.n	80019e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f8e0 	bl	8001ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f8f1 	bl	8001bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d122      	bne.n	8001a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d11b      	bne.n	8001a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0204 	mvn.w	r2, #4
 8001a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f8c4 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8001a2c:	e005      	b.n	8001a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8b6 	bl	8001ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f8c7 	bl	8001bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d122      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d11b      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0208 	mvn.w	r2, #8
 8001a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2204      	movs	r2, #4
 8001a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f89a 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8001a80:	e005      	b.n	8001a8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f88c 	bl	8001ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f89d 	bl	8001bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d122      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d11b      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0210 	mvn.w	r2, #16
 8001ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2208      	movs	r2, #8
 8001abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f870 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8001ad4:	e005      	b.n	8001ae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f862 	bl	8001ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f873 	bl	8001bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0201 	mvn.w	r2, #1
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe fdde 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	2b80      	cmp	r3, #128	; 0x80
 8001b20:	d10e      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2c:	2b80      	cmp	r3, #128	; 0x80
 8001b2e:	d107      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f902 	bl	8001d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	2b40      	cmp	r3, #64	; 0x40
 8001b4c:	d10e      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d107      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f838 	bl	8001bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d10e      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0320 	and.w	r3, r3, #32
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	d107      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0220 	mvn.w	r2, #32
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8cc 	bl	8001d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a40      	ldr	r2, [pc, #256]	; (8001d04 <TIM_Base_SetConfig+0x114>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0e:	d00f      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	; (8001d08 <TIM_Base_SetConfig+0x118>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00b      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a3c      	ldr	r2, [pc, #240]	; (8001d0c <TIM_Base_SetConfig+0x11c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d007      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a3b      	ldr	r2, [pc, #236]	; (8001d10 <TIM_Base_SetConfig+0x120>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d003      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3a      	ldr	r2, [pc, #232]	; (8001d14 <TIM_Base_SetConfig+0x124>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d108      	bne.n	8001c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a2f      	ldr	r2, [pc, #188]	; (8001d04 <TIM_Base_SetConfig+0x114>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02b      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c50:	d027      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a2c      	ldr	r2, [pc, #176]	; (8001d08 <TIM_Base_SetConfig+0x118>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d023      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a2b      	ldr	r2, [pc, #172]	; (8001d0c <TIM_Base_SetConfig+0x11c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a2a      	ldr	r2, [pc, #168]	; (8001d10 <TIM_Base_SetConfig+0x120>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01b      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a29      	ldr	r2, [pc, #164]	; (8001d14 <TIM_Base_SetConfig+0x124>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d017      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <TIM_Base_SetConfig+0x128>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <TIM_Base_SetConfig+0x12c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00f      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <TIM_Base_SetConfig+0x130>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00b      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <TIM_Base_SetConfig+0x134>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <TIM_Base_SetConfig+0x138>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <TIM_Base_SetConfig+0x13c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <TIM_Base_SetConfig+0x114>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <TIM_Base_SetConfig+0xf8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <TIM_Base_SetConfig+0x124>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d103      	bne.n	8001cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40010000 	.word	0x40010000
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40000800 	.word	0x40000800
 8001d10:	40000c00 	.word	0x40000c00
 8001d14:	40010400 	.word	0x40010400
 8001d18:	40014000 	.word	0x40014000
 8001d1c:	40014400 	.word	0x40014400
 8001d20:	40014800 	.word	0x40014800
 8001d24:	40001800 	.word	0x40001800
 8001d28:	40001c00 	.word	0x40001c00
 8001d2c:	40002000 	.word	0x40002000

08001d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <__NVIC_SetPriority>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <SysTick_Handler+0x1c>)
 8001db2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001db4:	f002 f93a 	bl	800402c <xTaskGetSchedulerState>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d001      	beq.n	8001dc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001dbe:	f000 fd9b 	bl	80028f8 <xPortSysTickHandler>
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	f06f 0004 	mvn.w	r0, #4
 8001dd6:	f7ff ffbf 	bl	8001d58 <__NVIC_SetPriority>
#endif
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001de6:	f3ef 8305 	mrs	r3, IPSR
 8001dea:	603b      	str	r3, [r7, #0]
  return(result);
 8001dec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001df2:	f06f 0305 	mvn.w	r3, #5
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	e00c      	b.n	8001e14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <osKernelInitialize+0x44>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <osKernelInitialize+0x44>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	e002      	b.n	8001e14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000080 	.word	0x20000080

08001e28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e2e:	f3ef 8305 	mrs	r3, IPSR
 8001e32:	603b      	str	r3, [r7, #0]
  return(result);
 8001e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e3a:	f06f 0305 	mvn.w	r3, #5
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	e010      	b.n	8001e64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <osKernelStart+0x48>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d109      	bne.n	8001e5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e4a:	f7ff ffbf 	bl	8001dcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <osKernelStart+0x48>)
 8001e50:	2202      	movs	r2, #2
 8001e52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e54:	f001 fca2 	bl	800379c <vTaskStartScheduler>
      stat = osOK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	e002      	b.n	8001e64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000080 	.word	0x20000080

08001e74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af04      	add	r7, sp, #16
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e84:	f3ef 8305 	mrs	r3, IPSR
 8001e88:	617b      	str	r3, [r7, #20]
  return(result);
 8001e8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d17e      	bne.n	8001f8e <osThreadNew+0x11a>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d07b      	beq.n	8001f8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001e9a:	2318      	movs	r3, #24
 8001e9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d045      	beq.n	8001f3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <osThreadNew+0x48>
        name = attr->name;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <osThreadNew+0x6e>
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b38      	cmp	r3, #56	; 0x38
 8001ed4:	d805      	bhi.n	8001ee2 <osThreadNew+0x6e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <osThreadNew+0x72>
        return (NULL);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e054      	b.n	8001f90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00e      	beq.n	8001f1c <osThreadNew+0xa8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b5b      	cmp	r3, #91	; 0x5b
 8001f04:	d90a      	bls.n	8001f1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <osThreadNew+0xa8>
        mem = 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	e010      	b.n	8001f3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10c      	bne.n	8001f3e <osThreadNew+0xca>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d108      	bne.n	8001f3e <osThreadNew+0xca>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d104      	bne.n	8001f3e <osThreadNew+0xca>
          mem = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	e001      	b.n	8001f3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d110      	bne.n	8001f66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f4c:	9202      	str	r2, [sp, #8]
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6a3a      	ldr	r2, [r7, #32]
 8001f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f001 fa48 	bl	80033f0 <xTaskCreateStatic>
 8001f60:	4603      	mov	r3, r0
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e013      	b.n	8001f8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d110      	bne.n	8001f8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f001 fa93 	bl	80034aa <xTaskCreate>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <osThreadNew+0x11a>
            hTask = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f8e:	693b      	ldr	r3, [r7, #16]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fa0:	f3ef 8305 	mrs	r3, IPSR
 8001fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <osDelay+0x1c>
    stat = osErrorISR;
 8001fac:	f06f 0305 	mvn.w	r3, #5
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e007      	b.n	8001fc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f001 fbb8 	bl	8003734 <vTaskDelay>
    }
  }

  return (stat);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <vApplicationGetIdleTaskMemory+0x2c>)
 8001fe0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4a06      	ldr	r2, [pc, #24]	; (8002000 <vApplicationGetIdleTaskMemory+0x30>)
 8001fe6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	601a      	str	r2, [r3, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000084 	.word	0x20000084
 8002000:	200000e0 	.word	0x200000e0

08002004 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <vApplicationGetTimerTaskMemory+0x2c>)
 8002014:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <vApplicationGetTimerTaskMemory+0x30>)
 800201a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	200002e0 	.word	0x200002e0
 8002034:	2000033c 	.word	0x2000033c

08002038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002044:	f001 fc10 	bl	8003868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002048:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <pvPortMalloc+0x180>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002050:	f000 f920 	bl	8002294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <pvPortMalloc+0x184>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 8093 	bne.w	8002188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01d      	beq.n	80020a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002068:	2208      	movs	r2, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	2b00      	cmp	r3, #0
 8002078:	d014      	beq.n	80020a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f023 0307 	bic.w	r3, r3, #7
 8002080:	3308      	adds	r3, #8
 8002082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020a0:	bf00      	nop
 80020a2:	e7fe      	b.n	80020a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d06e      	beq.n	8002188 <pvPortMalloc+0x150>
 80020aa:	4b45      	ldr	r3, [pc, #276]	; (80021c0 <pvPortMalloc+0x188>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d869      	bhi.n	8002188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <pvPortMalloc+0x18c>)
 80020b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <pvPortMalloc+0x18c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020be:	e004      	b.n	80020ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d903      	bls.n	80020dc <pvPortMalloc+0xa4>
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f1      	bne.n	80020c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <pvPortMalloc+0x180>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d050      	beq.n	8002188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2208      	movs	r2, #8
 80020ec:	4413      	add	r3, r2
 80020ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	1ad2      	subs	r2, r2, r3
 8002100:	2308      	movs	r3, #8
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	429a      	cmp	r2, r3
 8002106:	d91f      	bls.n	8002148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <pvPortMalloc+0xf8>
	__asm volatile
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	613b      	str	r3, [r7, #16]
}
 800212c:	bf00      	nop
 800212e:	e7fe      	b.n	800212e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002142:	69b8      	ldr	r0, [r7, #24]
 8002144:	f000 f908 	bl	8002358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <pvPortMalloc+0x188>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <pvPortMalloc+0x188>)
 8002154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <pvPortMalloc+0x188>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <pvPortMalloc+0x190>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d203      	bcs.n	800216a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <pvPortMalloc+0x188>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <pvPortMalloc+0x190>)
 8002168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <pvPortMalloc+0x184>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	431a      	orrs	r2, r3
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <pvPortMalloc+0x194>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <pvPortMalloc+0x194>)
 8002186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002188:	f001 fb7c 	bl	8003884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <pvPortMalloc+0x174>
	__asm volatile
 8002196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	60fb      	str	r3, [r7, #12]
}
 80021a8:	bf00      	nop
 80021aa:	e7fe      	b.n	80021aa <pvPortMalloc+0x172>
	return pvReturn;
 80021ac:	69fb      	ldr	r3, [r7, #28]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20004344 	.word	0x20004344
 80021bc:	20004358 	.word	0x20004358
 80021c0:	20004348 	.word	0x20004348
 80021c4:	2000433c 	.word	0x2000433c
 80021c8:	2000434c 	.word	0x2000434c
 80021cc:	20004350 	.word	0x20004350

080021d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04d      	beq.n	800227e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80021e2:	2308      	movs	r3, #8
 80021e4:	425b      	negs	r3, r3
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4413      	add	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <vPortFree+0xb8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <vPortFree+0x44>
	__asm volatile
 80021fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002202:	f383 8811 	msr	BASEPRI, r3
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	60fb      	str	r3, [r7, #12]
}
 8002210:	bf00      	nop
 8002212:	e7fe      	b.n	8002212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <vPortFree+0x62>
	__asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	60bb      	str	r3, [r7, #8]
}
 800222e:	bf00      	nop
 8002230:	e7fe      	b.n	8002230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <vPortFree+0xb8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01e      	beq.n	800227e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11a      	bne.n	800227e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <vPortFree+0xb8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	43db      	mvns	r3, r3
 8002252:	401a      	ands	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002258:	f001 fb06 	bl	8003868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <vPortFree+0xbc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4413      	add	r3, r2
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <vPortFree+0xbc>)
 8002268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800226a:	6938      	ldr	r0, [r7, #16]
 800226c:	f000 f874 	bl	8002358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <vPortFree+0xc0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	4a06      	ldr	r2, [pc, #24]	; (8002290 <vPortFree+0xc0>)
 8002278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800227a:	f001 fb03 	bl	8003884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20004358 	.word	0x20004358
 800228c:	20004348 	.word	0x20004348
 8002290:	20004354 	.word	0x20004354

08002294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800229a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800229e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <prvHeapInit+0xac>)
 80022a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3307      	adds	r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0307 	bic.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <prvHeapInit+0xac>)
 80022c4:	4413      	add	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <prvHeapInit+0xb0>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <prvHeapInit+0xb0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80022e0:	2208      	movs	r2, #8
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0307 	bic.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <prvHeapInit+0xb4>)
 80022f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <prvHeapInit+0xb4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <prvHeapInit+0xb4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	1ad2      	subs	r2, r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <prvHeapInit+0xb4>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <prvHeapInit+0xb8>)
 8002322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a09      	ldr	r2, [pc, #36]	; (8002350 <prvHeapInit+0xbc>)
 800232a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <prvHeapInit+0xc0>)
 800232e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	2000073c 	.word	0x2000073c
 8002344:	2000433c 	.word	0x2000433c
 8002348:	20004344 	.word	0x20004344
 800234c:	2000434c 	.word	0x2000434c
 8002350:	20004348 	.word	0x20004348
 8002354:	20004358 	.word	0x20004358

08002358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <prvInsertBlockIntoFreeList+0xac>)
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <prvInsertBlockIntoFreeList+0x14>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d8f7      	bhi.n	8002366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d108      	bne.n	800239a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	441a      	add	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	441a      	add	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d118      	bne.n	80023e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <prvInsertBlockIntoFreeList+0xb0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d00d      	beq.n	80023d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	441a      	add	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e008      	b.n	80023e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <prvInsertBlockIntoFreeList+0xb0>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e003      	b.n	80023e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d002      	beq.n	80023f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000433c 	.word	0x2000433c
 8002408:	20004344 	.word	0x20004344

0800240c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 0208 	add.w	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f103 0208 	add.w	r2, r3, #8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0208 	add.w	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d103      	bne.n	80024ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e00c      	b.n	80024e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3308      	adds	r3, #8
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e002      	b.n	80024dc <vListInsert+0x2e>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d2f6      	bcs.n	80024d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	601a      	str	r2, [r3, #0]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6892      	ldr	r2, [r2, #8]
 8002536:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6852      	ldr	r2, [r2, #4]
 8002540:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	d103      	bne.n	8002554 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3b04      	subs	r3, #4
 8002584:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800258c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3b04      	subs	r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f023 0201 	bic.w	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b04      	subs	r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025a4:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <pxPortInitialiseStack+0x64>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3b14      	subs	r3, #20
 80025ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3b04      	subs	r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f06f 0202 	mvn.w	r2, #2
 80025c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3b20      	subs	r3, #32
 80025c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	080025dd 	.word	0x080025dd

080025dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <prvTaskExitError+0x54>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d00a      	beq.n	8002606 <prvTaskExitError+0x2a>
	__asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	60fb      	str	r3, [r7, #12]
}
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <prvTaskExitError+0x28>
	__asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	60bb      	str	r3, [r7, #8]
}
 8002618:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800261a:	bf00      	nop
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0fc      	beq.n	800261c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	2000000c 	.word	0x2000000c
	...

08002640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <pxCurrentTCBConst2>)
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	6808      	ldr	r0, [r1, #0]
 8002646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800264a:	f380 8809 	msr	PSP, r0
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f380 8811 	msr	BASEPRI, r0
 800265a:	4770      	bx	lr
 800265c:	f3af 8000 	nop.w

08002660 <pxCurrentTCBConst2>:
 8002660:	200043a4 	.word	0x200043a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop

08002668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002668:	4808      	ldr	r0, [pc, #32]	; (800268c <prvPortStartFirstTask+0x24>)
 800266a:	6800      	ldr	r0, [r0, #0]
 800266c:	6800      	ldr	r0, [r0, #0]
 800266e:	f380 8808 	msr	MSP, r0
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f380 8814 	msr	CONTROL, r0
 800267a:	b662      	cpsie	i
 800267c:	b661      	cpsie	f
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	df00      	svc	0
 8002688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800268a:	bf00      	nop
 800268c:	e000ed08 	.word	0xe000ed08

08002690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002696:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <xPortStartScheduler+0x120>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a46      	ldr	r2, [pc, #280]	; (80027b4 <xPortStartScheduler+0x124>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d10a      	bne.n	80026b6 <xPortStartScheduler+0x26>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	613b      	str	r3, [r7, #16]
}
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <xPortStartScheduler+0x120>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3f      	ldr	r2, [pc, #252]	; (80027b8 <xPortStartScheduler+0x128>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10a      	bne.n	80026d6 <xPortStartScheduler+0x46>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	60fb      	str	r3, [r7, #12]
}
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026d6:	4b39      	ldr	r3, [pc, #228]	; (80027bc <xPortStartScheduler+0x12c>)
 80026d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	22ff      	movs	r2, #255	; 0xff
 80026e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <xPortStartScheduler+0x130>)
 80026fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <xPortStartScheduler+0x134>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002704:	e009      	b.n	800271a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <xPortStartScheduler+0x134>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3b01      	subs	r3, #1
 800270c:	4a2d      	ldr	r2, [pc, #180]	; (80027c4 <xPortStartScheduler+0x134>)
 800270e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b80      	cmp	r3, #128	; 0x80
 8002724:	d0ef      	beq.n	8002706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <xPortStartScheduler+0x134>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	d00a      	beq.n	8002748 <xPortStartScheduler+0xb8>
	__asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	60bb      	str	r3, [r7, #8]
}
 8002744:	bf00      	nop
 8002746:	e7fe      	b.n	8002746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <xPortStartScheduler+0x134>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <xPortStartScheduler+0x134>)
 8002750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <xPortStartScheduler+0x134>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <xPortStartScheduler+0x134>)
 800275c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <xPortStartScheduler+0x138>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <xPortStartScheduler+0x138>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <xPortStartScheduler+0x138>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <xPortStartScheduler+0x138>)
 8002778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800277c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800277e:	f000 f8dd 	bl	800293c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <xPortStartScheduler+0x13c>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002788:	f000 f8fc 	bl	8002984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <xPortStartScheduler+0x140>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <xPortStartScheduler+0x140>)
 8002792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002798:	f7ff ff66 	bl	8002668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800279c:	f001 f9da 	bl	8003b54 <vTaskSwitchContext>
	prvTaskExitError();
 80027a0:	f7ff ff1c 	bl	80025dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00
 80027b4:	410fc271 	.word	0x410fc271
 80027b8:	410fc270 	.word	0x410fc270
 80027bc:	e000e400 	.word	0xe000e400
 80027c0:	2000435c 	.word	0x2000435c
 80027c4:	20004360 	.word	0x20004360
 80027c8:	e000ed20 	.word	0xe000ed20
 80027cc:	2000000c 	.word	0x2000000c
 80027d0:	e000ef34 	.word	0xe000ef34

080027d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
	__asm volatile
 80027da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	607b      	str	r3, [r7, #4]
}
 80027ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <vPortEnterCritical+0x58>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <vPortEnterCritical+0x58>)
 80027f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <vPortEnterCritical+0x58>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d10f      	bne.n	8002820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <vPortEnterCritical+0x5c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <vPortEnterCritical+0x4c>
	__asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	603b      	str	r3, [r7, #0]
}
 800281c:	bf00      	nop
 800281e:	e7fe      	b.n	800281e <vPortEnterCritical+0x4a>
	}
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	2000000c 	.word	0x2000000c
 8002830:	e000ed04 	.word	0xe000ed04

08002834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <vPortExitCritical+0x50>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <vPortExitCritical+0x24>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	607b      	str	r3, [r7, #4]
}
 8002854:	bf00      	nop
 8002856:	e7fe      	b.n	8002856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <vPortExitCritical+0x50>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3b01      	subs	r3, #1
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <vPortExitCritical+0x50>)
 8002860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <vPortExitCritical+0x50>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <vPortExitCritical+0x42>
 800286a:	2300      	movs	r3, #0
 800286c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	2000000c 	.word	0x2000000c
	...

08002890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002890:	f3ef 8009 	mrs	r0, PSP
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <pxCurrentTCBConst>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	f01e 0f10 	tst.w	lr, #16
 80028a0:	bf08      	it	eq
 80028a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028aa:	6010      	str	r0, [r2, #0]
 80028ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028b4:	f380 8811 	msr	BASEPRI, r0
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f001 f948 	bl	8003b54 <vTaskSwitchContext>
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	f380 8811 	msr	BASEPRI, r0
 80028cc:	bc09      	pop	{r0, r3}
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	6808      	ldr	r0, [r1, #0]
 80028d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d6:	f01e 0f10 	tst.w	lr, #16
 80028da:	bf08      	it	eq
 80028dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028e0:	f380 8809 	msr	PSP, r0
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	f3af 8000 	nop.w

080028f0 <pxCurrentTCBConst>:
 80028f0:	200043a4 	.word	0x200043a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop

080028f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	__asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	607b      	str	r3, [r7, #4]
}
 8002910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002912:	f001 f865 	bl	80039e0 <xTaskIncrementTick>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <xPortSysTickHandler+0x40>)
 800291e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	2300      	movs	r3, #0
 8002926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f383 8811 	msr	BASEPRI, r3
}
 800292e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	e000ed04 	.word	0xe000ed04

0800293c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <vPortSetupTimerInterrupt+0x34>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <vPortSetupTimerInterrupt+0x38>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <vPortSetupTimerInterrupt+0x3c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <vPortSetupTimerInterrupt+0x40>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	099b      	lsrs	r3, r3, #6
 8002958:	4a09      	ldr	r2, [pc, #36]	; (8002980 <vPortSetupTimerInterrupt+0x44>)
 800295a:	3b01      	subs	r3, #1
 800295c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <vPortSetupTimerInterrupt+0x34>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010
 8002974:	e000e018 	.word	0xe000e018
 8002978:	20000000 	.word	0x20000000
 800297c:	10624dd3 	.word	0x10624dd3
 8002980:	e000e014 	.word	0xe000e014

08002984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002994 <vPortEnableVFP+0x10>
 8002988:	6801      	ldr	r1, [r0, #0]
 800298a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800298e:	6001      	str	r1, [r0, #0]
 8002990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002992:	bf00      	nop
 8002994:	e000ed88 	.word	0xe000ed88

08002998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800299e:	f3ef 8305 	mrs	r3, IPSR
 80029a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b0f      	cmp	r3, #15
 80029a8:	d914      	bls.n	80029d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80029aa:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <vPortValidateInterruptPriority+0x70>)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <vPortValidateInterruptPriority+0x74>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	7afa      	ldrb	r2, [r7, #11]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d20a      	bcs.n	80029d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	607b      	str	r3, [r7, #4]
}
 80029d0:	bf00      	nop
 80029d2:	e7fe      	b.n	80029d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <vPortValidateInterruptPriority+0x78>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <vPortValidateInterruptPriority+0x7c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d90a      	bls.n	80029fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	603b      	str	r3, [r7, #0]
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <vPortValidateInterruptPriority+0x60>
	}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e3f0 	.word	0xe000e3f0
 8002a0c:	2000435c 	.word	0x2000435c
 8002a10:	e000ed0c 	.word	0xe000ed0c
 8002a14:	20004360 	.word	0x20004360

08002a18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericReset+0x2a>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	60bb      	str	r3, [r7, #8]
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a42:	f7ff fec7 	bl	80027d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	441a      	add	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	3b01      	subs	r3, #1
 8002a74:	68f9      	ldr	r1, [r7, #12]
 8002a76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	441a      	add	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	22ff      	movs	r2, #255	; 0xff
 8002a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d114      	bne.n	8002ac2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01a      	beq.n	8002ad6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3310      	adds	r3, #16
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 f903 	bl	8003cb0 <xTaskRemoveFromEventList>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <xQueueGenericReset+0xcc>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	e009      	b.n	8002ad6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3310      	adds	r3, #16
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fca0 	bl	800240c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3324      	adds	r3, #36	; 0x24
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fc9b 	bl	800240c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ad6:	f7ff fead 	bl	8002834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	e000ed04 	.word	0xe000ed04

08002ae8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08e      	sub	sp, #56	; 0x38
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <xQueueGenericCreateStatic+0x52>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <xQueueGenericCreateStatic+0x56>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <xQueueGenericCreateStatic+0x58>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	623b      	str	r3, [r7, #32]
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <xQueueGenericCreateStatic+0x7e>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <xQueueGenericCreateStatic+0x82>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <xQueueGenericCreateStatic+0x84>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	61fb      	str	r3, [r7, #28]
}
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b86:	2350      	movs	r3, #80	; 0x50
 8002b88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b50      	cmp	r3, #80	; 0x50
 8002b8e:	d00a      	beq.n	8002ba6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	61bb      	str	r3, [r7, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	e7fe      	b.n	8002ba4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ba6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f805 	bl	8002bd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3730      	adds	r7, #48	; 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e002      	b.n	8002bfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c06:	2101      	movs	r1, #1
 8002c08:	69b8      	ldr	r0, [r7, #24]
 8002c0a:	f7ff ff05 	bl	8002a18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08e      	sub	sp, #56	; 0x38
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueGenericSend+0x32>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <xQueueGenericSend+0x40>
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xQueueGenericSend+0x44>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <xQueueGenericSend+0x46>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <xQueueGenericSend+0x60>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d103      	bne.n	8002c8e <xQueueGenericSend+0x6e>
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <xQueueGenericSend+0x72>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <xQueueGenericSend+0x74>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xQueueGenericSend+0x8e>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	623b      	str	r3, [r7, #32]
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cae:	f001 f9bd 	bl	800402c <xTaskGetSchedulerState>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <xQueueGenericSend+0x9e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <xQueueGenericSend+0xa2>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <xQueueGenericSend+0xa4>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <xQueueGenericSend+0xbe>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	61fb      	str	r3, [r7, #28]
}
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cde:	f7ff fd79 	bl	80027d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <xQueueGenericSend+0xd4>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d129      	bne.n	8002d48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfa:	f000 fa0b 	bl	8003114 <prvCopyDataToQueue>
 8002cfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 ffcf 	bl	8003cb0 <xTaskRemoveFromEventList>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d18:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <xQueueGenericSend+0x1f8>)
 8002d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	e00a      	b.n	8002d40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <xQueueGenericSend+0x1f8>)
 8002d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d40:	f7ff fd78 	bl	8002834 <vPortExitCritical>
				return pdPASS;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e063      	b.n	8002e10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d4e:	f7ff fd71 	bl	8002834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e05c      	b.n	8002e10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 f809 	bl	8003d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d6a:	f7ff fd63 	bl	8002834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d6e:	f000 fd7b 	bl	8003868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d72:	f7ff fd2f 	bl	80027d4 <vPortEnterCritical>
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d103      	bne.n	8002d8c <xQueueGenericSend+0x16c>
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d103      	bne.n	8002da2 <xQueueGenericSend+0x182>
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da2:	f7ff fd47 	bl	8002834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002da6:	1d3a      	adds	r2, r7, #4
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fff8 	bl	8003da4 <xTaskCheckForTimeOut>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d124      	bne.n	8002e04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dbc:	f000 faa2 	bl	8003304 <prvIsQueueFull>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d018      	beq.n	8002df8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	3310      	adds	r3, #16
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 ff1e 	bl	8003c10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd6:	f000 fa2d 	bl	8003234 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dda:	f000 fd53 	bl	8003884 <xTaskResumeAll>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f af7c 	bne.w	8002cde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <xQueueGenericSend+0x1f8>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	e772      	b.n	8002cde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dfa:	f000 fa1b 	bl	8003234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dfe:	f000 fd41 	bl	8003884 <xTaskResumeAll>
 8002e02:	e76c      	b.n	8002cde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e06:	f000 fa15 	bl	8003234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e0a:	f000 fd3b 	bl	8003884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3738      	adds	r7, #56	; 0x38
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b090      	sub	sp, #64	; 0x40
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <xQueueGenericSendFromISR+0x3c>
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <xQueueGenericSendFromISR+0x40>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <xQueueGenericSendFromISR+0x42>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d103      	bne.n	8002e86 <xQueueGenericSendFromISR+0x6a>
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <xQueueGenericSendFromISR+0x6e>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueGenericSendFromISR+0x70>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	623b      	str	r3, [r7, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ea6:	f7ff fd77 	bl	8002998 <vPortValidateInterruptPriority>
	__asm volatile
 8002eaa:	f3ef 8211 	mrs	r2, BASEPRI
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	61fa      	str	r2, [r7, #28]
 8002ec0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <xQueueGenericSendFromISR+0xbc>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d12f      	bne.n	8002f38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eee:	f000 f911 	bl	8003114 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ef2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d112      	bne.n	8002f22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d016      	beq.n	8002f32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fed1 	bl	8003cb0 <xTaskRemoveFromEventList>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00e      	beq.n	8002f32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e007      	b.n	8002f32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f26:	3301      	adds	r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	b25a      	sxtb	r2, r3
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f32:	2301      	movs	r3, #1
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f36:	e001      	b.n	8002f3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f383 8811 	msr	BASEPRI, r3
}
 8002f46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3740      	adds	r7, #64	; 0x40
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	; 0x30
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <xQueueReceive+0x30>
	__asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	623b      	str	r3, [r7, #32]
}
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <xQueueReceive+0x3e>
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <xQueueReceive+0x42>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <xQueueReceive+0x44>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xQueueReceive+0x5e>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61fb      	str	r3, [r7, #28]
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fb2:	f001 f83b 	bl	800402c <xTaskGetSchedulerState>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <xQueueReceive+0x6e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <xQueueReceive+0x72>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <xQueueReceive+0x74>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <xQueueReceive+0x8e>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	61bb      	str	r3, [r7, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	e7fe      	b.n	8002fe0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fe2:	f7ff fbf7 	bl	80027d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01f      	beq.n	8003032 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff6:	f000 f8f7 	bl	80031e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00f      	beq.n	800302a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	3310      	adds	r3, #16
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fe4e 	bl	8003cb0 <xTaskRemoveFromEventList>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <xQueueReceive+0x1bc>)
 800301c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800302a:	f7ff fc03 	bl	8002834 <vPortExitCritical>
				return pdPASS;
 800302e:	2301      	movs	r3, #1
 8003030:	e069      	b.n	8003106 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003038:	f7ff fbfc 	bl	8002834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800303c:	2300      	movs	r3, #0
 800303e:	e062      	b.n	8003106 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003046:	f107 0310 	add.w	r3, r7, #16
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fe94 	bl	8003d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003050:	2301      	movs	r3, #1
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003054:	f7ff fbee 	bl	8002834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003058:	f000 fc06 	bl	8003868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800305c:	f7ff fbba 	bl	80027d4 <vPortEnterCritical>
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003066:	b25b      	sxtb	r3, r3
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d103      	bne.n	8003076 <xQueueReceive+0x122>
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800307c:	b25b      	sxtb	r3, r3
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d103      	bne.n	800308c <xQueueReceive+0x138>
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800308c:	f7ff fbd2 	bl	8002834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003090:	1d3a      	adds	r2, r7, #4
 8003092:	f107 0310 	add.w	r3, r7, #16
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fe83 	bl	8003da4 <xTaskCheckForTimeOut>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d123      	bne.n	80030ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a6:	f000 f917 	bl	80032d8 <prvIsQueueEmpty>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d017      	beq.n	80030e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	3324      	adds	r3, #36	; 0x24
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fda9 	bl	8003c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c0:	f000 f8b8 	bl	8003234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030c4:	f000 fbde 	bl	8003884 <xTaskResumeAll>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d189      	bne.n	8002fe2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <xQueueReceive+0x1bc>)
 80030d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	e780      	b.n	8002fe2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e2:	f000 f8a7 	bl	8003234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030e6:	f000 fbcd 	bl	8003884 <xTaskResumeAll>
 80030ea:	e77a      	b.n	8002fe2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ee:	f000 f8a1 	bl	8003234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030f2:	f000 fbc7 	bl	8003884 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f8:	f000 f8ee 	bl	80032d8 <prvIsQueueEmpty>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f43f af6f 	beq.w	8002fe2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003104:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003106:	4618      	mov	r0, r3
 8003108:	3730      	adds	r7, #48	; 0x30
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d14d      	bne.n	80031d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 ff92 	bl	8004068 <xTaskPriorityDisinherit>
 8003144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	e043      	b.n	80031d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d119      	bne.n	8003188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6858      	ldr	r0, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	461a      	mov	r2, r3
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	f001 fbb6 	bl	80048d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	441a      	add	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	d32b      	bcc.n	80031d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	e026      	b.n	80031d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68d8      	ldr	r0, [r3, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	461a      	mov	r2, r3
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	f001 fb9c 	bl	80048d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	425b      	negs	r3, r3
 80031a2:	441a      	add	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d207      	bcs.n	80031c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	425b      	negs	r3, r3
 80031be:	441a      	add	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d105      	bne.n	80031d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031de:	697b      	ldr	r3, [r7, #20]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d018      	beq.n	800322c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	441a      	add	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	429a      	cmp	r2, r3
 8003212:	d303      	bcc.n	800321c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68d9      	ldr	r1, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	461a      	mov	r2, r3
 8003226:	6838      	ldr	r0, [r7, #0]
 8003228:	f001 fb52 	bl	80048d0 <memcpy>
	}
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800323c:	f7ff faca 	bl	80027d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003246:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003248:	e011      	b.n	800326e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3324      	adds	r3, #36	; 0x24
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fd2a 	bl	8003cb0 <xTaskRemoveFromEventList>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003262:	f000 fe01 	bl	8003e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	3b01      	subs	r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800326e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	dce9      	bgt.n	800324a <prvUnlockQueue+0x16>
 8003276:	e000      	b.n	800327a <prvUnlockQueue+0x46>
					break;
 8003278:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	22ff      	movs	r2, #255	; 0xff
 800327e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003282:	f7ff fad7 	bl	8002834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003286:	f7ff faa5 	bl	80027d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003290:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003292:	e011      	b.n	80032b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d012      	beq.n	80032c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3310      	adds	r3, #16
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fd05 	bl	8003cb0 <xTaskRemoveFromEventList>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032ac:	f000 fddc 	bl	8003e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032b0:	7bbb      	ldrb	r3, [r7, #14]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	dce9      	bgt.n	8003294 <prvUnlockQueue+0x60>
 80032c0:	e000      	b.n	80032c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	22ff      	movs	r2, #255	; 0xff
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032cc:	f7ff fab2 	bl	8002834 <vPortExitCritical>
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032e0:	f7ff fa78 	bl	80027d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d102      	bne.n	80032f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e001      	b.n	80032f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032f6:	f7ff fa9d 	bl	8002834 <vPortExitCritical>

	return xReturn;
 80032fa:	68fb      	ldr	r3, [r7, #12]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800330c:	f7ff fa62 	bl	80027d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	429a      	cmp	r2, r3
 800331a:	d102      	bne.n	8003322 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800331c:	2301      	movs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e001      	b.n	8003326 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003326:	f7ff fa85 	bl	8002834 <vPortExitCritical>

	return xReturn;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	e014      	b.n	800336e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003344:	4a0f      	ldr	r2, [pc, #60]	; (8003384 <vQueueAddToRegistry+0x50>)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003350:	490c      	ldr	r1, [pc, #48]	; (8003384 <vQueueAddToRegistry+0x50>)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <vQueueAddToRegistry+0x50>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003366:	e006      	b.n	8003376 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b07      	cmp	r3, #7
 8003372:	d9e7      	bls.n	8003344 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20004364 	.word	0x20004364

08003388 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003398:	f7ff fa1c 	bl	80027d4 <vPortEnterCritical>
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d103      	bne.n	80033b2 <vQueueWaitForMessageRestricted+0x2a>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033b8:	b25b      	sxtb	r3, r3
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d103      	bne.n	80033c8 <vQueueWaitForMessageRestricted+0x40>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033c8:	f7ff fa34 	bl	8002834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fc3b 	bl	8003c58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7ff ff26 	bl	8003234 <prvUnlockQueue>
	}
 80033e8:	bf00      	nop
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08e      	sub	sp, #56	; 0x38
 80033f4:	af04      	add	r7, sp, #16
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	623b      	str	r3, [r7, #32]
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xTaskCreateStatic+0x46>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	61fb      	str	r3, [r7, #28]
}
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003436:	235c      	movs	r3, #92	; 0x5c
 8003438:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b5c      	cmp	r3, #92	; 0x5c
 800343e:	d00a      	beq.n	8003456 <xTaskCreateStatic+0x66>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	61bb      	str	r3, [r7, #24]
}
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003456:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01e      	beq.n	800349c <xTaskCreateStatic+0xac>
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800346c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	2202      	movs	r2, #2
 8003472:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003476:	2300      	movs	r3, #0
 8003478:	9303      	str	r3, [sp, #12]
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	9302      	str	r3, [sp, #8]
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f850 	bl	8003534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003496:	f000 f8dd 	bl	8003654 <prvAddNewTaskToReadyList>
 800349a:	e001      	b.n	80034a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034a0:	697b      	ldr	r3, [r7, #20]
	}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3728      	adds	r7, #40	; 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08c      	sub	sp, #48	; 0x30
 80034ae:	af04      	add	r7, sp, #16
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fdba 	bl	8002038 <pvPortMalloc>
 80034c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00e      	beq.n	80034ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034cc:	205c      	movs	r0, #92	; 0x5c
 80034ce:	f7fe fdb3 	bl	8002038 <pvPortMalloc>
 80034d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
 80034e0:	e005      	b.n	80034ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034e2:	6978      	ldr	r0, [r7, #20]
 80034e4:	f7fe fe74 	bl	80021d0 <vPortFree>
 80034e8:	e001      	b.n	80034ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d017      	beq.n	8003524 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	2300      	movs	r3, #0
 8003500:	9303      	str	r3, [sp, #12]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	9302      	str	r3, [sp, #8]
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f80e 	bl	8003534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003518:	69f8      	ldr	r0, [r7, #28]
 800351a:	f000 f89b 	bl	8003654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800351e:	2301      	movs	r3, #1
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e002      	b.n	800352a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800352a:	69bb      	ldr	r3, [r7, #24]
	}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	461a      	mov	r2, r3
 800354c:	21a5      	movs	r1, #165	; 0xa5
 800354e:	f001 f9cd 	bl	80048ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800355c:	3b01      	subs	r3, #1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f023 0307 	bic.w	r3, r3, #7
 800356a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	617b      	str	r3, [r7, #20]
}
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01f      	beq.n	80035d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e012      	b.n	80035be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	7819      	ldrb	r1, [r3, #0]
 80035a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	3334      	adds	r3, #52	; 0x34
 80035a8:	460a      	mov	r2, r1
 80035aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	3301      	adds	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	2b0f      	cmp	r3, #15
 80035c2:	d9e9      	bls.n	8003598 <prvInitialiseNewTask+0x64>
 80035c4:	e000      	b.n	80035c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80035c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d0:	e003      	b.n	80035da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	2b37      	cmp	r3, #55	; 0x37
 80035de:	d901      	bls.n	80035e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035e0:	2337      	movs	r3, #55	; 0x37
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	2200      	movs	r2, #0
 80035f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	3304      	adds	r3, #4
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe ff26 	bl	800244c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	3318      	adds	r3, #24
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe ff21 	bl	800244c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	2200      	movs	r2, #0
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	69b8      	ldr	r0, [r7, #24]
 8003634:	f7fe ff9e 	bl	8002574 <pxPortInitialiseStack>
 8003638:	4602      	mov	r2, r0
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800364a:	bf00      	nop
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800365c:	f7ff f8ba 	bl	80027d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <prvAddNewTaskToReadyList+0xc4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <prvAddNewTaskToReadyList+0xc4>)
 8003668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003672:	4a2a      	ldr	r2, [pc, #168]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <prvAddNewTaskToReadyList+0xc4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d110      	bne.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003680:	f000 fc16 	bl	8003eb0 <prvInitialiseTaskLists>
 8003684:	e00d      	b.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <prvAddNewTaskToReadyList+0xcc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800368e:	4b23      	ldr	r3, [pc, #140]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	429a      	cmp	r2, r3
 800369a:	d802      	bhi.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <prvAddNewTaskToReadyList+0xd0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <prvAddNewTaskToReadyList+0xd0>)
 80036aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <prvAddNewTaskToReadyList+0xd0>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <prvAddNewTaskToReadyList+0xd4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d903      	bls.n	80036c8 <prvAddNewTaskToReadyList+0x74>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <prvAddNewTaskToReadyList+0xd4>)
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4a15      	ldr	r2, [pc, #84]	; (800372c <prvAddNewTaskToReadyList+0xd8>)
 80036d6:	441a      	add	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f7fe fec1 	bl	8002466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036e4:	f7ff f8a6 	bl	8002834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <prvAddNewTaskToReadyList+0xcc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d207      	bcs.n	800370e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <prvAddNewTaskToReadyList+0xdc>)
 8003700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20004878 	.word	0x20004878
 800371c:	200043a4 	.word	0x200043a4
 8003720:	20004884 	.word	0x20004884
 8003724:	20004894 	.word	0x20004894
 8003728:	20004880 	.word	0x20004880
 800372c:	200043a8 	.word	0x200043a8
 8003730:	e000ed04 	.word	0xe000ed04

08003734 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d017      	beq.n	8003776 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <vTaskDelay+0x60>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <vTaskDelay+0x30>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	60bb      	str	r3, [r7, #8]
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003764:	f000 f880 	bl	8003868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003768:	2100      	movs	r1, #0
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fcea 	bl	8004144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003770:	f000 f888 	bl	8003884 <xTaskResumeAll>
 8003774:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <vTaskDelay+0x64>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	200048a0 	.word	0x200048a0
 8003798:	e000ed04 	.word	0xe000ed04

0800379c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037aa:	463a      	mov	r2, r7
 80037ac:	1d39      	adds	r1, r7, #4
 80037ae:	f107 0308 	add.w	r3, r7, #8
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fc0c 	bl	8001fd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	9202      	str	r2, [sp, #8]
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	2300      	movs	r3, #0
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2300      	movs	r3, #0
 80037c8:	460a      	mov	r2, r1
 80037ca:	4921      	ldr	r1, [pc, #132]	; (8003850 <vTaskStartScheduler+0xb4>)
 80037cc:	4821      	ldr	r0, [pc, #132]	; (8003854 <vTaskStartScheduler+0xb8>)
 80037ce:	f7ff fe0f 	bl	80033f0 <xTaskCreateStatic>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <vTaskStartScheduler+0xbc>)
 80037d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <vTaskStartScheduler+0xbc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037e0:	2301      	movs	r3, #1
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e001      	b.n	80037ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80037f0:	f000 fcfc 	bl	80041ec <xTimerCreateTimerTask>
 80037f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d116      	bne.n	800382a <vTaskStartScheduler+0x8e>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	613b      	str	r3, [r7, #16]
}
 800380e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <vTaskStartScheduler+0xc0>)
 8003812:	f04f 32ff 	mov.w	r2, #4294967295
 8003816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <vTaskStartScheduler+0xc4>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <vTaskStartScheduler+0xc8>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003824:	f7fe ff34 	bl	8002690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003828:	e00e      	b.n	8003848 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d10a      	bne.n	8003848 <vTaskStartScheduler+0xac>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	60fb      	str	r3, [r7, #12]
}
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <vTaskStartScheduler+0xaa>
}
 8003848:	bf00      	nop
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	08004924 	.word	0x08004924
 8003854:	08003e81 	.word	0x08003e81
 8003858:	2000489c 	.word	0x2000489c
 800385c:	20004898 	.word	0x20004898
 8003860:	20004884 	.word	0x20004884
 8003864:	2000487c 	.word	0x2000487c

08003868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <vTaskSuspendAll+0x18>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	4a03      	ldr	r2, [pc, #12]	; (8003880 <vTaskSuspendAll+0x18>)
 8003874:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	200048a0 	.word	0x200048a0

08003884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003892:	4b42      	ldr	r3, [pc, #264]	; (800399c <xTaskResumeAll+0x118>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	603b      	str	r3, [r7, #0]
}
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038b0:	f7fe ff90 	bl	80027d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038b4:	4b39      	ldr	r3, [pc, #228]	; (800399c <xTaskResumeAll+0x118>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <xTaskResumeAll+0x118>)
 80038bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <xTaskResumeAll+0x118>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d162      	bne.n	800398c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <xTaskResumeAll+0x11c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d05e      	beq.n	800398c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ce:	e02f      	b.n	8003930 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <xTaskResumeAll+0x120>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3318      	adds	r3, #24
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fe1f 	bl	8002520 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fe1a 	bl	8002520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <xTaskResumeAll+0x124>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d903      	bls.n	8003900 <xTaskResumeAll+0x7c>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <xTaskResumeAll+0x124>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <xTaskResumeAll+0x128>)
 800390e:	441a      	add	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f7fe fda5 	bl	8002466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <xTaskResumeAll+0x12c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <xTaskResumeAll+0x130>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <xTaskResumeAll+0x120>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1cb      	bne.n	80038d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800393e:	f000 fb55 	bl	8003fec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <xTaskResumeAll+0x134>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d010      	beq.n	8003970 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800394e:	f000 f847 	bl	80039e0 <xTaskIncrementTick>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003958:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <xTaskResumeAll+0x130>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3b01      	subs	r3, #1
 8003962:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f1      	bne.n	800394e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <xTaskResumeAll+0x134>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003970:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <xTaskResumeAll+0x130>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <xTaskResumeAll+0x138>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800398c:	f7fe ff52 	bl	8002834 <vPortExitCritical>

	return xAlreadyYielded;
 8003990:	68bb      	ldr	r3, [r7, #8]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200048a0 	.word	0x200048a0
 80039a0:	20004878 	.word	0x20004878
 80039a4:	20004838 	.word	0x20004838
 80039a8:	20004880 	.word	0x20004880
 80039ac:	200043a8 	.word	0x200043a8
 80039b0:	200043a4 	.word	0x200043a4
 80039b4:	2000488c 	.word	0x2000488c
 80039b8:	20004888 	.word	0x20004888
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <xTaskGetTickCount+0x1c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039cc:	687b      	ldr	r3, [r7, #4]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000487c 	.word	0x2000487c

080039e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ea:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <xTaskIncrementTick+0x148>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 808f 	bne.w	8003b12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039f4:	4b4d      	ldr	r3, [pc, #308]	; (8003b2c <xTaskIncrementTick+0x14c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039fc:	4a4b      	ldr	r2, [pc, #300]	; (8003b2c <xTaskIncrementTick+0x14c>)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d120      	bne.n	8003a4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a08:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <xTaskIncrementTick+0x150>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	603b      	str	r3, [r7, #0]
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xTaskIncrementTick+0x46>
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <xTaskIncrementTick+0x150>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <xTaskIncrementTick+0x154>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3f      	ldr	r2, [pc, #252]	; (8003b30 <xTaskIncrementTick+0x150>)
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4a3f      	ldr	r2, [pc, #252]	; (8003b34 <xTaskIncrementTick+0x154>)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <xTaskIncrementTick+0x158>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	4a3d      	ldr	r2, [pc, #244]	; (8003b38 <xTaskIncrementTick+0x158>)
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	f000 fad1 	bl	8003fec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a4a:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <xTaskIncrementTick+0x15c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d349      	bcc.n	8003ae8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a54:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <xTaskIncrementTick+0x150>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5e:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <xTaskIncrementTick+0x15c>)
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	601a      	str	r2, [r3, #0]
					break;
 8003a66:	e03f      	b.n	8003ae8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a68:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <xTaskIncrementTick+0x150>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d203      	bcs.n	8003a88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a80:	4a2e      	ldr	r2, [pc, #184]	; (8003b3c <xTaskIncrementTick+0x15c>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a86:	e02f      	b.n	8003ae8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe fd47 	bl	8002520 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3318      	adds	r3, #24
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe fd3e 	bl	8002520 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <xTaskIncrementTick+0x160>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d903      	bls.n	8003ab8 <xTaskIncrementTick+0xd8>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <xTaskIncrementTick+0x160>)
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <xTaskIncrementTick+0x164>)
 8003ac6:	441a      	add	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f7fe fcc9 	bl	8002466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <xTaskIncrementTick+0x168>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d3b8      	bcc.n	8003a54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae6:	e7b5      	b.n	8003a54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <xTaskIncrementTick+0x168>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	4915      	ldr	r1, [pc, #84]	; (8003b44 <xTaskIncrementTick+0x164>)
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d901      	bls.n	8003b04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <xTaskIncrementTick+0x16c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e004      	b.n	8003b1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <xTaskIncrementTick+0x170>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <xTaskIncrementTick+0x170>)
 8003b1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b1c:	697b      	ldr	r3, [r7, #20]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200048a0 	.word	0x200048a0
 8003b2c:	2000487c 	.word	0x2000487c
 8003b30:	20004830 	.word	0x20004830
 8003b34:	20004834 	.word	0x20004834
 8003b38:	20004890 	.word	0x20004890
 8003b3c:	20004898 	.word	0x20004898
 8003b40:	20004880 	.word	0x20004880
 8003b44:	200043a8 	.word	0x200043a8
 8003b48:	200043a4 	.word	0x200043a4
 8003b4c:	2000488c 	.word	0x2000488c
 8003b50:	20004888 	.word	0x20004888

08003b54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b5a:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <vTaskSwitchContext+0xa8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <vTaskSwitchContext+0xac>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b68:	e041      	b.n	8003bee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003b6a:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <vTaskSwitchContext+0xac>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <vTaskSwitchContext+0xb0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e010      	b.n	8003b9a <vTaskSwitchContext+0x46>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <vTaskSwitchContext+0x40>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	607b      	str	r3, [r7, #4]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <vTaskSwitchContext+0x3e>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	491b      	ldr	r1, [pc, #108]	; (8003c08 <vTaskSwitchContext+0xb4>)
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0e4      	beq.n	8003b78 <vTaskSwitchContext+0x24>
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <vTaskSwitchContext+0xb4>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	3308      	adds	r3, #8
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d104      	bne.n	8003bde <vTaskSwitchContext+0x8a>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <vTaskSwitchContext+0xb8>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4a06      	ldr	r2, [pc, #24]	; (8003c04 <vTaskSwitchContext+0xb0>)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6013      	str	r3, [r2, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	200048a0 	.word	0x200048a0
 8003c00:	2000488c 	.word	0x2000488c
 8003c04:	20004880 	.word	0x20004880
 8003c08:	200043a8 	.word	0x200043a8
 8003c0c:	200043a4 	.word	0x200043a4

08003c10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	60fb      	str	r3, [r7, #12]
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <vTaskPlaceOnEventList+0x44>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3318      	adds	r3, #24
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe fc35 	bl	80024ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c44:	2101      	movs	r1, #1
 8003c46:	6838      	ldr	r0, [r7, #0]
 8003c48:	f000 fa7c 	bl	8004144 <prvAddCurrentTaskToDelayedList>
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	200043a4 	.word	0x200043a4

08003c58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	617b      	str	r3, [r7, #20]
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <vTaskPlaceOnEventListRestricted+0x54>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3318      	adds	r3, #24
 8003c86:	4619      	mov	r1, r3
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7fe fbec 	bl	8002466 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
 8003c98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	68b8      	ldr	r0, [r7, #8]
 8003c9e:	f000 fa51 	bl	8004144 <prvAddCurrentTaskToDelayedList>
	}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200043a4 	.word	0x200043a4

08003cb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	60fb      	str	r3, [r7, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	3318      	adds	r3, #24
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe fc1d 	bl	8002520 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <xTaskRemoveFromEventList+0xb0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11d      	bne.n	8003d2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fc14 	bl	8002520 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <xTaskRemoveFromEventList+0xb4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d903      	bls.n	8003d0c <xTaskRemoveFromEventList+0x5c>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <xTaskRemoveFromEventList+0xb4>)
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <xTaskRemoveFromEventList+0xb8>)
 8003d1a:	441a      	add	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f7fe fb9f 	bl	8002466 <vListInsertEnd>
 8003d28:	e005      	b.n	8003d36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3318      	adds	r3, #24
 8003d2e:	4619      	mov	r1, r3
 8003d30:	480e      	ldr	r0, [pc, #56]	; (8003d6c <xTaskRemoveFromEventList+0xbc>)
 8003d32:	f7fe fb98 	bl	8002466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <xTaskRemoveFromEventList+0xc0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d905      	bls.n	8003d50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <xTaskRemoveFromEventList+0xc4>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e001      	b.n	8003d54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d54:	697b      	ldr	r3, [r7, #20]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200048a0 	.word	0x200048a0
 8003d64:	20004880 	.word	0x20004880
 8003d68:	200043a8 	.word	0x200043a8
 8003d6c:	20004838 	.word	0x20004838
 8003d70:	200043a4 	.word	0x200043a4
 8003d74:	2000488c 	.word	0x2000488c

08003d78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <vTaskInternalSetTimeOutState+0x24>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <vTaskInternalSetTimeOutState+0x28>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	605a      	str	r2, [r3, #4]
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	20004890 	.word	0x20004890
 8003da0:	2000487c 	.word	0x2000487c

08003da4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	613b      	str	r3, [r7, #16]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	60fb      	str	r3, [r7, #12]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003de6:	f7fe fcf5 	bl	80027d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <xTaskCheckForTimeOut+0xbc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d102      	bne.n	8003e0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e023      	b.n	8003e52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <xTaskCheckForTimeOut+0xc0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d007      	beq.n	8003e26 <xTaskCheckForTimeOut+0x82>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d302      	bcc.n	8003e26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e015      	b.n	8003e52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d20b      	bcs.n	8003e48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff9b 	bl	8003d78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	e004      	b.n	8003e52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e52:	f7fe fcef 	bl	8002834 <vPortExitCritical>

	return xReturn;
 8003e56:	69fb      	ldr	r3, [r7, #28]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	2000487c 	.word	0x2000487c
 8003e64:	20004890 	.word	0x20004890

08003e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <vTaskMissedYield+0x14>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	2000488c 	.word	0x2000488c

08003e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e88:	f000 f852 	bl	8003f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <prvIdleTask+0x28>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d9f9      	bls.n	8003e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <prvIdleTask+0x2c>)
 8003e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ea4:	e7f0      	b.n	8003e88 <prvIdleTask+0x8>
 8003ea6:	bf00      	nop
 8003ea8:	200043a8 	.word	0x200043a8
 8003eac:	e000ed04 	.word	0xe000ed04

08003eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	e00c      	b.n	8003ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <prvInitialiseTaskLists+0x60>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fa9e 	bl	800240c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b37      	cmp	r3, #55	; 0x37
 8003eda:	d9ef      	bls.n	8003ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003edc:	480d      	ldr	r0, [pc, #52]	; (8003f14 <prvInitialiseTaskLists+0x64>)
 8003ede:	f7fe fa95 	bl	800240c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ee2:	480d      	ldr	r0, [pc, #52]	; (8003f18 <prvInitialiseTaskLists+0x68>)
 8003ee4:	f7fe fa92 	bl	800240c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ee8:	480c      	ldr	r0, [pc, #48]	; (8003f1c <prvInitialiseTaskLists+0x6c>)
 8003eea:	f7fe fa8f 	bl	800240c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eee:	480c      	ldr	r0, [pc, #48]	; (8003f20 <prvInitialiseTaskLists+0x70>)
 8003ef0:	f7fe fa8c 	bl	800240c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ef4:	480b      	ldr	r0, [pc, #44]	; (8003f24 <prvInitialiseTaskLists+0x74>)
 8003ef6:	f7fe fa89 	bl	800240c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <prvInitialiseTaskLists+0x78>)
 8003efc:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <prvInitialiseTaskLists+0x64>)
 8003efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <prvInitialiseTaskLists+0x7c>)
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <prvInitialiseTaskLists+0x68>)
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200043a8 	.word	0x200043a8
 8003f14:	20004808 	.word	0x20004808
 8003f18:	2000481c 	.word	0x2000481c
 8003f1c:	20004838 	.word	0x20004838
 8003f20:	2000484c 	.word	0x2000484c
 8003f24:	20004864 	.word	0x20004864
 8003f28:	20004830 	.word	0x20004830
 8003f2c:	20004834 	.word	0x20004834

08003f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f36:	e019      	b.n	8003f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f38:	f7fe fc4c 	bl	80027d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <prvCheckTasksWaitingTermination+0x50>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe fae9 	bl	8002520 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <prvCheckTasksWaitingTermination+0x54>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <prvCheckTasksWaitingTermination+0x54>)
 8003f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <prvCheckTasksWaitingTermination+0x58>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <prvCheckTasksWaitingTermination+0x58>)
 8003f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f62:	f7fe fc67 	bl	8002834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f810 	bl	8003f8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <prvCheckTasksWaitingTermination+0x58>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e1      	bne.n	8003f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	2000484c 	.word	0x2000484c
 8003f84:	20004878 	.word	0x20004878
 8003f88:	20004860 	.word	0x20004860

08003f8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d108      	bne.n	8003fb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe f914 	bl	80021d0 <vPortFree>
				vPortFree( pxTCB );
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fe f911 	bl	80021d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fae:	e018      	b.n	8003fe2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d103      	bne.n	8003fc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fe f908 	bl	80021d0 <vPortFree>
	}
 8003fc0:	e00f      	b.n	8003fe2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d00a      	beq.n	8003fe2 <prvDeleteTCB+0x56>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60fb      	str	r3, [r7, #12]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <prvDeleteTCB+0x54>
	}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <prvResetNextTaskUnblockTime+0x38>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d104      	bne.n	8004006 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <prvResetNextTaskUnblockTime+0x3c>)
 8003ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8004002:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004004:	e008      	b.n	8004018 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004006:	4b07      	ldr	r3, [pc, #28]	; (8004024 <prvResetNextTaskUnblockTime+0x38>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <prvResetNextTaskUnblockTime+0x3c>)
 8004016:	6013      	str	r3, [r2, #0]
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	20004830 	.word	0x20004830
 8004028:	20004898 	.word	0x20004898

0800402c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <xTaskGetSchedulerState+0x34>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800403a:	2301      	movs	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	e008      	b.n	8004052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <xTaskGetSchedulerState+0x38>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004048:	2302      	movs	r3, #2
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	e001      	b.n	8004052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004052:	687b      	ldr	r3, [r7, #4]
	}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	20004884 	.word	0x20004884
 8004064:	200048a0 	.word	0x200048a0

08004068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d056      	beq.n	800412c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800407e:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <xTaskPriorityDisinherit+0xd0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	429a      	cmp	r2, r3
 8004086:	d00a      	beq.n	800409e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	60fb      	str	r3, [r7, #12]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60bb      	str	r3, [r7, #8]
}
 80040b8:	bf00      	nop
 80040ba:	e7fe      	b.n	80040ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	1e5a      	subs	r2, r3, #1
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d02c      	beq.n	800412c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d128      	bne.n	800412c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3304      	adds	r3, #4
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fa1e 	bl	8002520 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	4b0f      	ldr	r3, [pc, #60]	; (800413c <xTaskPriorityDisinherit+0xd4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d903      	bls.n	800410c <xTaskPriorityDisinherit+0xa4>
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4a0c      	ldr	r2, [pc, #48]	; (800413c <xTaskPriorityDisinherit+0xd4>)
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4a09      	ldr	r2, [pc, #36]	; (8004140 <xTaskPriorityDisinherit+0xd8>)
 800411a:	441a      	add	r2, r3
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f7fe f99f 	bl	8002466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800412c:	697b      	ldr	r3, [r7, #20]
	}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	200043a4 	.word	0x200043a4
 800413c:	20004880 	.word	0x20004880
 8004140:	200043a8 	.word	0x200043a8

08004144 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004154:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3304      	adds	r3, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe f9e0 	bl	8002520 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d10a      	bne.n	800417e <prvAddCurrentTaskToDelayedList+0x3a>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4819      	ldr	r0, [pc, #100]	; (80041dc <prvAddCurrentTaskToDelayedList+0x98>)
 8004178:	f7fe f975 	bl	8002466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800417c:	e026      	b.n	80041cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	429a      	cmp	r2, r3
 8004194:	d209      	bcs.n	80041aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f7fe f983 	bl	80024ae <vListInsert>
}
 80041a8:	e010      	b.n	80041cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7fe f979 	bl	80024ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d202      	bcs.n	80041cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6013      	str	r3, [r2, #0]
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	2000487c 	.word	0x2000487c
 80041d8:	200043a4 	.word	0x200043a4
 80041dc:	20004864 	.word	0x20004864
 80041e0:	20004834 	.word	0x20004834
 80041e4:	20004830 	.word	0x20004830
 80041e8:	20004898 	.word	0x20004898

080041ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041f6:	f000 fb07 	bl	8004808 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041fa:	4b1c      	ldr	r3, [pc, #112]	; (800426c <xTimerCreateTimerTask+0x80>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d021      	beq.n	8004246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800420a:	1d3a      	adds	r2, r7, #4
 800420c:	f107 0108 	add.w	r1, r7, #8
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd fef5 	bl	8002004 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	9202      	str	r2, [sp, #8]
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2302      	movs	r3, #2
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2300      	movs	r3, #0
 800422a:	460a      	mov	r2, r1
 800422c:	4910      	ldr	r1, [pc, #64]	; (8004270 <xTimerCreateTimerTask+0x84>)
 800422e:	4811      	ldr	r0, [pc, #68]	; (8004274 <xTimerCreateTimerTask+0x88>)
 8004230:	f7ff f8de 	bl	80033f0 <xTaskCreateStatic>
 8004234:	4603      	mov	r3, r0
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <xTimerCreateTimerTask+0x8c>)
 8004238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <xTimerCreateTimerTask+0x8c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004242:	2301      	movs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	613b      	str	r3, [r7, #16]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	200048d4 	.word	0x200048d4
 8004270:	0800492c 	.word	0x0800492c
 8004274:	080043b1 	.word	0x080043b1
 8004278:	200048d8 	.word	0x200048d8

0800427c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800428a:	2300      	movs	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	623b      	str	r3, [r7, #32]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80042aa:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <xTimerGenericCommand+0x98>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02a      	beq.n	8004308 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b05      	cmp	r3, #5
 80042c2:	dc18      	bgt.n	80042f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042c4:	f7ff feb2 	bl	800402c <xTaskGetSchedulerState>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d109      	bne.n	80042e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <xTimerGenericCommand+0x98>)
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	f107 0110 	add.w	r1, r7, #16
 80042d6:	2300      	movs	r3, #0
 80042d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042da:	f7fe fca1 	bl	8002c20 <xQueueGenericSend>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24
 80042e0:	e012      	b.n	8004308 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <xTimerGenericCommand+0x98>)
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	f107 0110 	add.w	r1, r7, #16
 80042ea:	2300      	movs	r3, #0
 80042ec:	2200      	movs	r2, #0
 80042ee:	f7fe fc97 	bl	8002c20 <xQueueGenericSend>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24
 80042f4:	e008      	b.n	8004308 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <xTimerGenericCommand+0x98>)
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	f107 0110 	add.w	r1, r7, #16
 80042fe:	2300      	movs	r3, #0
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	f7fe fd8b 	bl	8002e1c <xQueueGenericSendFromISR>
 8004306:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800430a:	4618      	mov	r0, r3
 800430c:	3728      	adds	r7, #40	; 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200048d4 	.word	0x200048d4

08004318 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004322:	4b22      	ldr	r3, [pc, #136]	; (80043ac <prvProcessExpiredTimer+0x94>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3304      	adds	r3, #4
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe f8f5 	bl	8002520 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d022      	beq.n	800438a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	18d1      	adds	r1, r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	6978      	ldr	r0, [r7, #20]
 8004352:	f000 f8d1 	bl	80044f8 <prvInsertTimerInActiveList>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01f      	beq.n	800439c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800435c:	2300      	movs	r3, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	2300      	movs	r3, #0
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	2100      	movs	r1, #0
 8004366:	6978      	ldr	r0, [r7, #20]
 8004368:	f7ff ff88 	bl	800427c <xTimerGenericCommand>
 800436c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d113      	bne.n	800439c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60fb      	str	r3, [r7, #12]
}
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	b2da      	uxtb	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	6978      	ldr	r0, [r7, #20]
 80043a2:	4798      	blx	r3
}
 80043a4:	bf00      	nop
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	200048cc 	.word	0x200048cc

080043b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f857 	bl	8004470 <prvGetNextExpireTime>
 80043c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4619      	mov	r1, r3
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f803 	bl	80043d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043ce:	f000 f8d5 	bl	800457c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043d2:	e7f1      	b.n	80043b8 <prvTimerTask+0x8>

080043d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043de:	f7ff fa43 	bl	8003868 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043e2:	f107 0308 	add.w	r3, r7, #8
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f866 	bl	80044b8 <prvSampleTimeNow>
 80043ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d130      	bne.n	8004456 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <prvProcessTimerOrBlockTask+0x3c>
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d806      	bhi.n	8004410 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004402:	f7ff fa3f 	bl	8003884 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004406:	68f9      	ldr	r1, [r7, #12]
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff85 	bl	8004318 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800440e:	e024      	b.n	800445a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <prvProcessTimerOrBlockTask+0x90>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <prvProcessTimerOrBlockTask+0x50>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <prvProcessTimerOrBlockTask+0x52>
 8004424:	2300      	movs	r3, #0
 8004426:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <prvProcessTimerOrBlockTask+0x94>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	4619      	mov	r1, r3
 8004436:	f7fe ffa7 	bl	8003388 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800443a:	f7ff fa23 	bl	8003884 <xTaskResumeAll>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004444:	4b09      	ldr	r3, [pc, #36]	; (800446c <prvProcessTimerOrBlockTask+0x98>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
}
 8004454:	e001      	b.n	800445a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004456:	f7ff fa15 	bl	8003884 <xTaskResumeAll>
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200048d0 	.word	0x200048d0
 8004468:	200048d4 	.word	0x200048d4
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004478:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <prvGetNextExpireTime+0x44>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <prvGetNextExpireTime+0x16>
 8004482:	2201      	movs	r2, #1
 8004484:	e000      	b.n	8004488 <prvGetNextExpireTime+0x18>
 8004486:	2200      	movs	r2, #0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <prvGetNextExpireTime+0x44>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	e001      	b.n	80044a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80044a4:	68fb      	ldr	r3, [r7, #12]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	200048cc 	.word	0x200048cc

080044b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80044c0:	f7ff fa7e 	bl	80039c0 <xTaskGetTickCount>
 80044c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <prvSampleTimeNow+0x3c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d205      	bcs.n	80044dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044d0:	f000 f936 	bl	8004740 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e002      	b.n	80044e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044e2:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <prvSampleTimeNow+0x3c>)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044e8:	68fb      	ldr	r3, [r7, #12]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	200048dc 	.word	0x200048dc

080044f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d812      	bhi.n	8004544 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	1ad2      	subs	r2, r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	429a      	cmp	r2, r3
 800452a:	d302      	bcc.n	8004532 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800452c:	2301      	movs	r3, #1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e01b      	b.n	800456a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <prvInsertTimerInActiveList+0x7c>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f7fd ffb6 	bl	80024ae <vListInsert>
 8004542:	e012      	b.n	800456a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d206      	bcs.n	800455a <prvInsertTimerInActiveList+0x62>
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	e007      	b.n	800456a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800455a:	4b07      	ldr	r3, [pc, #28]	; (8004578 <prvInsertTimerInActiveList+0x80>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fd ffa2 	bl	80024ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800456a:	697b      	ldr	r3, [r7, #20]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200048d0 	.word	0x200048d0
 8004578:	200048cc 	.word	0x200048cc

0800457c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	; 0x38
 8004580:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004582:	e0ca      	b.n	800471a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	da18      	bge.n	80045bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	3304      	adds	r3, #4
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	61fb      	str	r3, [r7, #28]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b2:	6850      	ldr	r0, [r2, #4]
 80045b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b6:	6892      	ldr	r2, [r2, #8]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f2c0 80aa 	blt.w	8004718 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd ffa3 	bl	8002520 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045da:	463b      	mov	r3, r7
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff6b 	bl	80044b8 <prvSampleTimeNow>
 80045e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b09      	cmp	r3, #9
 80045e8:	f200 8097 	bhi.w	800471a <prvProcessReceivedCommands+0x19e>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <prvProcessReceivedCommands+0x78>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	0800461d 	.word	0x0800461d
 8004600:	08004691 	.word	0x08004691
 8004604:	080046a5 	.word	0x080046a5
 8004608:	080046ef 	.word	0x080046ef
 800460c:	0800461d 	.word	0x0800461d
 8004610:	0800461d 	.word	0x0800461d
 8004614:	08004691 	.word	0x08004691
 8004618:	080046a5 	.word	0x080046a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	b2da      	uxtb	r2, r3
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	18d1      	adds	r1, r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463c:	f7ff ff5c 	bl	80044f8 <prvInsertTimerInActiveList>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d069      	beq.n	800471a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05e      	beq.n	800471a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	441a      	add	r2, r3
 8004664:	2300      	movs	r3, #0
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2300      	movs	r3, #0
 800466a:	2100      	movs	r1, #0
 800466c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800466e:	f7ff fe05 	bl	800427c <xTimerGenericCommand>
 8004672:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d14f      	bne.n	800471a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	61bb      	str	r3, [r7, #24]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80046a2:	e03a      	b.n	800471a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	617b      	str	r3, [r7, #20]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	18d1      	adds	r1, r2, r3
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e8:	f7ff ff06 	bl	80044f8 <prvInsertTimerInActiveList>
					break;
 80046ec:	e015      	b.n	800471a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80046fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fe:	f7fd fd67 	bl	80021d0 <vPortFree>
 8004702:	e00a      	b.n	800471a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	b2da      	uxtb	r2, r3
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004716:	e000      	b.n	800471a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004718:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <prvProcessReceivedCommands+0x1c0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	1d39      	adds	r1, r7, #4
 8004720:	2200      	movs	r2, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fc16 	bl	8002f54 <xQueueReceive>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	f47f af2a 	bne.w	8004584 <prvProcessReceivedCommands+0x8>
	}
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3730      	adds	r7, #48	; 0x30
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200048d4 	.word	0x200048d4

08004740 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004746:	e048      	b.n	80047da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004748:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <prvSwitchTimerLists+0xc0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004752:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <prvSwitchTimerLists+0xc0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd fedd 	bl	8002520 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02e      	beq.n	80047da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d90e      	bls.n	80047ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800479a:	4b19      	ldr	r3, [pc, #100]	; (8004800 <prvSwitchTimerLists+0xc0>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fd fe82 	bl	80024ae <vListInsert>
 80047aa:	e016      	b.n	80047da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047ac:	2300      	movs	r3, #0
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2300      	movs	r3, #0
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	2100      	movs	r1, #0
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff fd60 	bl	800427c <xTimerGenericCommand>
 80047bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	603b      	str	r3, [r7, #0]
}
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <prvSwitchTimerLists+0xc0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1b1      	bne.n	8004748 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <prvSwitchTimerLists+0xc0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <prvSwitchTimerLists+0xc4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a04      	ldr	r2, [pc, #16]	; (8004800 <prvSwitchTimerLists+0xc0>)
 80047f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80047f2:	4a04      	ldr	r2, [pc, #16]	; (8004804 <prvSwitchTimerLists+0xc4>)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	200048cc 	.word	0x200048cc
 8004804:	200048d0 	.word	0x200048d0

08004808 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800480e:	f7fd ffe1 	bl	80027d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <prvCheckForValidListAndQueue+0x60>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d120      	bne.n	800485c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800481a:	4814      	ldr	r0, [pc, #80]	; (800486c <prvCheckForValidListAndQueue+0x64>)
 800481c:	f7fd fdf6 	bl	800240c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004820:	4813      	ldr	r0, [pc, #76]	; (8004870 <prvCheckForValidListAndQueue+0x68>)
 8004822:	f7fd fdf3 	bl	800240c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <prvCheckForValidListAndQueue+0x6c>)
 8004828:	4a10      	ldr	r2, [pc, #64]	; (800486c <prvCheckForValidListAndQueue+0x64>)
 800482a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <prvCheckForValidListAndQueue+0x70>)
 800482e:	4a10      	ldr	r2, [pc, #64]	; (8004870 <prvCheckForValidListAndQueue+0x68>)
 8004830:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004832:	2300      	movs	r3, #0
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	4b11      	ldr	r3, [pc, #68]	; (800487c <prvCheckForValidListAndQueue+0x74>)
 8004838:	4a11      	ldr	r2, [pc, #68]	; (8004880 <prvCheckForValidListAndQueue+0x78>)
 800483a:	2110      	movs	r1, #16
 800483c:	200a      	movs	r0, #10
 800483e:	f7fe f953 	bl	8002ae8 <xQueueGenericCreateStatic>
 8004842:	4603      	mov	r3, r0
 8004844:	4a08      	ldr	r2, [pc, #32]	; (8004868 <prvCheckForValidListAndQueue+0x60>)
 8004846:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <prvCheckForValidListAndQueue+0x60>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <prvCheckForValidListAndQueue+0x60>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	490b      	ldr	r1, [pc, #44]	; (8004884 <prvCheckForValidListAndQueue+0x7c>)
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe fd6c 	bl	8003334 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800485c:	f7fd ffea 	bl	8002834 <vPortExitCritical>
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200048d4 	.word	0x200048d4
 800486c:	200048a4 	.word	0x200048a4
 8004870:	200048b8 	.word	0x200048b8
 8004874:	200048cc 	.word	0x200048cc
 8004878:	200048d0 	.word	0x200048d0
 800487c:	20004980 	.word	0x20004980
 8004880:	200048e0 	.word	0x200048e0
 8004884:	08004934 	.word	0x08004934

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4d0d      	ldr	r5, [pc, #52]	; (80048c0 <__libc_init_array+0x38>)
 800488c:	4c0d      	ldr	r4, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 800488e:	1b64      	subs	r4, r4, r5
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	2600      	movs	r6, #0
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	4d0b      	ldr	r5, [pc, #44]	; (80048c8 <__libc_init_array+0x40>)
 800489a:	4c0c      	ldr	r4, [pc, #48]	; (80048cc <__libc_init_array+0x44>)
 800489c:	f000 f82e 	bl	80048fc <_init>
 80048a0:	1b64      	subs	r4, r4, r5
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	2600      	movs	r6, #0
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	080049a4 	.word	0x080049a4
 80048c4:	080049a4 	.word	0x080049a4
 80048c8:	080049a4 	.word	0x080049a4
 80048cc:	080049a8 	.word	0x080049a8

080048d0 <memcpy>:
 80048d0:	440a      	add	r2, r1
 80048d2:	4291      	cmp	r1, r2
 80048d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048d8:	d100      	bne.n	80048dc <memcpy+0xc>
 80048da:	4770      	bx	lr
 80048dc:	b510      	push	{r4, lr}
 80048de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048e6:	4291      	cmp	r1, r2
 80048e8:	d1f9      	bne.n	80048de <memcpy+0xe>
 80048ea:	bd10      	pop	{r4, pc}

080048ec <memset>:
 80048ec:	4402      	add	r2, r0
 80048ee:	4603      	mov	r3, r0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d100      	bne.n	80048f6 <memset+0xa>
 80048f4:	4770      	bx	lr
 80048f6:	f803 1b01 	strb.w	r1, [r3], #1
 80048fa:	e7f9      	b.n	80048f0 <memset+0x4>

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
