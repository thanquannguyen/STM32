
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d20  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006ecc  08006ecc  00016ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f24  08006f24  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f24  08006f24  00016f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f2c  08006f2c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c2c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20001d28  20001d28  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddb3  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002851  00000000  00000000  0002dedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  00030730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a10  00000000  00000000  00031278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025311  00000000  00000000  00031c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edec  00000000  00000000  00056f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d9f  00000000  00000000  00065d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138b24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ca4  00000000  00000000  00138b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006eb4 	.word	0x08006eb4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000100 	.word	0x20000100
 80001e8:	08006eb4 	.word	0x08006eb4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 f938 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f806 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f86e 	bl	80005dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000500:	f005 ff8a 	bl	8006418 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x14>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f006 fcc4 	bl	8006ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f001 febc 	bl	800230c <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f847 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 f91d 	bl	80027fc <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f830 	bl	800062c <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_GPIO_Init+0x4c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <MX_GPIO_Init+0x4c>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_GPIO_Init+0x4c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_GPIO_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <MX_GPIO_Init+0x4c>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_GPIO_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <HAL_MspInit+0x4c>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <HAL_MspInit+0x4c>)
 8000648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064c:	6453      	str	r3, [r2, #68]	; 0x44
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <HAL_MspInit+0x4c>)
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_MspInit+0x4c>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_MspInit+0x4c>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_MspInit+0x4c>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f89a 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <OTG_HS_IRQHandler+0x10>)
 80006e2:	f000 fce5 	bl	80010b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200015fc 	.word	0x200015fc

080006f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SystemInit+0x20>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <SystemInit+0x20>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800071a:	490e      	ldr	r1, [pc, #56]	; (8000754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000730:	4c0b      	ldr	r4, [pc, #44]	; (8000760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800073e:	f7ff ffd7 	bl	80006f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f006 fb8b 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000746:	f7ff fed3 	bl	80004f0 <main>
  bx  lr    
 800074a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800074c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000758:	08006f34 	.word	0x08006f34
  ldr r2, =_sbss
 800075c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000760:	20001d28 	.word	0x20001d28

08000764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC_IRQHandler>
	...

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <HAL_Init+0x40>)
 8000772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_Init+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_Init+0x40>)
 800077e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x40>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x40>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f94f 	bl	8000a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff ff4c 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023c00 	.word	0x40023c00

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f967 	bl	8000a9e <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f92f 	bl	8000a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008
 8000830:	20000118 	.word	0x20000118

08000834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000118 	.word	0x20000118

0800084c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff ffee 	bl	8000834 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_Delay+0x44>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffde 	bl	8000834 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db0b      	blt.n	8000922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <__NVIC_EnableIRQ+0x38>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	2001      	movs	r0, #1
 800091a:	fa00 f202 	lsl.w	r2, r0, r2
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a00:	d301      	bcc.n	8000a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00f      	b.n	8000a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <SysTick_Config+0x40>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0e:	210f      	movs	r1, #15
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f7ff ff8e 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SysTick_Config+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SysTick_Config+0x40>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff29 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5c:	f7ff ff3e 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff ff8e 	bl	8000988 <NVIC_EncodePriority>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <__NVIC_SetPriority>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <__NVIC_EnableIRQ>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffa2 	bl	80009f0 <SysTick_Config>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
 8000ad2:	e177      	b.n	8000dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	f040 8166 	bne.w	8000dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d005      	beq.n	8000b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d130      	bne.n	8000b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	091b      	lsrs	r3, r3, #4
 8000b56:	f003 0201 	and.w	r2, r3, #1
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d017      	beq.n	8000ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d123      	bne.n	8000bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	08da      	lsrs	r2, r3, #3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	220f      	movs	r2, #15
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	08da      	lsrs	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3208      	adds	r2, #8
 8000bf6:	69b9      	ldr	r1, [r7, #24]
 8000bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0203 	and.w	r2, r3, #3
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 80c0 	beq.w	8000dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b66      	ldr	r3, [pc, #408]	; (8000ddc <HAL_GPIO_Init+0x324>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <HAL_GPIO_Init+0x324>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b63      	ldr	r3, [pc, #396]	; (8000ddc <HAL_GPIO_Init+0x324>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c5a:	4a61      	ldr	r2, [pc, #388]	; (8000de0 <HAL_GPIO_Init+0x328>)
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a58      	ldr	r2, [pc, #352]	; (8000de4 <HAL_GPIO_Init+0x32c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d037      	beq.n	8000cf6 <HAL_GPIO_Init+0x23e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a57      	ldr	r2, [pc, #348]	; (8000de8 <HAL_GPIO_Init+0x330>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d031      	beq.n	8000cf2 <HAL_GPIO_Init+0x23a>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a56      	ldr	r2, [pc, #344]	; (8000dec <HAL_GPIO_Init+0x334>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d02b      	beq.n	8000cee <HAL_GPIO_Init+0x236>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a55      	ldr	r2, [pc, #340]	; (8000df0 <HAL_GPIO_Init+0x338>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d025      	beq.n	8000cea <HAL_GPIO_Init+0x232>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a54      	ldr	r2, [pc, #336]	; (8000df4 <HAL_GPIO_Init+0x33c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d01f      	beq.n	8000ce6 <HAL_GPIO_Init+0x22e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a53      	ldr	r2, [pc, #332]	; (8000df8 <HAL_GPIO_Init+0x340>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d019      	beq.n	8000ce2 <HAL_GPIO_Init+0x22a>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a52      	ldr	r2, [pc, #328]	; (8000dfc <HAL_GPIO_Init+0x344>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d013      	beq.n	8000cde <HAL_GPIO_Init+0x226>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a51      	ldr	r2, [pc, #324]	; (8000e00 <HAL_GPIO_Init+0x348>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d00d      	beq.n	8000cda <HAL_GPIO_Init+0x222>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a50      	ldr	r2, [pc, #320]	; (8000e04 <HAL_GPIO_Init+0x34c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d007      	beq.n	8000cd6 <HAL_GPIO_Init+0x21e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4f      	ldr	r2, [pc, #316]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_GPIO_Init+0x21a>
 8000cce:	2309      	movs	r3, #9
 8000cd0:	e012      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	e010      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	e00e      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000cda:	2307      	movs	r3, #7
 8000cdc:	e00c      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000cde:	2306      	movs	r3, #6
 8000ce0:	e00a      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	e008      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000cea:	2303      	movs	r3, #3
 8000cec:	e004      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e002      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_Init+0x240>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	f002 0203 	and.w	r2, r2, #3
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	4093      	lsls	r3, r2
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d08:	4935      	ldr	r1, [pc, #212]	; (8000de0 <HAL_GPIO_Init+0x328>)
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d16:	4b3d      	ldr	r3, [pc, #244]	; (8000e0c <HAL_GPIO_Init+0x354>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d3a:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <HAL_GPIO_Init+0x354>)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <HAL_GPIO_Init+0x354>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d64:	4a29      	ldr	r2, [pc, #164]	; (8000e0c <HAL_GPIO_Init+0x354>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_GPIO_Init+0x354>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_GPIO_Init+0x354>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_GPIO_Init+0x354>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_GPIO_Init+0x354>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	f67f ae84 	bls.w	8000ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40013800 	.word	0x40013800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40021400 	.word	0x40021400
 8000dfc:	40021800 	.word	0x40021800
 8000e00:	40021c00 	.word	0x40021c00
 8000e04:	40022000 	.word	0x40022000
 8000e08:	40022400 	.word	0x40022400
 8000e0c:	40013c00 	.word	0x40013c00

08000e10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	b08f      	sub	sp, #60	; 0x3c
 8000e14:	af0a      	add	r7, sp, #40	; 0x28
 8000e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e10f      	b.n	8001042 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d106      	bne.n	8000e42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f005 fcf7 	bl	8006830 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 ffd8 	bl	8002e16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	687e      	ldr	r6, [r7, #4]
 8000e6e:	466d      	mov	r5, sp
 8000e70:	f106 0410 	add.w	r4, r6, #16
 8000e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e80:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e84:	1d33      	adds	r3, r6, #4
 8000e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	f001 feaf 	bl	8002bec <USB_CoreInit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2202      	movs	r2, #2
 8000e98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e0d0      	b.n	8001042 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 ffc6 	bl	8002e38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e04a      	b.n	8000f48 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	333d      	adds	r3, #61	; 0x3d
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	333c      	adds	r3, #60	; 0x3c
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	b298      	uxth	r0, r3
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	3344      	adds	r3, #68	; 0x44
 8000eee:	4602      	mov	r2, r0
 8000ef0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	3340      	adds	r3, #64	; 0x40
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	3348      	adds	r3, #72	; 0x48
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	334c      	adds	r3, #76	; 0x4c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3354      	adds	r3, #84	; 0x54
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	3301      	adds	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d3af      	bcc.n	8000eb2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e044      	b.n	8000fe2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f80:	7bfa      	ldrb	r2, [r7, #15]
 8000f82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3b5      	bcc.n	8000f58 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	687e      	ldr	r6, [r7, #4]
 8000ff4:	466d      	mov	r5, sp
 8000ff6:	f106 0410 	add.w	r4, r6, #16
 8000ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001002:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001006:	e885 0003 	stmia.w	r5, {r0, r1}
 800100a:	1d33      	adds	r3, r6, #4
 800100c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f001 ff5e 	bl	8002ed0 <USB_DevInit>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2202      	movs	r2, #2
 800101e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00d      	b.n	8001042 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f003 f8ad 	bl	800419a <USB_DevDisconnect>

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800104a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_PCD_Start+0x1c>
 8001062:	2302      	movs	r3, #2
 8001064:	e020      	b.n	80010a8 <HAL_PCD_Start+0x5e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	2b01      	cmp	r3, #1
 8001074:	d109      	bne.n	800108a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800107a:	2b01      	cmp	r3, #1
 800107c:	d005      	beq.n	800108a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001082:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f001 feb0 	bl	8002df4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f003 f85d 	bl	8004158 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b08d      	sub	sp, #52	; 0x34
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 f91b 	bl	8004302 <USB_GetMode>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f040 848a 	bne.w	80019e8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 f87f 	bl	80041dc <USB_ReadInterrupts>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 8480 	beq.w	80019e6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 f86c 	bl	80041dc <USB_ReadInterrupts>
 8001104:	4603      	mov	r3, r0
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b02      	cmp	r3, #2
 800110c:	d107      	bne.n	800111e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f002 0202 	and.w	r2, r2, #2
 800111c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f85a 	bl	80041dc <USB_ReadInterrupts>
 8001128:	4603      	mov	r3, r0
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b10      	cmp	r3, #16
 8001130:	d161      	bne.n	80011f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0210 	bic.w	r2, r2, #16
 8001140:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f003 020f 	and.w	r2, r3, #15
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	3304      	adds	r3, #4
 8001160:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	0c5b      	lsrs	r3, r3, #17
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	2b02      	cmp	r3, #2
 800116c:	d124      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d035      	beq.n	80011e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001188:	b29b      	uxth	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	6a38      	ldr	r0, [r7, #32]
 800118e:	f002 fe91 	bl	8003eb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800119e:	441a      	add	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b0:	441a      	add	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	621a      	str	r2, [r3, #32]
 80011b6:	e016      	b.n	80011e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	0c5b      	lsrs	r3, r3, #17
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	d110      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80011ca:	2208      	movs	r2, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	6a38      	ldr	r0, [r7, #32]
 80011d0:	f002 fe70 	bl	8003eb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e0:	441a      	add	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	699a      	ldr	r2, [r3, #24]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0210 	orr.w	r2, r2, #16
 80011f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 ffee 	bl	80041dc <USB_ReadInterrupts>
 8001200:	4603      	mov	r3, r0
 8001202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001206:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800120a:	f040 80a7 	bne.w	800135c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fff3 	bl	8004202 <USB_ReadDevAllOutEpInterrupt>
 800121c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800121e:	e099      	b.n	8001354 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 808e 	beq.w	8001348 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f003 f817 	bl	800426a <USB_ReadDevOutEPInterrupt>
 800123c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00c      	beq.n	8001262 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	015a      	lsls	r2, r3, #5
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001254:	461a      	mov	r2, r3
 8001256:	2301      	movs	r3, #1
 8001258:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800125a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fec3 	bl	8001fe8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00c      	beq.n	8001286 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	4413      	add	r3, r2
 8001274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001278:	461a      	mov	r2, r3
 800127a:	2308      	movs	r3, #8
 800127c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800127e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 ff99 	bl	80021b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	015a      	lsls	r2, r3, #5
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	4413      	add	r3, r2
 8001298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800129c:	461a      	mov	r2, r3
 800129e:	2310      	movs	r3, #16
 80012a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d030      	beq.n	800130e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b4:	2b80      	cmp	r3, #128	; 0x80
 80012b6:	d109      	bne.n	80012cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	3304      	adds	r3, #4
 80012e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d108      	bne.n	80012fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2200      	movs	r2, #0
 80012ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f005 fb9c 	bl	8006a34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	015a      	lsls	r2, r3, #5
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	4413      	add	r3, r2
 8001304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001308:	461a      	mov	r2, r3
 800130a:	2302      	movs	r3, #2
 800130c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	f003 0320 	and.w	r3, r3, #32
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	015a      	lsls	r2, r3, #5
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001324:	461a      	mov	r2, r3
 8001326:	2320      	movs	r3, #32
 8001328:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d009      	beq.n	8001348 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	015a      	lsls	r2, r3, #5
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	4413      	add	r3, r2
 800133c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001340:	461a      	mov	r2, r3
 8001342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001346:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	3301      	adds	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	2b00      	cmp	r3, #0
 8001358:	f47f af62 	bne.w	8001220 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 ff3b 	bl	80041dc <USB_ReadInterrupts>
 8001366:	4603      	mov	r3, r0
 8001368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001370:	f040 80db 	bne.w	800152a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 ff5c 	bl	8004236 <USB_ReadDevAllInEpInterrupt>
 800137e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001384:	e0cd      	b.n	8001522 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80c2 	beq.w	8001516 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f002 ff82 	bl	80042a6 <USB_ReadDevInEPInterrupt>
 80013a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d057      	beq.n	800145e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	2201      	movs	r2, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69f9      	ldr	r1, [r7, #28]
 80013ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013ce:	4013      	ands	r3, r2
 80013d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013de:	461a      	mov	r2, r3
 80013e0:	2301      	movs	r3, #1
 80013e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d132      	bne.n	8001452 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	334c      	adds	r3, #76	; 0x4c
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4403      	add	r3, r0
 800140c:	3348      	adds	r3, #72	; 0x48
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4419      	add	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4403      	add	r3, r0
 8001420:	334c      	adds	r3, #76	; 0x4c
 8001422:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	2b00      	cmp	r3, #0
 8001428:	d113      	bne.n	8001452 <HAL_PCD_IRQHandler+0x3a2>
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3354      	adds	r3, #84	; 0x54
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d108      	bne.n	8001452 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800144a:	461a      	mov	r2, r3
 800144c:	2101      	movs	r1, #1
 800144e:	f002 ff89 	bl	8004364 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f005 fa66 	bl	800692a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001474:	461a      	mov	r2, r3
 8001476:	2308      	movs	r3, #8
 8001478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001490:	461a      	mov	r2, r3
 8001492:	2310      	movs	r3, #16
 8001494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	015a      	lsls	r2, r3, #5
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	4413      	add	r3, r2
 80014a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ac:	461a      	mov	r2, r3
 80014ae:	2340      	movs	r3, #64	; 0x40
 80014b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d023      	beq.n	8001504 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014be:	6a38      	ldr	r0, [r7, #32]
 80014c0:	f001 fe6a 	bl	8003198 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	3338      	adds	r3, #56	; 0x38
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d108      	bne.n	80014f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2200      	movs	r2, #0
 80014e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f005 fab3 	bl	8006a58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014fe:	461a      	mov	r2, r3
 8001500:	2302      	movs	r3, #2
 8001502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800150e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fcdb 	bl	8001ecc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	f47f af2e 	bne.w	8001386 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fe54 	bl	80041dc <USB_ReadInterrupts>
 8001534:	4603      	mov	r3, r0
 8001536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800153a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800153e:	d122      	bne.n	8001586 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fec3 	bl	80022f4 <HAL_PCDEx_LPM_Callback>
 800156e:	e002      	b.n	8001576 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f005 fa51 	bl	8006a18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fe26 	bl	80041dc <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159a:	d112      	bne.n	80015c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d102      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f005 fa0d 	bl	80069cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fe08 	bl	80041dc <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d6:	f040 80b7 	bne.w	8001748 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2110      	movs	r1, #16
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fdcf 	bl	8003198 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fe:	e046      	b.n	800168e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160c:	461a      	mov	r2, r3
 800160e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001612:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001624:	0151      	lsls	r1, r2, #5
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	440a      	add	r2, r1
 800162a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800162e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001632:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001640:	461a      	mov	r2, r3
 8001642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001646:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001658:	0151      	lsls	r1, r2, #5
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	440a      	add	r2, r1
 800165e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001666:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001678:	0151      	lsls	r1, r2, #5
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	440a      	add	r2, r1
 800167e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001686:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	3301      	adds	r3, #1
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001694:	429a      	cmp	r2, r3
 8001696:	d3b3      	bcc.n	8001600 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d016      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c4:	f043 030b 	orr.w	r3, r3, #11
 80016c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016da:	f043 030b 	orr.w	r3, r3, #11
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	e015      	b.n	800170e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001708:	f043 030b 	orr.w	r3, r3, #11
 800170c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001720:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001732:	461a      	mov	r2, r3
 8001734:	f002 fe16 	bl	8004364 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f002 fd45 	bl	80041dc <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800175c:	d124      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fddb 	bl	800431e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fd90 	bl	8003292 <USB_GetDevSpeed>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681c      	ldr	r4, [r3, #0]
 800177e:	f001 fa29 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8001782:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	4620      	mov	r0, r4
 800178e:	f001 fa8f 	bl	8002cb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f005 f8f1 	bl	800697a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fd15 	bl	80041dc <USB_ReadInterrupts>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d10a      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f005 f8ce 	bl	800695e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f002 0208 	and.w	r2, r2, #8
 80017d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fd00 	bl	80041dc <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b80      	cmp	r3, #128	; 0x80
 80017e4:	d122      	bne.n	800182c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017f2:	2301      	movs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	e014      	b.n	8001822 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fb27 	bl	8001e6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001828:	429a      	cmp	r2, r3
 800182a:	d3e5      	bcc.n	80017f8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fcd3 	bl	80041dc <USB_ReadInterrupts>
 8001836:	4603      	mov	r3, r0
 8001838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001840:	d13b      	bne.n	80018ba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001842:	2301      	movs	r3, #1
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	e02b      	b.n	80018a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	4413      	add	r3, r2
 8001850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3340      	adds	r3, #64	; 0x40
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d115      	bne.n	800189a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800186e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001870:	2b00      	cmp	r3, #0
 8001872:	da12      	bge.n	800189a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	333f      	adds	r3, #63	; 0x3f
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fae8 	bl	8001e6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	3301      	adds	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d3ce      	bcc.n	8001848 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fc8c 	bl	80041dc <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018ce:	d155      	bne.n	800197c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018d0:	2301      	movs	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e045      	b.n	8001962 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d12e      	bne.n	800195c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001900:	2b00      	cmp	r3, #0
 8001902:	da2b      	bge.n	800195c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001910:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001914:	429a      	cmp	r2, r3
 8001916:	d121      	bne.n	800195c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10a      	bne.n	800195c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001958:	6053      	str	r3, [r2, #4]
            break;
 800195a:	e007      	b.n	800196c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3301      	adds	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001968:	429a      	cmp	r2, r3
 800196a:	d3b4      	bcc.n	80018d6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800197a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fc2b 	bl	80041dc <USB_ReadInterrupts>
 8001986:	4603      	mov	r3, r0
 8001988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d10a      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f005 f872 	bl	8006a7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 fc15 	bl	80041dc <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d115      	bne.n	80019e8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f005 f862 	bl	8006a98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6859      	ldr	r1, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	e000      	b.n	80019e8 <HAL_PCD_IRQHandler+0x938>
      return;
 80019e6:	bf00      	nop
    }
  }
}
 80019e8:	3734      	adds	r7, #52	; 0x34
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd90      	pop	{r4, r7, pc}

080019ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_PCD_SetAddress+0x1a>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e013      	b.n	8001a30 <HAL_PCD_SetAddress+0x42>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fb73 	bl	800410c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	70fb      	strb	r3, [r7, #3]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	803b      	strh	r3, [r7, #0]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da0f      	bge.n	8001a7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 020f 	and.w	r2, r3, #15
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	3338      	adds	r3, #56	; 0x38
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	705a      	strb	r2, [r3, #1]
 8001a7c:	e00f      	b.n	8001a9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 020f 	and.w	r2, r3, #15
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	3304      	adds	r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001aaa:	883a      	ldrh	r2, [r7, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	78ba      	ldrb	r2, [r7, #2]
 8001ab4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	785b      	ldrb	r3, [r3, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ac8:	78bb      	ldrb	r3, [r7, #2]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d102      	bne.n	8001ad4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_PCD_EP_Open+0xaa>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e00e      	b.n	8001b00 <HAL_PCD_EP_Open+0xc8>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68f9      	ldr	r1, [r7, #12]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 fbf3 	bl	80032dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001afe:	7afb      	ldrb	r3, [r7, #11]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da0f      	bge.n	8001b3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	f003 020f 	and.w	r2, r3, #15
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	3338      	adds	r3, #56	; 0x38
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	3304      	adds	r3, #4
 8001b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	705a      	strb	r2, [r3, #1]
 8001b3a:	e00f      	b.n	8001b5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 020f 	and.w	r2, r3, #15
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	3304      	adds	r3, #4
 8001b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_PCD_EP_Close+0x6e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e00e      	b.n	8001b94 <HAL_PCD_EP_Close+0x8c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68f9      	ldr	r1, [r7, #12]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fc31 	bl	80033ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bac:	7afb      	ldrb	r3, [r7, #11]
 8001bae:	f003 020f 	and.w	r2, r3, #15
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bde:	7afb      	ldrb	r3, [r7, #11]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6979      	ldr	r1, [r7, #20]
 8001c10:	f001 ff10 	bl	8003a34 <USB_EP0StartXfer>
 8001c14:	e008      	b.n	8001c28 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	f001 fcbe 	bl	80035a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 020f 	and.w	r2, r3, #15
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001c54:	681b      	ldr	r3, [r3, #0]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	f003 020f 	and.w	r2, r3, #15
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3338      	adds	r3, #56	; 0x38
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	6979      	ldr	r1, [r7, #20]
 8001cd4:	f001 feae 	bl	8003a34 <USB_EP0StartXfer>
 8001cd8:	e008      	b.n	8001cec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6979      	ldr	r1, [r7, #20]
 8001ce8:	f001 fc5c 	bl	80035a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 020f 	and.w	r2, r3, #15
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d901      	bls.n	8001d14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e050      	b.n	8001db6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da0f      	bge.n	8001d3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 020f 	and.w	r2, r3, #15
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	3338      	adds	r3, #56	; 0x38
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	705a      	strb	r2, [r3, #1]
 8001d3a:	e00d      	b.n	8001d58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_PCD_EP_SetStall+0x82>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e01e      	b.n	8001db6 <HAL_PCD_EP_SetStall+0xc0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 f8ec 	bl	8003f64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	b2d9      	uxtb	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001da6:	461a      	mov	r2, r3
 8001da8:	f002 fadc 	bl	8004364 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d901      	bls.n	8001ddc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e042      	b.n	8001e62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da0f      	bge.n	8001e04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	f003 020f 	and.w	r2, r3, #15
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	3338      	adds	r3, #56	; 0x38
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	3304      	adds	r3, #4
 8001dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	705a      	strb	r2, [r3, #1]
 8001e02:	e00f      	b.n	8001e24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f003 020f 	and.w	r2, r3, #15
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_PCD_EP_ClrStall+0x86>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e00e      	b.n	8001e62 <HAL_PCD_EP_ClrStall+0xa4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 f8f4 	bl	8004040 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da0c      	bge.n	8001e98 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	3338      	adds	r3, #56	; 0x38
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e00c      	b.n	8001eb2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	3304      	adds	r3, #4
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 ff13 	bl	8003ce4 <USB_EPStopXfer>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	3338      	adds	r3, #56	; 0x38
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d901      	bls.n	8001f04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e06c      	b.n	8001fde <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	699a      	ldr	r2, [r3, #24]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d902      	bls.n	8001f20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	3303      	adds	r3, #3
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f28:	e02b      	b.n	8001f82 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d902      	bls.n	8001f46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3303      	adds	r3, #3
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6919      	ldr	r1, [r3, #16]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	4603      	mov	r3, r0
 8001f64:	6978      	ldr	r0, [r7, #20]
 8001f66:	f001 ff67 	bl	8003e38 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	441a      	add	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a1a      	ldr	r2, [r3, #32]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	441a      	add	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d809      	bhi.n	8001fac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d203      	bcs.n	8001fac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1be      	bne.n	8001f2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d811      	bhi.n	8001fdc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	6939      	ldr	r1, [r7, #16]
 8001fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fd8:	4013      	ands	r3, r2
 8001fda:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	333c      	adds	r3, #60	; 0x3c
 8002000:	3304      	adds	r3, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d17b      	bne.n	8002116 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	4a61      	ldr	r2, [pc, #388]	; (80021b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	f240 80b9 	bls.w	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80b3 	beq.w	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204a:	461a      	mov	r2, r3
 800204c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002050:	6093      	str	r3, [r2, #8]
 8002052:	e0a7      	b.n	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206a:	461a      	mov	r2, r3
 800206c:	2320      	movs	r3, #32
 800206e:	6093      	str	r3, [r2, #8]
 8002070:	e098      	b.n	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 8093 	bne.w	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4a4b      	ldr	r2, [pc, #300]	; (80021b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d90f      	bls.n	80020a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209c:	461a      	mov	r2, r3
 800209e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a2:	6093      	str	r3, [r2, #8]
 80020a4:	e07e      	b.n	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	3304      	adds	r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	0159      	lsls	r1, r3, #5
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	1ad2      	subs	r2, r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d114      	bne.n	8002108 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020f0:	461a      	mov	r2, r3
 80020f2:	2101      	movs	r1, #1
 80020f4:	f002 f936 	bl	8004364 <USB_EP0_OutStart>
 80020f8:	e006      	b.n	8002108 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	441a      	add	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f004 fbf0 	bl	80068f4 <HAL_PCD_DataOutStageCallback>
 8002114:	e046      	b.n	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d124      	bne.n	8002168 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002134:	461a      	mov	r2, r3
 8002136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213a:	6093      	str	r3, [r2, #8]
 800213c:	e032      	b.n	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002154:	461a      	mov	r2, r3
 8002156:	2320      	movs	r3, #32
 8002158:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f004 fbc7 	bl	80068f4 <HAL_PCD_DataOutStageCallback>
 8002166:	e01d      	b.n	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d114      	bne.n	8002198 <PCD_EP_OutXfrComplete_int+0x1b0>
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d108      	bne.n	8002198 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002190:	461a      	mov	r2, r3
 8002192:	2100      	movs	r1, #0
 8002194:	f002 f8e6 	bl	8004364 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f004 fba8 	bl	80068f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	4f54300a 	.word	0x4f54300a
 80021b4:	4f54310a 	.word	0x4f54310a

080021b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	333c      	adds	r3, #60	; 0x3c
 80021d0:	3304      	adds	r3, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a15      	ldr	r2, [pc, #84]	; (8002240 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d90e      	bls.n	800220c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002204:	461a      	mov	r2, r3
 8002206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f004 fb5f 	bl	80068d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <PCD_EP_OutSetupPacket_int+0x88>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d90c      	bls.n	8002234 <PCD_EP_OutSetupPacket_int+0x7c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d108      	bne.n	8002234 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800222c:	461a      	mov	r2, r3
 800222e:	2101      	movs	r1, #1
 8002230:	f002 f898 	bl	8004364 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	4f54300a 	.word	0x4f54300a

08002244 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
 8002250:	4613      	mov	r3, r2
 8002252:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002262:	883b      	ldrh	r3, [r7, #0]
 8002264:	0419      	lsls	r1, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	430a      	orrs	r2, r1
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
 8002270:	e028      	b.n	80022c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	4413      	add	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e00d      	b.n	80022a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	3340      	adds	r3, #64	; 0x40
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	3301      	adds	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3ec      	bcc.n	8002286 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022ac:	883b      	ldrh	r3, [r7, #0]
 80022ae:	0418      	lsls	r0, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	4302      	orrs	r2, r0
 80022bc:	3340      	adds	r3, #64	; 0x40
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e267      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d075      	beq.n	8002416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232a:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b04      	cmp	r3, #4
 8002334:	d00c      	beq.n	8002350 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002336:	4b85      	ldr	r3, [pc, #532]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233e:	2b08      	cmp	r3, #8
 8002340:	d112      	bne.n	8002368 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002342:	4b82      	ldr	r3, [pc, #520]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234e:	d10b      	bne.n	8002368 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	4b7e      	ldr	r3, [pc, #504]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d05b      	beq.n	8002414 <HAL_RCC_OscConfig+0x108>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d157      	bne.n	8002414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e242      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d106      	bne.n	8002380 <HAL_RCC_OscConfig+0x74>
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a75      	ldr	r2, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e01d      	b.n	80023bc <HAL_RCC_OscConfig+0xb0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x98>
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6f      	ldr	r2, [pc, #444]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6c      	ldr	r2, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0xb0>
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a68      	ldr	r2, [pc, #416]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a65      	ldr	r2, [pc, #404]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fa36 	bl	8000834 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe fa32 	bl	8000834 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e207      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b5b      	ldr	r3, [pc, #364]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0xc0>
 80023ea:	e014      	b.n	8002416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe fa22 	bl	8000834 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe fa1e 	bl	8000834 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1f3      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	4b51      	ldr	r3, [pc, #324]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0xe8>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002436:	2b08      	cmp	r3, #8
 8002438:	d11c      	bne.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243a:	4b44      	ldr	r3, [pc, #272]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x152>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1c7      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4937      	ldr	r1, [pc, #220]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	e03a      	b.n	80024ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x244>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe f9d7 	bl	8000834 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248a:	f7fe f9d3 	bl	8000834 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1a8      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4925      	ldr	r1, [pc, #148]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x244>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe f9b6 	bl	8000834 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe f9b2 	bl	8000834 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e187      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d036      	beq.n	8002564 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d016      	beq.n	800252c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x248>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe f996 	bl	8000834 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe f992 	bl	8000834 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e167      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x200>
 800252a:	e01b      	b.n	8002564 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x248>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe f97f 	bl	8000834 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	e00e      	b.n	8002558 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe f97b 	bl	8000834 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d907      	bls.n	8002558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e150      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
 800254c:	40023800 	.word	0x40023800
 8002550:	42470000 	.word	0x42470000
 8002554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ea      	bne.n	800253a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8097 	beq.w	80026a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002576:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b7d      	ldr	r3, [pc, #500]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a7c      	ldr	r2, [pc, #496]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b7a      	ldr	r3, [pc, #488]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b77      	ldr	r3, [pc, #476]	; (8002780 <HAL_RCC_OscConfig+0x474>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d118      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b74      	ldr	r3, [pc, #464]	; (8002780 <HAL_RCC_OscConfig+0x474>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a73      	ldr	r2, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x474>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7fe f93b 	bl	8000834 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7fe f937 	bl	8000834 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e10c      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_OscConfig+0x474>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x2ea>
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCC_OscConfig+0x470>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a63      	ldr	r2, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x470>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x324>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x30c>
 80025fe:	4b5f      	ldr	r3, [pc, #380]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a5e      	ldr	r2, [pc, #376]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	4b5c      	ldr	r3, [pc, #368]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a5b      	ldr	r2, [pc, #364]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0x324>
 8002618:	4b58      	ldr	r3, [pc, #352]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a57      	ldr	r2, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	4b55      	ldr	r3, [pc, #340]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a54      	ldr	r2, [pc, #336]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d015      	beq.n	8002664 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe f8fc 	bl	8000834 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe f8f8 	bl	8000834 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0cb      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ee      	beq.n	8002640 <HAL_RCC_OscConfig+0x334>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7fe f8e6 	bl	8000834 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe f8e2 	bl	8000834 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0b5      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ee      	bne.n	800266c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a38      	ldr	r2, [pc, #224]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a1 	beq.w	80027ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_OscConfig+0x470>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d05c      	beq.n	8002770 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d141      	bne.n	8002742 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCC_OscConfig+0x478>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe f8b6 	bl	8000834 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe f8b2 	bl	8000834 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e087      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x470>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	3b01      	subs	r3, #1
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	491b      	ldr	r1, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x478>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7fe f88b 	bl	8000834 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe f887 	bl	8000834 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e05c      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x416>
 8002740:	e054      	b.n	80027ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_RCC_OscConfig+0x478>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe f874 	bl	8000834 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe f870 	bl	8000834 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e045      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x444>
 800276e:	e03d      	b.n	80027ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d107      	bne.n	8002788 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e038      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
 800277c:	40023800 	.word	0x40023800
 8002780:	40007000 	.word	0x40007000
 8002784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x4ec>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d028      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d121      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d11a      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b8:	4013      	ands	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d111      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	3b01      	subs	r3, #1
 80027d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0cc      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d90c      	bls.n	8002838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b65      	ldr	r3, [pc, #404]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b8      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002850:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	494d      	ldr	r1, [pc, #308]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d044      	beq.n	800291c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d119      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e06f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e067      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4934      	ldr	r1, [pc, #208]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ec:	f7fd ffa2 	bl	8000834 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fd ff9e 	bl	8000834 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d20c      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e032      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4916      	ldr	r1, [pc, #88]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	490e      	ldr	r1, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002982:	f000 f821 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 8002986:	4602      	mov	r2, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	490a      	ldr	r1, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	5ccb      	ldrb	r3, [r1, r3]
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd ff02 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08006f14 	.word	0x08006f14
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20000004 	.word	0x20000004

080029c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b094      	sub	sp, #80	; 0x50
 80029ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
 80029d4:	2300      	movs	r3, #0
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d8:	2300      	movs	r3, #0
 80029da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e0:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d00d      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x40>
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	f200 80e1 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x34>
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fa:	e0db      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x204>)
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a00:	e0db      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a02:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a06:	e0d8      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a08:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	2200      	movs	r2, #0
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
 8002a36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	f04f 0000 	mov.w	r0, #0
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	0159      	lsls	r1, r3, #5
 8002a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4c:	0150      	lsls	r0, r2, #5
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4621      	mov	r1, r4
 8002a54:	1a51      	subs	r1, r2, r1
 8002a56:	6139      	str	r1, [r7, #16]
 8002a58:	4629      	mov	r1, r5
 8002a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	018b      	lsls	r3, r1, #6
 8002a70:	4651      	mov	r1, sl
 8002a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a76:	4651      	mov	r1, sl
 8002a78:	018a      	lsls	r2, r1, #6
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a80:	4659      	mov	r1, fp
 8002a82:	eb63 0901 	sbc.w	r9, r3, r1
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	eb18 0303 	adds.w	r3, r8, r3
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	eb49 0303 	adc.w	r3, r9, r3
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aba:	4629      	mov	r1, r5
 8002abc:	024b      	lsls	r3, r1, #9
 8002abe:	4621      	mov	r1, r4
 8002ac0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	024a      	lsls	r2, r1, #9
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ace:	2200      	movs	r2, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ad8:	f7fd fb88 	bl	80001ec <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae4:	e058      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	2200      	movs	r2, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	4611      	mov	r1, r2
 8002af2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	f04f 0000 	mov.w	r0, #0
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	0159      	lsls	r1, r3, #5
 8002b0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b12:	0150      	lsls	r0, r2, #5
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4641      	mov	r1, r8
 8002b1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b1e:	4649      	mov	r1, r9
 8002b20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b38:	ebb2 040a 	subs.w	r4, r2, sl
 8002b3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	00eb      	lsls	r3, r5, #3
 8002b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4e:	00e2      	lsls	r2, r4, #3
 8002b50:	4614      	mov	r4, r2
 8002b52:	461d      	mov	r5, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	18e3      	adds	r3, r4, r3
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	eb45 0303 	adc.w	r3, r5, r3
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6e:	4629      	mov	r1, r5
 8002b70:	028b      	lsls	r3, r1, #10
 8002b72:	4621      	mov	r1, r4
 8002b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b78:	4621      	mov	r1, r4
 8002b7a:	028a      	lsls	r2, r1, #10
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b82:	2200      	movs	r2, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	61fa      	str	r2, [r7, #28]
 8002b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8c:	f7fd fb2e 	bl	80001ec <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x204>)
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3750      	adds	r7, #80	; 0x50
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	007a1200 	.word	0x007a1200

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000000 	.word	0x20000000

08002bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bec:	b084      	sub	sp, #16
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	f107 001c 	add.w	r0, r7, #28
 8002bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d122      	bne.n	8002c4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f001 fbee 	bl	8004420 <USB_CoreReset>
 8002c44:	4603      	mov	r3, r0
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e01a      	b.n	8002c80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f001 fbe2 	bl	8004420 <USB_CoreReset>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
 8002c72:	e005      	b.n	8002c80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10b      	bne.n	8002c9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f043 0206 	orr.w	r2, r3, #6
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002caa:	b004      	add	sp, #16
 8002cac:	4770      	bx	lr
	...

08002cb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d165      	bne.n	8002d90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a41      	ldr	r2, [pc, #260]	; (8002dcc <USB_SetTurnaroundTime+0x11c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d906      	bls.n	8002cda <USB_SetTurnaroundTime+0x2a>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <USB_SetTurnaroundTime+0x120>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d202      	bcs.n	8002cda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e062      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <USB_SetTurnaroundTime+0x120>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d306      	bcc.n	8002cf0 <USB_SetTurnaroundTime+0x40>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <USB_SetTurnaroundTime+0x124>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d202      	bcs.n	8002cf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cea:	230e      	movs	r3, #14
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e057      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a38      	ldr	r2, [pc, #224]	; (8002dd4 <USB_SetTurnaroundTime+0x124>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d306      	bcc.n	8002d06 <USB_SetTurnaroundTime+0x56>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4a37      	ldr	r2, [pc, #220]	; (8002dd8 <USB_SetTurnaroundTime+0x128>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d202      	bcs.n	8002d06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d00:	230d      	movs	r3, #13
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e04c      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4a33      	ldr	r2, [pc, #204]	; (8002dd8 <USB_SetTurnaroundTime+0x128>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d306      	bcc.n	8002d1c <USB_SetTurnaroundTime+0x6c>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <USB_SetTurnaroundTime+0x12c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d802      	bhi.n	8002d1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d16:	230c      	movs	r3, #12
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e041      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4a2f      	ldr	r2, [pc, #188]	; (8002ddc <USB_SetTurnaroundTime+0x12c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d906      	bls.n	8002d32 <USB_SetTurnaroundTime+0x82>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <USB_SetTurnaroundTime+0x130>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d802      	bhi.n	8002d32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e036      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4a2a      	ldr	r2, [pc, #168]	; (8002de0 <USB_SetTurnaroundTime+0x130>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d906      	bls.n	8002d48 <USB_SetTurnaroundTime+0x98>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <USB_SetTurnaroundTime+0x134>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d802      	bhi.n	8002d48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d42:	230a      	movs	r3, #10
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e02b      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <USB_SetTurnaroundTime+0x134>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d906      	bls.n	8002d5e <USB_SetTurnaroundTime+0xae>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <USB_SetTurnaroundTime+0x138>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d202      	bcs.n	8002d5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d58:	2309      	movs	r3, #9
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e020      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <USB_SetTurnaroundTime+0x138>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d306      	bcc.n	8002d74 <USB_SetTurnaroundTime+0xc4>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <USB_SetTurnaroundTime+0x13c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d802      	bhi.n	8002d74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d6e:	2308      	movs	r3, #8
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e015      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <USB_SetTurnaroundTime+0x13c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d906      	bls.n	8002d8a <USB_SetTurnaroundTime+0xda>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <USB_SetTurnaroundTime+0x140>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d202      	bcs.n	8002d8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d84:	2307      	movs	r3, #7
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e00a      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e007      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d96:	2309      	movs	r3, #9
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e001      	b.n	8002da0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d9c:	2309      	movs	r3, #9
 8002d9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	00d8acbf 	.word	0x00d8acbf
 8002dd0:	00e4e1c0 	.word	0x00e4e1c0
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	01067380 	.word	0x01067380
 8002ddc:	011a499f 	.word	0x011a499f
 8002de0:	01312cff 	.word	0x01312cff
 8002de4:	014ca43f 	.word	0x014ca43f
 8002de8:	016e3600 	.word	0x016e3600
 8002dec:	01a6ab1f 	.word	0x01a6ab1f
 8002df0:	01e84800 	.word	0x01e84800

08002df4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f023 0201 	bic.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d115      	bne.n	8002e86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f7fd fcf0 	bl	800084c <HAL_Delay>
      ms++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f001 fa45 	bl	8004302 <USB_GetMode>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d01e      	beq.n	8002ebc <USB_SetCurrentMode+0x84>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b31      	cmp	r3, #49	; 0x31
 8002e82:	d9f0      	bls.n	8002e66 <USB_SetCurrentMode+0x2e>
 8002e84:	e01a      	b.n	8002ebc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d115      	bne.n	8002eb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f7fd fcd7 	bl	800084c <HAL_Delay>
      ms++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f001 fa2c 	bl	8004302 <USB_GetMode>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <USB_SetCurrentMode+0x84>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b31      	cmp	r3, #49	; 0x31
 8002eb4:	d9f0      	bls.n	8002e98 <USB_SetCurrentMode+0x60>
 8002eb6:	e001      	b.n	8002ebc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e005      	b.n	8002ec8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b32      	cmp	r3, #50	; 0x32
 8002ec0:	d101      	bne.n	8002ec6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e009      	b.n	8002f04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	3340      	adds	r3, #64	; 0x40
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	2200      	movs	r2, #0
 8002efc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	3301      	adds	r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b0e      	cmp	r3, #14
 8002f08:	d9f2      	bls.n	8002ef0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11c      	bne.n	8002f4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
 8002f48:	e00b      	b.n	8002f62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f74:	4619      	mov	r1, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	680b      	ldr	r3, [r1, #0]
 8002f80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10c      	bne.n	8002fa2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d104      	bne.n	8002f98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f8e:	2100      	movs	r1, #0
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f965 	bl	8003260 <USB_SetDevSpeed>
 8002f96:	e008      	b.n	8002faa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f98:	2101      	movs	r1, #1
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f960 	bl	8003260 <USB_SetDevSpeed>
 8002fa0:	e003      	b.n	8002faa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fa2:	2103      	movs	r1, #3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f95b 	bl	8003260 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002faa:	2110      	movs	r1, #16
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8f3 	bl	8003198 <USB_FlushTxFifo>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f91f 	bl	8003200 <USB_FlushRxFifo>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fea:	461a      	mov	r2, r3
 8002fec:	2300      	movs	r3, #0
 8002fee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	e043      	b.n	800307e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800300c:	d118      	bne.n	8003040 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003020:	461a      	mov	r2, r3
 8003022:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	e013      	b.n	8003052 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003036:	461a      	mov	r2, r3
 8003038:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e008      	b.n	8003052 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304c:	461a      	mov	r2, r3
 800304e:	2300      	movs	r3, #0
 8003050:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305e:	461a      	mov	r2, r3
 8003060:	2300      	movs	r3, #0
 8003062:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003070:	461a      	mov	r2, r3
 8003072:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003076:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	3301      	adds	r3, #1
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	429a      	cmp	r2, r3
 8003084:	d3b7      	bcc.n	8002ff6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	e043      	b.n	8003114 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800309e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a2:	d118      	bne.n	80030d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	461a      	mov	r2, r3
 80030b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e013      	b.n	80030e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030cc:	461a      	mov	r2, r3
 80030ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	e008      	b.n	80030e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e2:	461a      	mov	r2, r3
 80030e4:	2300      	movs	r3, #0
 80030e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f4:	461a      	mov	r2, r3
 80030f6:	2300      	movs	r3, #0
 80030f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003106:	461a      	mov	r2, r3
 8003108:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800310c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	3301      	adds	r3, #1
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3b7      	bcc.n	800308c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800313c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <USB_DevInit+0x2c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f043 0208 	orr.w	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800316e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003184:	7dfb      	ldrb	r3, [r7, #23]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003190:	b004      	add	sp, #16
 8003192:	4770      	bx	lr
 8003194:	803c3800 	.word	0x803c3800

08003198 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a13      	ldr	r2, [pc, #76]	; (80031fc <USB_FlushTxFifo+0x64>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e01b      	b.n	80031f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	daf2      	bge.n	80031a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	019b      	lsls	r3, r3, #6
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a08      	ldr	r2, [pc, #32]	; (80031fc <USB_FlushTxFifo+0x64>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e006      	b.n	80031f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d0f0      	beq.n	80031d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	00030d40 	.word	0x00030d40

08003200 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a11      	ldr	r2, [pc, #68]	; (800325c <USB_FlushRxFifo+0x5c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e018      	b.n	8003250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	daf2      	bge.n	800320c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2210      	movs	r2, #16
 800322e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3301      	adds	r3, #1
 8003234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <USB_FlushRxFifo+0x5c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e006      	b.n	8003250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b10      	cmp	r3, #16
 800324c:	d0f0      	beq.n	8003230 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	00030d40 	.word	0x00030d40

08003260 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003292:	b480      	push	{r7}
 8003294:	b087      	sub	sp, #28
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0306 	and.w	r3, r3, #6
 80032aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]
 80032b6:	e00a      	b.n	80032ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d002      	beq.n	80032c4 <USB_GetDevSpeed+0x32>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d102      	bne.n	80032ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032c4:	2302      	movs	r3, #2
 80032c6:	75fb      	strb	r3, [r7, #23]
 80032c8:	e001      	b.n	80032ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032ca:	230f      	movs	r3, #15
 80032cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d13a      	bne.n	800336e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	b29b      	uxth	r3, r3
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003316:	4313      	orrs	r3, r2
 8003318:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d155      	bne.n	80033dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	791b      	ldrb	r3, [r3, #4]
 800334a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800334c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	059b      	lsls	r3, r3, #22
 8003352:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003354:	4313      	orrs	r3, r2
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	0151      	lsls	r1, r2, #5
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	440a      	add	r2, r1
 800335e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e036      	b.n	80033dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800338c:	4313      	orrs	r3, r2
 800338e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11a      	bne.n	80033dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	791b      	ldrb	r3, [r3, #4]
 80033c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033c2:	430b      	orrs	r3, r1
 80033c4:	4313      	orrs	r3, r2
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	0151      	lsls	r1, r2, #5
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	440a      	add	r2, r1
 80033ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d161      	bne.n	80034cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800341a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800341e:	d11f      	bne.n	8003460 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	440a      	add	r2, r1
 8003436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800343e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	0151      	lsls	r1, r2, #5
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	440a      	add	r2, r1
 8003456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800345a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800345e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	b29b      	uxth	r3, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	68f9      	ldr	r1, [r7, #12]
 800347c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003480:	4013      	ands	r3, r2
 8003482:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a4:	4013      	ands	r3, r2
 80034a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0159      	lsls	r1, r3, #5
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	440b      	add	r3, r1
 80034be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c2:	4619      	mov	r1, r3
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <USB_DeactivateEndpoint+0x1b0>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
 80034ca:	e060      	b.n	800358e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e2:	d11f      	bne.n	8003524 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	0151      	lsls	r1, r2, #5
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	440a      	add	r2, r1
 80034fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003502:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	0151      	lsls	r1, r2, #5
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	440a      	add	r2, r1
 800351a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800351e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003522:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	43db      	mvns	r3, r3
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003544:	4013      	ands	r3, r2
 8003546:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	43db      	mvns	r3, r3
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003568:	4013      	ands	r3, r2
 800356a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	0159      	lsls	r1, r3, #5
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	440b      	add	r3, r1
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	4619      	mov	r1, r3
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <USB_DeactivateEndpoint+0x1b4>)
 800358a:	4013      	ands	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	ec337800 	.word	0xec337800
 80035a0:	eff37800 	.word	0xeff37800

080035a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	4613      	mov	r3, r2
 80035b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	785b      	ldrb	r3, [r3, #1]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f040 815c 	bne.w	800387e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d132      	bne.n	8003634 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	0151      	lsls	r1, r2, #5
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	440a      	add	r2, r1
 80035e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	440a      	add	r2, r1
 8003608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800360c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	440a      	add	r2, r1
 8003628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362c:	0cdb      	lsrs	r3, r3, #19
 800362e:	04db      	lsls	r3, r3, #19
 8003630:	6113      	str	r3, [r2, #16]
 8003632:	e074      	b.n	800371e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	440a      	add	r2, r1
 800364a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800364e:	0cdb      	lsrs	r3, r3, #19
 8003650:	04db      	lsls	r3, r3, #19
 8003652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	0151      	lsls	r1, r2, #5
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	440a      	add	r2, r1
 800366a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800366e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003672:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003676:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003684:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6999      	ldr	r1, [r3, #24]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	440b      	add	r3, r1
 8003690:	1e59      	subs	r1, r3, #1
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	fbb1 f3f3 	udiv	r3, r1, r3
 800369a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800369c:	4b9d      	ldr	r3, [pc, #628]	; (8003914 <USB_EPStartXfer+0x370>)
 800369e:	400b      	ands	r3, r1
 80036a0:	69b9      	ldr	r1, [r7, #24]
 80036a2:	0148      	lsls	r0, r1, #5
 80036a4:	69f9      	ldr	r1, [r7, #28]
 80036a6:	4401      	add	r1, r0
 80036a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036ac:	4313      	orrs	r3, r2
 80036ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	0148      	lsls	r0, r1, #5
 80036ca:	69f9      	ldr	r1, [r7, #28]
 80036cc:	4401      	add	r1, r0
 80036ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	791b      	ldrb	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d11f      	bne.n	800371e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	0151      	lsls	r1, r2, #5
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	440a      	add	r2, r1
 80036f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	440a      	add	r2, r1
 8003714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800371c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d14b      	bne.n	80037bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	791b      	ldrb	r3, [r3, #4]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d128      	bne.n	800379a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d110      	bne.n	800377a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	440a      	add	r2, r1
 800376e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	e00f      	b.n	800379a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	0151      	lsls	r1, r2, #5
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	440a      	add	r2, r1
 8003790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003798:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e133      	b.n	8003a24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	0151      	lsls	r1, r2, #5
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	440a      	add	r2, r1
 80037d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	791b      	ldrb	r3, [r3, #4]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d015      	beq.n	8003810 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 811b 	beq.w	8003a24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	69f9      	ldr	r1, [r7, #28]
 8003806:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800380a:	4313      	orrs	r3, r2
 800380c:	634b      	str	r3, [r1, #52]	; 0x34
 800380e:	e109      	b.n	8003a24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d110      	bne.n	8003842 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	440a      	add	r2, r1
 8003836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e00f      	b.n	8003862 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	0151      	lsls	r1, r2, #5
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	440a      	add	r2, r1
 8003858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003860:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6919      	ldr	r1, [r3, #16]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	b298      	uxth	r0, r3
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4603      	mov	r3, r0
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fade 	bl	8003e38 <USB_WritePacket>
 800387c:	e0d2      	b.n	8003a24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	0151      	lsls	r1, r2, #5
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	440a      	add	r2, r1
 8003894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003898:	0cdb      	lsrs	r3, r3, #19
 800389a:	04db      	lsls	r3, r3, #19
 800389c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d126      	bne.n	8003918 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	69b9      	ldr	r1, [r7, #24]
 80038e2:	0148      	lsls	r0, r1, #5
 80038e4:	69f9      	ldr	r1, [r7, #28]
 80038e6:	4401      	add	r1, r0
 80038e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038ec:	4313      	orrs	r3, r2
 80038ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800390a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800390e:	6113      	str	r3, [r2, #16]
 8003910:	e03a      	b.n	8003988 <USB_EPStartXfer+0x3e4>
 8003912:	bf00      	nop
 8003914:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4413      	add	r3, r2
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	8afa      	ldrh	r2, [r7, #22]
 8003934:	fb03 f202 	mul.w	r2, r3, r2
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	8afb      	ldrh	r3, [r7, #22]
 800394c:	04d9      	lsls	r1, r3, #19
 800394e:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <USB_EPStartXfer+0x48c>)
 8003950:	400b      	ands	r3, r1
 8003952:	69b9      	ldr	r1, [r7, #24]
 8003954:	0148      	lsls	r0, r1, #5
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	4401      	add	r1, r0
 800395a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800395e:	4313      	orrs	r3, r2
 8003960:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	0148      	lsls	r0, r1, #5
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	4401      	add	r1, r0
 8003980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003984:	4313      	orrs	r3, r2
 8003986:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10d      	bne.n	80039aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6919      	ldr	r1, [r3, #16]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a6:	460a      	mov	r2, r1
 80039a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	791b      	ldrb	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d128      	bne.n	8003a04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d110      	bne.n	80039e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	0151      	lsls	r1, r2, #5
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	440a      	add	r2, r1
 80039d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e00f      	b.n	8003a04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	0151      	lsls	r1, r2, #5
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	440a      	add	r2, r1
 80039fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	1ff80000 	.word	0x1ff80000

08003a34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 80ce 	bne.w	8003bf2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d132      	bne.n	8003ac4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	0151      	lsls	r1, r2, #5
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	440a      	add	r2, r1
 8003a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003abc:	0cdb      	lsrs	r3, r3, #19
 8003abe:	04db      	lsls	r3, r3, #19
 8003ac0:	6113      	str	r3, [r2, #16]
 8003ac2:	e04e      	b.n	8003b62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ade:	0cdb      	lsrs	r3, r3, #19
 8003ae0:	04db      	lsls	r3, r3, #19
 8003ae2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003afe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d903      	bls.n	8003b1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b52:	6939      	ldr	r1, [r7, #16]
 8003b54:	0148      	lsls	r0, r1, #5
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	4401      	add	r1, r0
 8003b5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d11e      	bne.n	8003ba6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d009      	beq.n	8003b84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	e097      	b.n	8003cd6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	0151      	lsls	r1, r2, #5
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	440a      	add	r2, r1
 8003bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8083 	beq.w	8003cd6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	2101      	movs	r1, #1
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	6979      	ldr	r1, [r7, #20]
 8003be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bec:	4313      	orrs	r3, r2
 8003bee:	634b      	str	r3, [r1, #52]	; 0x34
 8003bf0:	e071      	b.n	8003cd6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0c:	0cdb      	lsrs	r3, r3, #19
 8003c0e:	04db      	lsls	r3, r3, #19
 8003c10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	0151      	lsls	r1, r2, #5
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	440a      	add	r2, r1
 8003c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	0151      	lsls	r1, r2, #5
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	440a      	add	r2, r1
 8003c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c84:	6939      	ldr	r1, [r7, #16]
 8003c86:	0148      	lsls	r0, r1, #5
 8003c88:	6979      	ldr	r1, [r7, #20]
 8003c8a:	4401      	add	r1, r0
 8003c8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c90:	4313      	orrs	r3, r2
 8003c92:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d10d      	bne.n	8003cb6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6919      	ldr	r1, [r3, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	460a      	mov	r2, r1
 8003cb4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	0151      	lsls	r1, r2, #5
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	440a      	add	r2, r1
 8003ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d14a      	bne.n	8003d98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1a:	f040 8086 	bne.w	8003e2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d902      	bls.n	8003d7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
          break;
 8003d7a:	e056      	b.n	8003e2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d94:	d0e7      	beq.n	8003d66 <USB_EPStopXfer+0x82>
 8003d96:	e048      	b.n	8003e2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db0:	d13b      	bne.n	8003e2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	0151      	lsls	r1, r2, #5
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	440a      	add	r2, r1
 8003df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d902      	bls.n	8003e10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e0e:	e00c      	b.n	8003e2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e28:	d0e7      	beq.n	8003dfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	460b      	mov	r3, r1
 8003e48:	71fb      	strb	r3, [r7, #7]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d123      	bne.n	8003ea6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e5e:	88bb      	ldrh	r3, [r7, #4]
 8003e60:	3303      	adds	r3, #3
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e018      	b.n	8003e9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	031a      	lsls	r2, r3, #12
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	461a      	mov	r2, r3
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	3301      	adds	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d3e2      	bcc.n	8003e6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3724      	adds	r7, #36	; 0x24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b08b      	sub	sp, #44	; 0x2c
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	e014      	b.n	8003f0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	601a      	str	r2, [r3, #0]
    pDest++;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	3301      	adds	r3, #1
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	3301      	adds	r3, #1
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	3301      	adds	r3, #1
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	3301      	adds	r3, #1
 8003f08:	623b      	str	r3, [r7, #32]
 8003f0a:	6a3a      	ldr	r2, [r7, #32]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d3e6      	bcc.n	8003ee0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f12:	8bfb      	ldrh	r3, [r7, #30]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01e      	beq.n	8003f56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f22:	461a      	mov	r2, r3
 8003f24:	f107 0310 	add.w	r3, r7, #16
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	701a      	strb	r2, [r3, #0]
      i++;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	3301      	adds	r3, #1
 8003f42:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	3301      	adds	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003f4a:	8bfb      	ldrh	r3, [r7, #30]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f50:	8bfb      	ldrh	r3, [r7, #30]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ea      	bne.n	8003f2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	372c      	adds	r7, #44	; 0x2c
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d12c      	bne.n	8003fda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	db12      	blt.n	8003fb8 <USB_EPSetStall+0x54>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00f      	beq.n	8003fb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	0151      	lsls	r1, r2, #5
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	440a      	add	r2, r1
 8003fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e02b      	b.n	8004032 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	db12      	blt.n	8004012 <USB_EPSetStall+0xae>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00f      	beq.n	8004012 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004010:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004030:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d128      	bne.n	80040ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	440a      	add	r2, r1
 8004072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800407a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	791b      	ldrb	r3, [r3, #4]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d003      	beq.n	800408c <USB_EPClearStall+0x4c>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	791b      	ldrb	r3, [r3, #4]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d138      	bne.n	80040fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	0151      	lsls	r1, r2, #5
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	440a      	add	r2, r1
 80040a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e027      	b.n	80040fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	0151      	lsls	r1, r2, #5
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	440a      	add	r2, r1
 80040c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	791b      	ldrb	r3, [r3, #4]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d003      	beq.n	80040de <USB_EPClearStall+0x9e>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	791b      	ldrb	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d10f      	bne.n	80040fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800412e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004186:	f023 0302 	bic.w	r3, r3, #2
 800418a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041b4:	f023 0303 	bic.w	r3, r3, #3
 80041b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c8:	f043 0302 	orr.w	r3, r3, #2
 80041cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4013      	ands	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	0c1b      	lsrs	r3, r3, #16
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	b29b      	uxth	r3, r3
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	4013      	ands	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004298:	68bb      	ldr	r3, [r7, #8]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	fa22 f303 	lsr.w	r3, r2, r3
 80042d6:	01db      	lsls	r3, r3, #7
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042f4:	68bb      	ldr	r3, [r7, #8]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 0301 	and.w	r3, r3, #1
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004338:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800433c:	f023 0307 	bic.w	r3, r3, #7
 8004340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	460b      	mov	r3, r1
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	333c      	adds	r3, #60	; 0x3c
 800437a:	3304      	adds	r3, #4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4a26      	ldr	r2, [pc, #152]	; (800441c <USB_EP0_OutStart+0xb8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d90a      	bls.n	800439e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004398:	d101      	bne.n	800439e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e037      	b.n	800440e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	461a      	mov	r2, r3
 80043a6:	2300      	movs	r3, #0
 80043a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043cc:	f043 0318 	orr.w	r3, r3, #24
 80043d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80043e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80043e6:	7afb      	ldrb	r3, [r7, #11]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10f      	bne.n	800440c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	461a      	mov	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004406:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800440a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	4f54300a 	.word	0x4f54300a

08004420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a13      	ldr	r2, [pc, #76]	; (8004484 <USB_CoreReset+0x64>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e01b      	b.n	8004476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	daf2      	bge.n	800442c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <USB_CoreReset+0x64>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e006      	b.n	8004476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d0f0      	beq.n	8004456 <USB_CoreReset+0x36>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	00030d40 	.word	0x00030d40

08004488 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004494:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004498:	f002 fc9c 	bl	8006dd4 <USBD_static_malloc>
 800449c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	32b0      	adds	r2, #176	; 0xb0
 80044ae:	2100      	movs	r1, #0
 80044b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80044b4:	2302      	movs	r3, #2
 80044b6:	e0d4      	b.n	8004662 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80044b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80044bc:	2100      	movs	r1, #0
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f002 fcf0 	bl	8006ea4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	32b0      	adds	r2, #176	; 0xb0
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	32b0      	adds	r2, #176	; 0xb0
 80044de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	7c1b      	ldrb	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d138      	bne.n	8004562 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80044f0:	4b5e      	ldr	r3, [pc, #376]	; (800466c <USBD_CDC_Init+0x1e4>)
 80044f2:	7819      	ldrb	r1, [r3, #0]
 80044f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f8:	2202      	movs	r2, #2
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f002 fb47 	bl	8006b8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004500:	4b5a      	ldr	r3, [pc, #360]	; (800466c <USBD_CDC_Init+0x1e4>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3324      	adds	r3, #36	; 0x24
 8004516:	2201      	movs	r2, #1
 8004518:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800451a:	4b55      	ldr	r3, [pc, #340]	; (8004670 <USBD_CDC_Init+0x1e8>)
 800451c:	7819      	ldrb	r1, [r3, #0]
 800451e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004522:	2202      	movs	r2, #2
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f002 fb32 	bl	8006b8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800452a:	4b51      	ldr	r3, [pc, #324]	; (8004670 <USBD_CDC_Init+0x1e8>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	f003 020f 	and.w	r2, r3, #15
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004542:	2201      	movs	r2, #1
 8004544:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004546:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <USBD_CDC_Init+0x1ec>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	3326      	adds	r3, #38	; 0x26
 800455c:	2210      	movs	r2, #16
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	e035      	b.n	80045ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004562:	4b42      	ldr	r3, [pc, #264]	; (800466c <USBD_CDC_Init+0x1e4>)
 8004564:	7819      	ldrb	r1, [r3, #0]
 8004566:	2340      	movs	r3, #64	; 0x40
 8004568:	2202      	movs	r2, #2
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f002 fb0f 	bl	8006b8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004570:	4b3e      	ldr	r3, [pc, #248]	; (800466c <USBD_CDC_Init+0x1e4>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	3324      	adds	r3, #36	; 0x24
 8004586:	2201      	movs	r2, #1
 8004588:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800458a:	4b39      	ldr	r3, [pc, #228]	; (8004670 <USBD_CDC_Init+0x1e8>)
 800458c:	7819      	ldrb	r1, [r3, #0]
 800458e:	2340      	movs	r3, #64	; 0x40
 8004590:	2202      	movs	r2, #2
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f002 fafb 	bl	8006b8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004598:	4b35      	ldr	r3, [pc, #212]	; (8004670 <USBD_CDC_Init+0x1e8>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f003 020f 	and.w	r2, r3, #15
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045b0:	2201      	movs	r2, #1
 80045b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <USBD_CDC_Init+0x1ec>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3326      	adds	r3, #38	; 0x26
 80045ca:	2210      	movs	r2, #16
 80045cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045ce:	4b29      	ldr	r3, [pc, #164]	; (8004674 <USBD_CDC_Init+0x1ec>)
 80045d0:	7819      	ldrb	r1, [r3, #0]
 80045d2:	2308      	movs	r3, #8
 80045d4:	2203      	movs	r2, #3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f002 fad9 	bl	8006b8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80045dc:	4b25      	ldr	r3, [pc, #148]	; (8004674 <USBD_CDC_Init+0x1ec>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3324      	adds	r3, #36	; 0x24
 80045f2:	2201      	movs	r2, #1
 80045f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	33b0      	adds	r3, #176	; 0xb0
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800462c:	2302      	movs	r3, #2
 800462e:	e018      	b.n	8004662 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	7c1b      	ldrb	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <USBD_CDC_Init+0x1e8>)
 800463a:	7819      	ldrb	r1, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f002 fb90 	bl	8006d6c <USBD_LL_PrepareReceive>
 800464c:	e008      	b.n	8004660 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <USBD_CDC_Init+0x1e8>)
 8004650:	7819      	ldrb	r1, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004658:	2340      	movs	r3, #64	; 0x40
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f002 fb86 	bl	8006d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000093 	.word	0x20000093
 8004670:	20000094 	.word	0x20000094
 8004674:	20000095 	.word	0x20000095

08004678 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004684:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <USBD_CDC_DeInit+0xf8>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f002 faa5 	bl	8006bda <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004690:	4b37      	ldr	r3, [pc, #220]	; (8004770 <USBD_CDC_DeInit+0xf8>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f003 020f 	and.w	r2, r3, #15
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	3324      	adds	r3, #36	; 0x24
 80046a6:	2200      	movs	r2, #0
 80046a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80046aa:	4b32      	ldr	r3, [pc, #200]	; (8004774 <USBD_CDC_DeInit+0xfc>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f002 fa92 	bl	8006bda <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80046b6:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <USBD_CDC_DeInit+0xfc>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f003 020f 	and.w	r2, r3, #15
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046ce:	2200      	movs	r2, #0
 80046d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <USBD_CDC_DeInit+0x100>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f002 fa7e 	bl	8006bda <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80046de:	4b26      	ldr	r3, [pc, #152]	; (8004778 <USBD_CDC_DeInit+0x100>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	f003 020f 	and.w	r2, r3, #15
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	3324      	adds	r3, #36	; 0x24
 80046f4:	2200      	movs	r2, #0
 80046f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80046f8:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <USBD_CDC_DeInit+0x100>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	3326      	adds	r3, #38	; 0x26
 800470e:	2200      	movs	r2, #0
 8004710:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	32b0      	adds	r2, #176	; 0xb0
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01f      	beq.n	8004764 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	33b0      	adds	r3, #176	; 0xb0
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	32b0      	adds	r2, #176	; 0xb0
 8004742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004746:	4618      	mov	r0, r3
 8004748:	f002 fb52 	bl	8006df0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	32b0      	adds	r2, #176	; 0xb0
 8004756:	2100      	movs	r1, #0
 8004758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000093 	.word	0x20000093
 8004774:	20000094 	.word	0x20000094
 8004778:	20000095 	.word	0x20000095

0800477c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	32b0      	adds	r2, #176	; 0xb0
 8004790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004794:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0bf      	b.n	800492c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d050      	beq.n	800485a <USBD_CDC_Setup+0xde>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	f040 80af 	bne.w	800491c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	88db      	ldrh	r3, [r3, #6]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d03a      	beq.n	800483c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	da1b      	bge.n	8004808 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	33b0      	adds	r3, #176	; 0xb0
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80047e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	88d2      	ldrh	r2, [r2, #6]
 80047ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	88db      	ldrh	r3, [r3, #6]
 80047f2:	2b07      	cmp	r3, #7
 80047f4:	bf28      	it	cs
 80047f6:	2307      	movcs	r3, #7
 80047f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	89fa      	ldrh	r2, [r7, #14]
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f001 fd89 	bl	8006318 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004806:	e090      	b.n	800492a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	785a      	ldrb	r2, [r3, #1]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	88db      	ldrh	r3, [r3, #6]
 8004816:	2b3f      	cmp	r3, #63	; 0x3f
 8004818:	d803      	bhi.n	8004822 <USBD_CDC_Setup+0xa6>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	88db      	ldrh	r3, [r3, #6]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	e000      	b.n	8004824 <USBD_CDC_Setup+0xa8>
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800482a:	6939      	ldr	r1, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004832:	461a      	mov	r2, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 fd9b 	bl	8006370 <USBD_CtlPrepareRx>
      break;
 800483a:	e076      	b.n	800492a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	33b0      	adds	r3, #176	; 0xb0
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	7850      	ldrb	r0, [r2, #1]
 8004852:	2200      	movs	r2, #0
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	4798      	blx	r3
      break;
 8004858:	e067      	b.n	800492a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	2b0b      	cmp	r3, #11
 8004860:	d851      	bhi.n	8004906 <USBD_CDC_Setup+0x18a>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <USBD_CDC_Setup+0xec>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004899 	.word	0x08004899
 800486c:	08004915 	.word	0x08004915
 8004870:	08004907 	.word	0x08004907
 8004874:	08004907 	.word	0x08004907
 8004878:	08004907 	.word	0x08004907
 800487c:	08004907 	.word	0x08004907
 8004880:	08004907 	.word	0x08004907
 8004884:	08004907 	.word	0x08004907
 8004888:	08004907 	.word	0x08004907
 800488c:	08004907 	.word	0x08004907
 8004890:	080048c3 	.word	0x080048c3
 8004894:	080048ed 	.word	0x080048ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d107      	bne.n	80048b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80048a4:	f107 030a 	add.w	r3, r7, #10
 80048a8:	2202      	movs	r2, #2
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 fd33 	bl	8006318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048b2:	e032      	b.n	800491a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f001 fcbd 	bl	8006236 <USBD_CtlError>
            ret = USBD_FAIL;
 80048bc:	2303      	movs	r3, #3
 80048be:	75fb      	strb	r3, [r7, #23]
          break;
 80048c0:	e02b      	b.n	800491a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d107      	bne.n	80048de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80048ce:	f107 030d 	add.w	r3, r7, #13
 80048d2:	2201      	movs	r2, #1
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f001 fd1e 	bl	8006318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048dc:	e01d      	b.n	800491a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80048de:	6839      	ldr	r1, [r7, #0]
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 fca8 	bl	8006236 <USBD_CtlError>
            ret = USBD_FAIL;
 80048e6:	2303      	movs	r3, #3
 80048e8:	75fb      	strb	r3, [r7, #23]
          break;
 80048ea:	e016      	b.n	800491a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d00f      	beq.n	8004918 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f001 fc9b 	bl	8006236 <USBD_CtlError>
            ret = USBD_FAIL;
 8004900:	2303      	movs	r3, #3
 8004902:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004904:	e008      	b.n	8004918 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004906:	6839      	ldr	r1, [r7, #0]
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f001 fc94 	bl	8006236 <USBD_CtlError>
          ret = USBD_FAIL;
 800490e:	2303      	movs	r3, #3
 8004910:	75fb      	strb	r3, [r7, #23]
          break;
 8004912:	e002      	b.n	800491a <USBD_CDC_Setup+0x19e>
          break;
 8004914:	bf00      	nop
 8004916:	e008      	b.n	800492a <USBD_CDC_Setup+0x1ae>
          break;
 8004918:	bf00      	nop
      }
      break;
 800491a:	e006      	b.n	800492a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f001 fc89 	bl	8006236 <USBD_CtlError>
      ret = USBD_FAIL;
 8004924:	2303      	movs	r3, #3
 8004926:	75fb      	strb	r3, [r7, #23]
      break;
 8004928:	bf00      	nop
  }

  return (uint8_t)ret;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004946:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	32b0      	adds	r2, #176	; 0xb0
 8004952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800495a:	2303      	movs	r3, #3
 800495c:	e065      	b.n	8004a2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	32b0      	adds	r2, #176	; 0xb0
 8004968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800496c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	f003 020f 	and.w	r2, r3, #15
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3318      	adds	r3, #24
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d02f      	beq.n	80049e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	f003 020f 	and.w	r2, r3, #15
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	3318      	adds	r3, #24
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 010f 	and.w	r1, r3, #15
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	460b      	mov	r3, r1
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4403      	add	r3, r0
 80049b0:	3348      	adds	r3, #72	; 0x48
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d112      	bne.n	80049e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	f003 020f 	and.w	r2, r3, #15
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3318      	adds	r3, #24
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80049da:	78f9      	ldrb	r1, [r7, #3]
 80049dc:	2300      	movs	r3, #0
 80049de:	2200      	movs	r2, #0
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f002 f9a2 	bl	8006d2a <USBD_LL_Transmit>
 80049e6:	e01f      	b.n	8004a28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	33b0      	adds	r3, #176	; 0xb0
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d010      	beq.n	8004a28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	33b0      	adds	r3, #176	; 0xb0
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	32b0      	adds	r2, #176	; 0xb0
 8004a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	32b0      	adds	r2, #176	; 0xb0
 8004a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e01a      	b.n	8004a9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f002 f9a0 	bl	8006dae <USBD_LL_GetRxDataSize>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	33b0      	adds	r3, #176	; 0xb0
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004a94:	4611      	mov	r1, r2
 8004a96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	32b0      	adds	r2, #176	; 0xb0
 8004ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e025      	b.n	8004b10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	33b0      	adds	r3, #176	; 0xb0
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01a      	beq.n	8004b0e <USBD_CDC_EP0_RxReady+0x6c>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ade:	2bff      	cmp	r3, #255	; 0xff
 8004ae0:	d015      	beq.n	8004b0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	33b0      	adds	r3, #176	; 0xb0
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004afa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b02:	b292      	uxth	r2, r2
 8004b04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	22ff      	movs	r2, #255	; 0xff
 8004b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b20:	2182      	movs	r1, #130	; 0x82
 8004b22:	4818      	ldr	r0, [pc, #96]	; (8004b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b24:	f000 fd4f 	bl	80055c6 <USBD_GetEpDesc>
 8004b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	4815      	ldr	r0, [pc, #84]	; (8004b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b2e:	f000 fd4a 	bl	80055c6 <USBD_GetEpDesc>
 8004b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b34:	2181      	movs	r1, #129	; 0x81
 8004b36:	4813      	ldr	r0, [pc, #76]	; (8004b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b38:	f000 fd45 	bl	80055c6 <USBD_GetEpDesc>
 8004b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2210      	movs	r2, #16
 8004b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b58:	711a      	strb	r2, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d006      	beq.n	8004b72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6c:	711a      	strb	r2, [r3, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2243      	movs	r2, #67	; 0x43
 8004b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000050 	.word	0x20000050

08004b88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b90:	2182      	movs	r1, #130	; 0x82
 8004b92:	4818      	ldr	r0, [pc, #96]	; (8004bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b94:	f000 fd17 	bl	80055c6 <USBD_GetEpDesc>
 8004b98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	4815      	ldr	r0, [pc, #84]	; (8004bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b9e:	f000 fd12 	bl	80055c6 <USBD_GetEpDesc>
 8004ba2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ba4:	2181      	movs	r1, #129	; 0x81
 8004ba6:	4813      	ldr	r0, [pc, #76]	; (8004bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ba8:	f000 fd0d 	bl	80055c6 <USBD_GetEpDesc>
 8004bac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	711a      	strb	r2, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f042 0202 	orr.w	r2, r2, #2
 8004bcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d006      	beq.n	8004be2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	711a      	strb	r2, [r3, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f042 0202 	orr.w	r2, r2, #2
 8004be0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2243      	movs	r2, #67	; 0x43
 8004be6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004be8:	4b02      	ldr	r3, [pc, #8]	; (8004bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000050 	.word	0x20000050

08004bf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c00:	2182      	movs	r1, #130	; 0x82
 8004c02:	4818      	ldr	r0, [pc, #96]	; (8004c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c04:	f000 fcdf 	bl	80055c6 <USBD_GetEpDesc>
 8004c08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4815      	ldr	r0, [pc, #84]	; (8004c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c0e:	f000 fcda 	bl	80055c6 <USBD_GetEpDesc>
 8004c12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c14:	2181      	movs	r1, #129	; 0x81
 8004c16:	4813      	ldr	r0, [pc, #76]	; (8004c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c18:	f000 fcd5 	bl	80055c6 <USBD_GetEpDesc>
 8004c1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2210      	movs	r2, #16
 8004c28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d006      	beq.n	8004c3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c38:	711a      	strb	r2, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d006      	beq.n	8004c52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c4c:	711a      	strb	r2, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2243      	movs	r2, #67	; 0x43
 8004c56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000050 	.word	0x20000050

08004c68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	220a      	movs	r2, #10
 8004c74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004c76:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	2000000c 	.word	0x2000000c

08004c88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e009      	b.n	8004cb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	33b0      	adds	r3, #176	; 0xb0
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	32b0      	adds	r2, #176	; 0xb0
 8004cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e008      	b.n	8004cf4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	32b0      	adds	r2, #176	; 0xb0
 8004d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e004      	b.n	8004d2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	32b0      	adds	r2, #176	; 0xb0
 8004d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	32b0      	adds	r2, #176	; 0xb0
 8004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e025      	b.n	8004dba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11f      	bne.n	8004db8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <USBD_CDC_TransmitPacket+0x88>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f003 020f 	and.w	r2, r3, #15
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4403      	add	r3, r0
 8004d9a:	3318      	adds	r3, #24
 8004d9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <USBD_CDC_TransmitPacket+0x88>)
 8004da0:	7819      	ldrb	r1, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 ffbb 	bl	8006d2a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000093 	.word	0x20000093

08004dc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	32b0      	adds	r2, #176	; 0xb0
 8004dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	32b0      	adds	r2, #176	; 0xb0
 8004dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e018      	b.n	8004e28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7c1b      	ldrb	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <USBD_CDC_ReceivePacket+0x68>)
 8004e00:	7819      	ldrb	r1, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 ffad 	bl	8006d6c <USBD_LL_PrepareReceive>
 8004e12:	e008      	b.n	8004e26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <USBD_CDC_ReceivePacket+0x68>)
 8004e16:	7819      	ldrb	r1, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e1e:	2340      	movs	r3, #64	; 0x40
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 ffa3 	bl	8006d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000094 	.word	0x20000094

08004e34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e01f      	b.n	8004e8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	79fa      	ldrb	r2, [r7, #7]
 8004e7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f001 fe17 	bl	8006ab4 <USBD_LL_Init>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e025      	b.n	8004ef8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	32ae      	adds	r2, #174	; 0xae
 8004ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00f      	beq.n	8004ee8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	32ae      	adds	r2, #174	; 0xae
 8004ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	f107 020e 	add.w	r2, r7, #14
 8004edc:	4610      	mov	r0, r2
 8004ede:	4798      	blx	r3
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 fe25 	bl	8006b58 <USBD_LL_Start>
 8004f0e:	4603      	mov	r3, r0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	4611      	mov	r1, r2
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	4611      	mov	r1, r2
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4798      	blx	r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004faa:	6839      	ldr	r1, [r7, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 f908 	bl	80061c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d01a      	beq.n	800500c <USBD_LL_SetupStage+0x72>
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d822      	bhi.n	8005020 <USBD_LL_SetupStage+0x86>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <USBD_LL_SetupStage+0x4a>
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d00a      	beq.n	8004ff8 <USBD_LL_SetupStage+0x5e>
 8004fe2:	e01d      	b.n	8005020 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fb5f 	bl	80056b0 <USBD_StdDevReq>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff6:	e020      	b.n	800503a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fbc7 	bl	8005794 <USBD_StdItfReq>
 8005006:	4603      	mov	r3, r0
 8005008:	73fb      	strb	r3, [r7, #15]
      break;
 800500a:	e016      	b.n	800503a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fc29 	bl	800586c <USBD_StdEPReq>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]
      break;
 800501e:	e00c      	b.n	800503a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800502a:	b2db      	uxtb	r3, r3
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fdf2 	bl	8006c18 <USBD_LL_StallEP>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]
      break;
 8005038:	bf00      	nop
  }

  return ret;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	460b      	mov	r3, r1
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005056:	7afb      	ldrb	r3, [r7, #11]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d16e      	bne.n	800513a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005062:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800506a:	2b03      	cmp	r3, #3
 800506c:	f040 8098 	bne.w	80051a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d913      	bls.n	80050a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	1ad2      	subs	r2, r2, r3
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4293      	cmp	r3, r2
 8005094:	bf28      	it	cs
 8005096:	4613      	movcs	r3, r2
 8005098:	461a      	mov	r2, r3
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f001 f984 	bl	80063aa <USBD_CtlContinueRx>
 80050a2:	e07d      	b.n	80051a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d014      	beq.n	80050dc <USBD_LL_DataOutStage+0x98>
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d81d      	bhi.n	80050f2 <USBD_LL_DataOutStage+0xae>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <USBD_LL_DataOutStage+0x7c>
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d003      	beq.n	80050c6 <USBD_LL_DataOutStage+0x82>
 80050be:	e018      	b.n	80050f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	75bb      	strb	r3, [r7, #22]
            break;
 80050c4:	e018      	b.n	80050f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	4619      	mov	r1, r3
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fa5e 	bl	8005592 <USBD_CoreFindIF>
 80050d6:	4603      	mov	r3, r0
 80050d8:	75bb      	strb	r3, [r7, #22]
            break;
 80050da:	e00d      	b.n	80050f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	4619      	mov	r1, r3
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fa60 	bl	80055ac <USBD_CoreFindEP>
 80050ec:	4603      	mov	r3, r0
 80050ee:	75bb      	strb	r3, [r7, #22]
            break;
 80050f0:	e002      	b.n	80050f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75bb      	strb	r3, [r7, #22]
            break;
 80050f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80050f8:	7dbb      	ldrb	r3, [r7, #22]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d119      	bne.n	8005132 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b03      	cmp	r3, #3
 8005108:	d113      	bne.n	8005132 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800510a:	7dba      	ldrb	r2, [r7, #22]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	32ae      	adds	r2, #174	; 0xae
 8005110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800511a:	7dba      	ldrb	r2, [r7, #22]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005122:	7dba      	ldrb	r2, [r7, #22]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	32ae      	adds	r2, #174	; 0xae
 8005128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f001 f94a 	bl	80063cc <USBD_CtlSendStatus>
 8005138:	e032      	b.n	80051a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800513a:	7afb      	ldrb	r3, [r7, #11]
 800513c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005140:	b2db      	uxtb	r3, r3
 8005142:	4619      	mov	r1, r3
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fa31 	bl	80055ac <USBD_CoreFindEP>
 800514a:	4603      	mov	r3, r0
 800514c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800514e:	7dbb      	ldrb	r3, [r7, #22]
 8005150:	2bff      	cmp	r3, #255	; 0xff
 8005152:	d025      	beq.n	80051a0 <USBD_LL_DataOutStage+0x15c>
 8005154:	7dbb      	ldrb	r3, [r7, #22]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d122      	bne.n	80051a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b03      	cmp	r3, #3
 8005164:	d117      	bne.n	8005196 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005166:	7dba      	ldrb	r2, [r7, #22]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	32ae      	adds	r2, #174	; 0xae
 800516c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00f      	beq.n	8005196 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005176:	7dba      	ldrb	r2, [r7, #22]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800517e:	7dba      	ldrb	r2, [r7, #22]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	32ae      	adds	r2, #174	; 0xae
 8005184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	7afa      	ldrb	r2, [r7, #11]
 800518c:	4611      	mov	r1, r2
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	4798      	blx	r3
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	e000      	b.n	80051a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b086      	sub	sp, #24
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	460b      	mov	r3, r1
 80051b4:	607a      	str	r2, [r7, #4]
 80051b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d16f      	bne.n	800529e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3314      	adds	r3, #20
 80051c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d15a      	bne.n	8005284 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d914      	bls.n	8005204 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	1ad2      	subs	r2, r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f001 f8ac 	bl	800634e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051f6:	2300      	movs	r3, #0
 80051f8:	2200      	movs	r2, #0
 80051fa:	2100      	movs	r1, #0
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f001 fdb5 	bl	8006d6c <USBD_LL_PrepareReceive>
 8005202:	e03f      	b.n	8005284 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d11c      	bne.n	800524a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005218:	429a      	cmp	r2, r3
 800521a:	d316      	bcc.n	800524a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005226:	429a      	cmp	r2, r3
 8005228:	d20f      	bcs.n	800524a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800522a:	2200      	movs	r2, #0
 800522c:	2100      	movs	r1, #0
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f001 f88d 	bl	800634e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800523c:	2300      	movs	r3, #0
 800523e:	2200      	movs	r2, #0
 8005240:	2100      	movs	r1, #0
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f001 fd92 	bl	8006d6c <USBD_LL_PrepareReceive>
 8005248:	e01c      	b.n	8005284 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b03      	cmp	r3, #3
 8005254:	d10f      	bne.n	8005276 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005276:	2180      	movs	r1, #128	; 0x80
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f001 fccd 	bl	8006c18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f001 f8b7 	bl	80063f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d03a      	beq.n	8005304 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f7ff fe42 	bl	8004f18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800529c:	e032      	b.n	8005304 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800529e:	7afb      	ldrb	r3, [r7, #11]
 80052a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	4619      	mov	r1, r3
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f97f 	bl	80055ac <USBD_CoreFindEP>
 80052ae:	4603      	mov	r3, r0
 80052b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	2bff      	cmp	r3, #255	; 0xff
 80052b6:	d025      	beq.n	8005304 <USBD_LL_DataInStage+0x15a>
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d122      	bne.n	8005304 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d11c      	bne.n	8005304 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80052ca:	7dfa      	ldrb	r2, [r7, #23]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	32ae      	adds	r2, #174	; 0xae
 80052d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d014      	beq.n	8005304 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80052da:	7dfa      	ldrb	r2, [r7, #23]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80052e2:	7dfa      	ldrb	r2, [r7, #23]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	32ae      	adds	r2, #174	; 0xae
 80052e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	7afa      	ldrb	r2, [r7, #11]
 80052f0:	4611      	mov	r1, r2
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	4798      	blx	r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80052fa:	7dbb      	ldrb	r3, [r7, #22]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005300:	7dbb      	ldrb	r3, [r7, #22]
 8005302:	e000      	b.n	8005306 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d014      	beq.n	8005374 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6852      	ldr	r2, [r2, #4]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	4611      	mov	r1, r2
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005370:	2303      	movs	r3, #3
 8005372:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005374:	2340      	movs	r3, #64	; 0x40
 8005376:	2200      	movs	r2, #0
 8005378:	2100      	movs	r1, #0
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fc07 	bl	8006b8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2240      	movs	r2, #64	; 0x40
 800538c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005390:	2340      	movs	r3, #64	; 0x40
 8005392:	2200      	movs	r2, #0
 8005394:	2180      	movs	r1, #128	; 0x80
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f001 fbf9 	bl	8006b8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2240      	movs	r2, #64	; 0x40
 80053a6:	621a      	str	r2, [r3, #32]

  return ret;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2204      	movs	r2, #4
 80053ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b04      	cmp	r3, #4
 8005410:	d106      	bne.n	8005420 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005418:	b2da      	uxtb	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b03      	cmp	r3, #3
 8005440:	d110      	bne.n	8005464 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00b      	beq.n	8005464 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	32ae      	adds	r2, #174	; 0xae
 8005484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	e01c      	b.n	80054ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b03      	cmp	r3, #3
 800549a:	d115      	bne.n	80054c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32ae      	adds	r2, #174	; 0xae
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	32ae      	adds	r2, #174	; 0xae
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	4611      	mov	r1, r2
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	32ae      	adds	r2, #174	; 0xae
 80054e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e01c      	b.n	800552e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d115      	bne.n	800552c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	32ae      	adds	r2, #174	; 0xae
 800550a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	32ae      	adds	r2, #174	; 0xae
 800551e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	4611      	mov	r1, r2
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6852      	ldr	r2, [r2, #4]
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	4611      	mov	r1, r2
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005584:	2303      	movs	r3, #3
 8005586:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800559e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80055b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	460b      	mov	r3, r1
 80055d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	885b      	ldrh	r3, [r3, #2]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d920      	bls.n	8005630 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80055f6:	e013      	b.n	8005620 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80055f8:	f107 030a 	add.w	r3, r7, #10
 80055fc:	4619      	mov	r1, r3
 80055fe:	6978      	ldr	r0, [r7, #20]
 8005600:	f000 f81b 	bl	800563a <USBD_GetNextDesc>
 8005604:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b05      	cmp	r3, #5
 800560c:	d108      	bne.n	8005620 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	789b      	ldrb	r3, [r3, #2]
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	429a      	cmp	r2, r3
 800561a:	d008      	beq.n	800562e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	885b      	ldrh	r3, [r3, #2]
 8005624:	b29a      	uxth	r2, r3
 8005626:	897b      	ldrh	r3, [r7, #10]
 8005628:	429a      	cmp	r2, r3
 800562a:	d8e5      	bhi.n	80055f8 <USBD_GetEpDesc+0x32>
 800562c:	e000      	b.n	8005630 <USBD_GetEpDesc+0x6a>
          break;
 800562e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005630:	693b      	ldr	r3, [r7, #16]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	881a      	ldrh	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	4413      	add	r3, r2
 8005654:	b29a      	uxth	r2, r3
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005666:	68fb      	ldr	r3, [r7, #12]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	3301      	adds	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005692:	8a3b      	ldrh	r3, [r7, #16]
 8005694:	021b      	lsls	r3, r3, #8
 8005696:	b21a      	sxth	r2, r3
 8005698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800569c:	4313      	orrs	r3, r2
 800569e:	b21b      	sxth	r3, r3
 80056a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80056a2:	89fb      	ldrh	r3, [r7, #14]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d005      	beq.n	80056d6 <USBD_StdDevReq+0x26>
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d857      	bhi.n	800577e <USBD_StdDevReq+0xce>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00f      	beq.n	80056f2 <USBD_StdDevReq+0x42>
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d153      	bne.n	800577e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	32ae      	adds	r2, #174	; 0xae
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	e04a      	b.n	8005788 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b09      	cmp	r3, #9
 80056f8:	d83b      	bhi.n	8005772 <USBD_StdDevReq+0xc2>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <USBD_StdDevReq+0x50>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005755 	.word	0x08005755
 8005704:	08005769 	.word	0x08005769
 8005708:	08005773 	.word	0x08005773
 800570c:	0800575f 	.word	0x0800575f
 8005710:	08005773 	.word	0x08005773
 8005714:	08005733 	.word	0x08005733
 8005718:	08005729 	.word	0x08005729
 800571c:	08005773 	.word	0x08005773
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800573d 	.word	0x0800573d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa3c 	bl	8005ba8 <USBD_GetDescriptor>
          break;
 8005730:	e024      	b.n	800577c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fba1 	bl	8005e7c <USBD_SetAddress>
          break;
 800573a:	e01f      	b.n	800577c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fbe0 	bl	8005f04 <USBD_SetConfig>
 8005744:	4603      	mov	r3, r0
 8005746:	73fb      	strb	r3, [r7, #15]
          break;
 8005748:	e018      	b.n	800577c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fc83 	bl	8006058 <USBD_GetConfig>
          break;
 8005752:	e013      	b.n	800577c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fcb4 	bl	80060c4 <USBD_GetStatus>
          break;
 800575c:	e00e      	b.n	800577c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fce3 	bl	800612c <USBD_SetFeature>
          break;
 8005766:	e009      	b.n	800577c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fd07 	bl	800617e <USBD_ClrFeature>
          break;
 8005770:	e004      	b.n	800577c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fd5e 	bl	8006236 <USBD_CtlError>
          break;
 800577a:	bf00      	nop
      }
      break;
 800577c:	e004      	b.n	8005788 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fd58 	bl	8006236 <USBD_CtlError>
      break;
 8005786:	bf00      	nop
  }

  return ret;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop

08005794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d005      	beq.n	80057ba <USBD_StdItfReq+0x26>
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d852      	bhi.n	8005858 <USBD_StdItfReq+0xc4>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <USBD_StdItfReq+0x26>
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d14e      	bne.n	8005858 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d840      	bhi.n	800584a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	889b      	ldrh	r3, [r3, #4]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d836      	bhi.n	8005840 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	889b      	ldrh	r3, [r3, #4]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fed9 	bl	8005592 <USBD_CoreFindIF>
 80057e0:	4603      	mov	r3, r0
 80057e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	2bff      	cmp	r3, #255	; 0xff
 80057e8:	d01d      	beq.n	8005826 <USBD_StdItfReq+0x92>
 80057ea:	7bbb      	ldrb	r3, [r7, #14]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11a      	bne.n	8005826 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80057f0:	7bba      	ldrb	r2, [r7, #14]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	32ae      	adds	r2, #174	; 0xae
 80057f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00f      	beq.n	8005820 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005800:	7bba      	ldrb	r2, [r7, #14]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005808:	7bba      	ldrb	r2, [r7, #14]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	32ae      	adds	r2, #174	; 0xae
 800580e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
 800581a:	4603      	mov	r3, r0
 800581c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800581e:	e004      	b.n	800582a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005824:	e001      	b.n	800582a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005826:	2303      	movs	r3, #3
 8005828:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	88db      	ldrh	r3, [r3, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d110      	bne.n	8005854 <USBD_StdItfReq+0xc0>
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fdc7 	bl	80063cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800583e:	e009      	b.n	8005854 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fcf7 	bl	8006236 <USBD_CtlError>
          break;
 8005848:	e004      	b.n	8005854 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fcf2 	bl	8006236 <USBD_CtlError>
          break;
 8005852:	e000      	b.n	8005856 <USBD_StdItfReq+0xc2>
          break;
 8005854:	bf00      	nop
      }
      break;
 8005856:	e004      	b.n	8005862 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fceb 	bl	8006236 <USBD_CtlError>
      break;
 8005860:	bf00      	nop
  }

  return ret;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	889b      	ldrh	r3, [r3, #4]
 800587e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d007      	beq.n	800589c <USBD_StdEPReq+0x30>
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	f200 817f 	bhi.w	8005b90 <USBD_StdEPReq+0x324>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d02a      	beq.n	80058ec <USBD_StdEPReq+0x80>
 8005896:	2b20      	cmp	r3, #32
 8005898:	f040 817a 	bne.w	8005b90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fe83 	bl	80055ac <USBD_CoreFindEP>
 80058a6:	4603      	mov	r3, r0
 80058a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058aa:	7b7b      	ldrb	r3, [r7, #13]
 80058ac:	2bff      	cmp	r3, #255	; 0xff
 80058ae:	f000 8174 	beq.w	8005b9a <USBD_StdEPReq+0x32e>
 80058b2:	7b7b      	ldrb	r3, [r7, #13]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 8170 	bne.w	8005b9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80058ba:	7b7a      	ldrb	r2, [r7, #13]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80058c2:	7b7a      	ldrb	r2, [r7, #13]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	32ae      	adds	r2, #174	; 0xae
 80058c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8163 	beq.w	8005b9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80058d4:	7b7a      	ldrb	r2, [r7, #13]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	32ae      	adds	r2, #174	; 0xae
 80058da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058ea:	e156      	b.n	8005b9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d008      	beq.n	8005906 <USBD_StdEPReq+0x9a>
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	f300 8145 	bgt.w	8005b84 <USBD_StdEPReq+0x318>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 809b 	beq.w	8005a36 <USBD_StdEPReq+0x1ca>
 8005900:	2b01      	cmp	r3, #1
 8005902:	d03c      	beq.n	800597e <USBD_StdEPReq+0x112>
 8005904:	e13e      	b.n	8005b84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d002      	beq.n	8005918 <USBD_StdEPReq+0xac>
 8005912:	2b03      	cmp	r3, #3
 8005914:	d016      	beq.n	8005944 <USBD_StdEPReq+0xd8>
 8005916:	e02c      	b.n	8005972 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00d      	beq.n	800593a <USBD_StdEPReq+0xce>
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d00a      	beq.n	800593a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 f975 	bl	8006c18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 f971 	bl	8006c18 <USBD_LL_StallEP>
 8005936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005938:	e020      	b.n	800597c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fc7a 	bl	8006236 <USBD_CtlError>
              break;
 8005942:	e01b      	b.n	800597c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	885b      	ldrh	r3, [r3, #2]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10e      	bne.n	800596a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <USBD_StdEPReq+0xfe>
 8005952:	7bbb      	ldrb	r3, [r7, #14]
 8005954:	2b80      	cmp	r3, #128	; 0x80
 8005956:	d008      	beq.n	800596a <USBD_StdEPReq+0xfe>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	88db      	ldrh	r3, [r3, #6]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 f957 	bl	8006c18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fd2e 	bl	80063cc <USBD_CtlSendStatus>

              break;
 8005970:	e004      	b.n	800597c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fc5e 	bl	8006236 <USBD_CtlError>
              break;
 800597a:	bf00      	nop
          }
          break;
 800597c:	e107      	b.n	8005b8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d002      	beq.n	8005990 <USBD_StdEPReq+0x124>
 800598a:	2b03      	cmp	r3, #3
 800598c:	d016      	beq.n	80059bc <USBD_StdEPReq+0x150>
 800598e:	e04b      	b.n	8005a28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005990:	7bbb      	ldrb	r3, [r7, #14]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <USBD_StdEPReq+0x146>
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	2b80      	cmp	r3, #128	; 0x80
 800599a:	d00a      	beq.n	80059b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800599c:	7bbb      	ldrb	r3, [r7, #14]
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 f939 	bl	8006c18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059a6:	2180      	movs	r1, #128	; 0x80
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f935 	bl	8006c18 <USBD_LL_StallEP>
 80059ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059b0:	e040      	b.n	8005a34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fc3e 	bl	8006236 <USBD_CtlError>
              break;
 80059ba:	e03b      	b.n	8005a34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	885b      	ldrh	r3, [r3, #2]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d136      	bne.n	8005a32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 f93f 	bl	8006c56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fcf7 	bl	80063cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fde2 	bl	80055ac <USBD_CoreFindEP>
 80059e8:	4603      	mov	r3, r0
 80059ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059ec:	7b7b      	ldrb	r3, [r7, #13]
 80059ee:	2bff      	cmp	r3, #255	; 0xff
 80059f0:	d01f      	beq.n	8005a32 <USBD_StdEPReq+0x1c6>
 80059f2:	7b7b      	ldrb	r3, [r7, #13]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d11c      	bne.n	8005a32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80059f8:	7b7a      	ldrb	r2, [r7, #13]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a00:	7b7a      	ldrb	r2, [r7, #13]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	32ae      	adds	r2, #174	; 0xae
 8005a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a10:	7b7a      	ldrb	r2, [r7, #13]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	32ae      	adds	r2, #174	; 0xae
 8005a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
 8005a22:	4603      	mov	r3, r0
 8005a24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005a26:	e004      	b.n	8005a32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fc03 	bl	8006236 <USBD_CtlError>
              break;
 8005a30:	e000      	b.n	8005a34 <USBD_StdEPReq+0x1c8>
              break;
 8005a32:	bf00      	nop
          }
          break;
 8005a34:	e0ab      	b.n	8005b8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d002      	beq.n	8005a48 <USBD_StdEPReq+0x1dc>
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d032      	beq.n	8005aac <USBD_StdEPReq+0x240>
 8005a46:	e097      	b.n	8005b78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <USBD_StdEPReq+0x1f2>
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d004      	beq.n	8005a5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fbed 	bl	8006236 <USBD_CtlError>
                break;
 8005a5c:	e091      	b.n	8005b82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	da0b      	bge.n	8005a7e <USBD_StdEPReq+0x212>
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	3310      	adds	r3, #16
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	e00b      	b.n	8005a96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	3304      	adds	r3, #4
 8005a96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fc37 	bl	8006318 <USBD_CtlSendData>
              break;
 8005aaa:	e06a      	b.n	8005b82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	da11      	bge.n	8005ad8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d117      	bne.n	8005afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fbb0 	bl	8006236 <USBD_CtlError>
                  break;
 8005ad6:	e054      	b.n	8005b82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	f003 020f 	and.w	r2, r3, #15
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fb9d 	bl	8006236 <USBD_CtlError>
                  break;
 8005afc:	e041      	b.n	8005b82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	da0b      	bge.n	8005b1e <USBD_StdEPReq+0x2b2>
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
 8005b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	3310      	adds	r3, #16
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4413      	add	r3, r2
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	e00b      	b.n	8005b36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4413      	add	r3, r2
 8005b34:	3304      	adds	r3, #4
 8005b36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <USBD_StdEPReq+0x2d8>
 8005b3e:	7bbb      	ldrb	r3, [r7, #14]
 8005b40:	2b80      	cmp	r3, #128	; 0x80
 8005b42:	d103      	bne.n	8005b4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e00e      	b.n	8005b6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 f89f 	bl	8006c94 <USBD_LL_IsStallEP>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e002      	b.n	8005b6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fbd1 	bl	8006318 <USBD_CtlSendData>
              break;
 8005b76:	e004      	b.n	8005b82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fb5b 	bl	8006236 <USBD_CtlError>
              break;
 8005b80:	bf00      	nop
          }
          break;
 8005b82:	e004      	b.n	8005b8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fb55 	bl	8006236 <USBD_CtlError>
          break;
 8005b8c:	bf00      	nop
      }
      break;
 8005b8e:	e005      	b.n	8005b9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fb4f 	bl	8006236 <USBD_CtlError>
      break;
 8005b98:	e000      	b.n	8005b9c <USBD_StdEPReq+0x330>
      break;
 8005b9a:	bf00      	nop
  }

  return ret;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	885b      	ldrh	r3, [r3, #2]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	f200 8128 	bhi.w	8005e1e <USBD_GetDescriptor+0x276>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <USBD_GetDescriptor+0x2c>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005bf1 	.word	0x08005bf1
 8005bd8:	08005c09 	.word	0x08005c09
 8005bdc:	08005c49 	.word	0x08005c49
 8005be0:	08005e1f 	.word	0x08005e1f
 8005be4:	08005e1f 	.word	0x08005e1f
 8005be8:	08005dbf 	.word	0x08005dbf
 8005bec:	08005deb 	.word	0x08005deb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	7c12      	ldrb	r2, [r2, #16]
 8005bfc:	f107 0108 	add.w	r1, r7, #8
 8005c00:	4610      	mov	r0, r2
 8005c02:	4798      	blx	r3
 8005c04:	60f8      	str	r0, [r7, #12]
      break;
 8005c06:	e112      	b.n	8005e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	7c1b      	ldrb	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10d      	bne.n	8005c2c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	f107 0208 	add.w	r2, r7, #8
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
 8005c20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3301      	adds	r3, #1
 8005c26:	2202      	movs	r2, #2
 8005c28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c2a:	e100      	b.n	8005e2e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	f107 0208 	add.w	r2, r7, #8
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4798      	blx	r3
 8005c3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3301      	adds	r3, #1
 8005c42:	2202      	movs	r2, #2
 8005c44:	701a      	strb	r2, [r3, #0]
      break;
 8005c46:	e0f2      	b.n	8005e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	885b      	ldrh	r3, [r3, #2]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	f200 80ac 	bhi.w	8005dac <USBD_GetDescriptor+0x204>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <USBD_GetDescriptor+0xb4>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c75 	.word	0x08005c75
 8005c60:	08005ca9 	.word	0x08005ca9
 8005c64:	08005cdd 	.word	0x08005cdd
 8005c68:	08005d11 	.word	0x08005d11
 8005c6c:	08005d45 	.word	0x08005d45
 8005c70:	08005d79 	.word	0x08005d79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	7c12      	ldrb	r2, [r2, #16]
 8005c8c:	f107 0108 	add.w	r1, r7, #8
 8005c90:	4610      	mov	r0, r2
 8005c92:	4798      	blx	r3
 8005c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c96:	e091      	b.n	8005dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 facb 	bl	8006236 <USBD_CtlError>
            err++;
 8005ca0:	7afb      	ldrb	r3, [r7, #11]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ca6:	e089      	b.n	8005dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	7c12      	ldrb	r2, [r2, #16]
 8005cc0:	f107 0108 	add.w	r1, r7, #8
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
 8005cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cca:	e077      	b.n	8005dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fab1 	bl	8006236 <USBD_CtlError>
            err++;
 8005cd4:	7afb      	ldrb	r3, [r7, #11]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cda:	e06f      	b.n	8005dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	7c12      	ldrb	r2, [r2, #16]
 8005cf4:	f107 0108 	add.w	r1, r7, #8
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
 8005cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cfe:	e05d      	b.n	8005dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa97 	bl	8006236 <USBD_CtlError>
            err++;
 8005d08:	7afb      	ldrb	r3, [r7, #11]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d0e:	e055      	b.n	8005dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	7c12      	ldrb	r2, [r2, #16]
 8005d28:	f107 0108 	add.w	r1, r7, #8
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4798      	blx	r3
 8005d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d32:	e043      	b.n	8005dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa7d 	bl	8006236 <USBD_CtlError>
            err++;
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	72fb      	strb	r3, [r7, #11]
          break;
 8005d42:	e03b      	b.n	8005dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	7c12      	ldrb	r2, [r2, #16]
 8005d5c:	f107 0108 	add.w	r1, r7, #8
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d66:	e029      	b.n	8005dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa63 	bl	8006236 <USBD_CtlError>
            err++;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	3301      	adds	r3, #1
 8005d74:	72fb      	strb	r3, [r7, #11]
          break;
 8005d76:	e021      	b.n	8005dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	7c12      	ldrb	r2, [r2, #16]
 8005d90:	f107 0108 	add.w	r1, r7, #8
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d9a:	e00f      	b.n	8005dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa49 	bl	8006236 <USBD_CtlError>
            err++;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	3301      	adds	r3, #1
 8005da8:	72fb      	strb	r3, [r7, #11]
          break;
 8005daa:	e007      	b.n	8005dbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa41 	bl	8006236 <USBD_CtlError>
          err++;
 8005db4:	7afb      	ldrb	r3, [r7, #11]
 8005db6:	3301      	adds	r3, #1
 8005db8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005dba:	bf00      	nop
      }
      break;
 8005dbc:	e037      	b.n	8005e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	7c1b      	ldrb	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f107 0208 	add.w	r2, r7, #8
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4798      	blx	r3
 8005dd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dd8:	e029      	b.n	8005e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fa2a 	bl	8006236 <USBD_CtlError>
        err++;
 8005de2:	7afb      	ldrb	r3, [r7, #11]
 8005de4:	3301      	adds	r3, #1
 8005de6:	72fb      	strb	r3, [r7, #11]
      break;
 8005de8:	e021      	b.n	8005e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7c1b      	ldrb	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10d      	bne.n	8005e0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	f107 0208 	add.w	r2, r7, #8
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4798      	blx	r3
 8005e02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	2207      	movs	r2, #7
 8005e0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e0c:	e00f      	b.n	8005e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fa10 	bl	8006236 <USBD_CtlError>
        err++;
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e1c:	e007      	b.n	8005e2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fa08 	bl	8006236 <USBD_CtlError>
      err++;
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e2c:	bf00      	nop
  }

  if (err != 0U)
 8005e2e:	7afb      	ldrb	r3, [r7, #11]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11e      	bne.n	8005e72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	88db      	ldrh	r3, [r3, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d016      	beq.n	8005e6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005e3c:	893b      	ldrh	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00e      	beq.n	8005e60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	88da      	ldrh	r2, [r3, #6]
 8005e46:	893b      	ldrh	r3, [r7, #8]
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	bf28      	it	cs
 8005e4c:	4613      	movcs	r3, r2
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e52:	893b      	ldrh	r3, [r7, #8]
 8005e54:	461a      	mov	r2, r3
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fa5d 	bl	8006318 <USBD_CtlSendData>
 8005e5e:	e009      	b.n	8005e74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9e7 	bl	8006236 <USBD_CtlError>
 8005e68:	e004      	b.n	8005e74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 faae 	bl	80063cc <USBD_CtlSendStatus>
 8005e70:	e000      	b.n	8005e74 <USBD_GetDescriptor+0x2cc>
    return;
 8005e72:	bf00      	nop
  }
}
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop

08005e7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	889b      	ldrh	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d131      	bne.n	8005ef2 <USBD_SetAddress+0x76>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	88db      	ldrh	r3, [r3, #6]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d12d      	bne.n	8005ef2 <USBD_SetAddress+0x76>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	885b      	ldrh	r3, [r3, #2]
 8005e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9c:	d829      	bhi.n	8005ef2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	885b      	ldrh	r3, [r3, #2]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d104      	bne.n	8005ec0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f9bc 	bl	8006236 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebe:	e01d      	b.n	8005efc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	7bfa      	ldrb	r2, [r7, #15]
 8005ec4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 ff0d 	bl	8006cec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa7a 	bl	80063cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d004      	beq.n	8005ee8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee6:	e009      	b.n	8005efc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef0:	e004      	b.n	8005efc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f99e 	bl	8006236 <USBD_CtlError>
  }
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	885b      	ldrh	r3, [r3, #2]
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	4b4e      	ldr	r3, [pc, #312]	; (8006054 <USBD_SetConfig+0x150>)
 8005f1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f1c:	4b4d      	ldr	r3, [pc, #308]	; (8006054 <USBD_SetConfig+0x150>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d905      	bls.n	8005f30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f985 	bl	8006236 <USBD_CtlError>
    return USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e08c      	b.n	800604a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d002      	beq.n	8005f42 <USBD_SetConfig+0x3e>
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d029      	beq.n	8005f94 <USBD_SetConfig+0x90>
 8005f40:	e075      	b.n	800602e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005f42:	4b44      	ldr	r3, [pc, #272]	; (8006054 <USBD_SetConfig+0x150>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d020      	beq.n	8005f8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005f4a:	4b42      	ldr	r3, [pc, #264]	; (8006054 <USBD_SetConfig+0x150>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f54:	4b3f      	ldr	r3, [pc, #252]	; (8006054 <USBD_SetConfig+0x150>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fe ffe7 	bl	8004f2e <USBD_SetClassConfig>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f962 	bl	8006236 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f7a:	e065      	b.n	8006048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa25 	bl	80063cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2203      	movs	r2, #3
 8005f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f8a:	e05d      	b.n	8006048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fa1d 	bl	80063cc <USBD_CtlSendStatus>
      break;
 8005f92:	e059      	b.n	8006048 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f94:	4b2f      	ldr	r3, [pc, #188]	; (8006054 <USBD_SetConfig+0x150>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d112      	bne.n	8005fc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005fa4:	4b2b      	ldr	r3, [pc, #172]	; (8006054 <USBD_SetConfig+0x150>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fae:	4b29      	ldr	r3, [pc, #164]	; (8006054 <USBD_SetConfig+0x150>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7fe ffd6 	bl	8004f66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa06 	bl	80063cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005fc0:	e042      	b.n	8006048 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005fc2:	4b24      	ldr	r3, [pc, #144]	; (8006054 <USBD_SetConfig+0x150>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d02a      	beq.n	8006026 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fe ffc4 	bl	8004f66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005fde:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <USBD_SetConfig+0x150>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <USBD_SetConfig+0x150>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fe ff9d 	bl	8004f2e <USBD_SetClassConfig>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00f      	beq.n	800601e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f918 	bl	8006236 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fe ffa9 	bl	8004f66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800601c:	e014      	b.n	8006048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9d4 	bl	80063cc <USBD_CtlSendStatus>
      break;
 8006024:	e010      	b.n	8006048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9d0 	bl	80063cc <USBD_CtlSendStatus>
      break;
 800602c:	e00c      	b.n	8006048 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f900 	bl	8006236 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <USBD_SetConfig+0x150>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7fe ff92 	bl	8004f66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
      break;
 8006046:	bf00      	nop
  }

  return ret;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	2000011c 	.word	0x2000011c

08006058 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	88db      	ldrh	r3, [r3, #6]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d004      	beq.n	8006074 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f8e2 	bl	8006236 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006072:	e023      	b.n	80060bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	dc02      	bgt.n	8006086 <USBD_GetConfig+0x2e>
 8006080:	2b00      	cmp	r3, #0
 8006082:	dc03      	bgt.n	800608c <USBD_GetConfig+0x34>
 8006084:	e015      	b.n	80060b2 <USBD_GetConfig+0x5a>
 8006086:	2b03      	cmp	r3, #3
 8006088:	d00b      	beq.n	80060a2 <USBD_GetConfig+0x4a>
 800608a:	e012      	b.n	80060b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3308      	adds	r3, #8
 8006096:	2201      	movs	r2, #1
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f93c 	bl	8006318 <USBD_CtlSendData>
        break;
 80060a0:	e00c      	b.n	80060bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3304      	adds	r3, #4
 80060a6:	2201      	movs	r2, #1
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f934 	bl	8006318 <USBD_CtlSendData>
        break;
 80060b0:	e004      	b.n	80060bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8be 	bl	8006236 <USBD_CtlError>
        break;
 80060ba:	bf00      	nop
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d81e      	bhi.n	800611a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	88db      	ldrh	r3, [r3, #6]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d004      	beq.n	80060ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8a5 	bl	8006236 <USBD_CtlError>
        break;
 80060ec:	e01a      	b.n	8006124 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f043 0202 	orr.w	r2, r3, #2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	330c      	adds	r3, #12
 800610e:	2202      	movs	r2, #2
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f900 	bl	8006318 <USBD_CtlSendData>
      break;
 8006118:	e004      	b.n	8006124 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f88a 	bl	8006236 <USBD_CtlError>
      break;
 8006122:	bf00      	nop
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	885b      	ldrh	r3, [r3, #2]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d107      	bne.n	800614e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f940 	bl	80063cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800614c:	e013      	b.n	8006176 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d10b      	bne.n	800616e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	889b      	ldrh	r3, [r3, #4]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	b29b      	uxth	r3, r3
 800615e:	b2da      	uxtb	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f930 	bl	80063cc <USBD_CtlSendStatus>
}
 800616c:	e003      	b.n	8006176 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f860 	bl	8006236 <USBD_CtlError>
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800618e:	b2db      	uxtb	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	2b02      	cmp	r3, #2
 8006194:	d80b      	bhi.n	80061ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	885b      	ldrh	r3, [r3, #2]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10c      	bne.n	80061b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f910 	bl	80063cc <USBD_CtlSendStatus>
      }
      break;
 80061ac:	e004      	b.n	80061b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f840 	bl	8006236 <USBD_CtlError>
      break;
 80061b6:	e000      	b.n	80061ba <USBD_ClrFeature+0x3c>
      break;
 80061b8:	bf00      	nop
  }
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fa41 	bl	8005674 <SWAPBYTE>
 80061f2:	4603      	mov	r3, r0
 80061f4:	461a      	mov	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3301      	adds	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff fa34 	bl	8005674 <SWAPBYTE>
 800620c:	4603      	mov	r3, r0
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3301      	adds	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3301      	adds	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fa27 	bl	8005674 <SWAPBYTE>
 8006226:	4603      	mov	r3, r0
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	80da      	strh	r2, [r3, #6]
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006240:	2180      	movs	r1, #128	; 0x80
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fce8 	bl	8006c18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006248:	2100      	movs	r1, #0
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fce4 	bl	8006c18 <USBD_LL_StallEP>
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d036      	beq.n	80062dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006272:	6938      	ldr	r0, [r7, #16]
 8006274:	f000 f836 	bl	80062e4 <USBD_GetLen>
 8006278:	4603      	mov	r3, r0
 800627a:	3301      	adds	r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	4413      	add	r3, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	7812      	ldrb	r2, [r2, #0]
 8006290:	701a      	strb	r2, [r3, #0]
  idx++;
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	3301      	adds	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	2203      	movs	r2, #3
 80062a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
 80062a4:	3301      	adds	r3, #1
 80062a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80062a8:	e013      	b.n	80062d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4413      	add	r3, r2
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	7812      	ldrb	r2, [r2, #0]
 80062b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3301      	adds	r3, #1
 80062ba:	613b      	str	r3, [r7, #16]
    idx++;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	3301      	adds	r3, #1
 80062c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	4413      	add	r3, r2
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	3301      	adds	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e7      	bne.n	80062aa <USBD_GetString+0x52>
 80062da:	e000      	b.n	80062de <USBD_GetString+0x86>
    return;
 80062dc:	bf00      	nop
  }
}
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80062f4:	e005      	b.n	8006302 <USBD_GetLen+0x1e>
  {
    len++;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	3301      	adds	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	3301      	adds	r3, #1
 8006300:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f5      	bne.n	80062f6 <USBD_GetLen+0x12>
  }

  return len;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2202      	movs	r2, #2
 8006328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	2100      	movs	r1, #0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fcf3 	bl	8006d2a <USBD_LL_Transmit>

  return USBD_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	2100      	movs	r1, #0
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fce2 	bl	8006d2a <USBD_LL_Transmit>

  return USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2203      	movs	r2, #3
 8006380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	2100      	movs	r1, #0
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fce6 	bl	8006d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	2100      	movs	r1, #0
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fcd5 	bl	8006d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2204      	movs	r2, #4
 80063d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063dc:	2300      	movs	r3, #0
 80063de:	2200      	movs	r2, #0
 80063e0:	2100      	movs	r1, #0
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fca1 	bl	8006d2a <USBD_LL_Transmit>

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2205      	movs	r2, #5
 80063fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006402:	2300      	movs	r3, #0
 8006404:	2200      	movs	r2, #0
 8006406:	2100      	movs	r1, #0
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fcaf 	bl	8006d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800641c:	2201      	movs	r2, #1
 800641e:	4912      	ldr	r1, [pc, #72]	; (8006468 <MX_USB_DEVICE_Init+0x50>)
 8006420:	4812      	ldr	r0, [pc, #72]	; (800646c <MX_USB_DEVICE_Init+0x54>)
 8006422:	f7fe fd07 	bl	8004e34 <USBD_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800642c:	f7fa f8fe 	bl	800062c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8006430:	490f      	ldr	r1, [pc, #60]	; (8006470 <MX_USB_DEVICE_Init+0x58>)
 8006432:	480e      	ldr	r0, [pc, #56]	; (800646c <MX_USB_DEVICE_Init+0x54>)
 8006434:	f7fe fd2e 	bl	8004e94 <USBD_RegisterClass>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800643e:	f7fa f8f5 	bl	800062c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8006442:	490c      	ldr	r1, [pc, #48]	; (8006474 <MX_USB_DEVICE_Init+0x5c>)
 8006444:	4809      	ldr	r0, [pc, #36]	; (800646c <MX_USB_DEVICE_Init+0x54>)
 8006446:	f7fe fc1f 	bl	8004c88 <USBD_CDC_RegisterInterface>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006450:	f7fa f8ec 	bl	800062c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8006454:	4805      	ldr	r0, [pc, #20]	; (800646c <MX_USB_DEVICE_Init+0x54>)
 8006456:	f7fe fd53 	bl	8004f00 <USBD_Start>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006460:	f7fa f8e4 	bl	800062c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006464:	bf00      	nop
 8006466:	bd80      	pop	{r7, pc}
 8006468:	200000ac 	.word	0x200000ac
 800646c:	20000120 	.word	0x20000120
 8006470:	20000018 	.word	0x20000018
 8006474:	20000098 	.word	0x20000098

08006478 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800647c:	2200      	movs	r2, #0
 800647e:	4905      	ldr	r1, [pc, #20]	; (8006494 <CDC_Init_HS+0x1c>)
 8006480:	4805      	ldr	r0, [pc, #20]	; (8006498 <CDC_Init_HS+0x20>)
 8006482:	f7fe fc1b 	bl	8004cbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8006486:	4905      	ldr	r1, [pc, #20]	; (800649c <CDC_Init_HS+0x24>)
 8006488:	4803      	ldr	r0, [pc, #12]	; (8006498 <CDC_Init_HS+0x20>)
 800648a:	f7fe fc39 	bl	8004d00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800648e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8006490:	4618      	mov	r0, r3
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000bfc 	.word	0x20000bfc
 8006498:	20000120 	.word	0x20000120
 800649c:	200003fc 	.word	0x200003fc

080064a0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80064a4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	6039      	str	r1, [r7, #0]
 80064ba:	71fb      	strb	r3, [r7, #7]
 80064bc:	4613      	mov	r3, r2
 80064be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	2b23      	cmp	r3, #35	; 0x23
 80064c4:	d84a      	bhi.n	800655c <CDC_Control_HS+0xac>
 80064c6:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <CDC_Control_HS+0x1c>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	0800655d 	.word	0x0800655d
 80064d0:	0800655d 	.word	0x0800655d
 80064d4:	0800655d 	.word	0x0800655d
 80064d8:	0800655d 	.word	0x0800655d
 80064dc:	0800655d 	.word	0x0800655d
 80064e0:	0800655d 	.word	0x0800655d
 80064e4:	0800655d 	.word	0x0800655d
 80064e8:	0800655d 	.word	0x0800655d
 80064ec:	0800655d 	.word	0x0800655d
 80064f0:	0800655d 	.word	0x0800655d
 80064f4:	0800655d 	.word	0x0800655d
 80064f8:	0800655d 	.word	0x0800655d
 80064fc:	0800655d 	.word	0x0800655d
 8006500:	0800655d 	.word	0x0800655d
 8006504:	0800655d 	.word	0x0800655d
 8006508:	0800655d 	.word	0x0800655d
 800650c:	0800655d 	.word	0x0800655d
 8006510:	0800655d 	.word	0x0800655d
 8006514:	0800655d 	.word	0x0800655d
 8006518:	0800655d 	.word	0x0800655d
 800651c:	0800655d 	.word	0x0800655d
 8006520:	0800655d 	.word	0x0800655d
 8006524:	0800655d 	.word	0x0800655d
 8006528:	0800655d 	.word	0x0800655d
 800652c:	0800655d 	.word	0x0800655d
 8006530:	0800655d 	.word	0x0800655d
 8006534:	0800655d 	.word	0x0800655d
 8006538:	0800655d 	.word	0x0800655d
 800653c:	0800655d 	.word	0x0800655d
 8006540:	0800655d 	.word	0x0800655d
 8006544:	0800655d 	.word	0x0800655d
 8006548:	0800655d 	.word	0x0800655d
 800654c:	0800655d 	.word	0x0800655d
 8006550:	0800655d 	.word	0x0800655d
 8006554:	0800655d 	.word	0x0800655d
 8006558:	0800655d 	.word	0x0800655d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800655c:	bf00      	nop
  }

  return (USBD_OK);
 800655e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4808      	ldr	r0, [pc, #32]	; (800659c <CDC_Receive_HS+0x30>)
 800657a:	f7fe fbc1 	bl	8004d00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800657e:	4807      	ldr	r0, [pc, #28]	; (800659c <CDC_Receive_HS+0x30>)
 8006580:	f7fe fc22 	bl	8004dc8 <USBD_CDC_ReceivePacket>
  CDC_Transmit_HS(Buf,*Len);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f807 	bl	80065a0 <CDC_Transmit_HS>
  return (USBD_OK);
 8006592:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000120 	.word	0x20000120

080065a0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80065b0:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <CDC_Transmit_HS+0x48>)
 80065b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e00b      	b.n	80065de <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80065c6:	887b      	ldrh	r3, [r7, #2]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4806      	ldr	r0, [pc, #24]	; (80065e8 <CDC_Transmit_HS+0x48>)
 80065ce:	f7fe fb75 	bl	8004cbc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80065d2:	4805      	ldr	r0, [pc, #20]	; (80065e8 <CDC_Transmit_HS+0x48>)
 80065d4:	f7fe fbb2 	bl	8004d3c <USBD_CDC_TransmitPacket>
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000120 	.word	0x20000120

080065ec <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80065fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006602:	4618      	mov	r0, r3
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	6039      	str	r1, [r7, #0]
 800661a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2212      	movs	r2, #18
 8006620:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8006622:	4b03      	ldr	r3, [pc, #12]	; (8006630 <USBD_HS_DeviceDescriptor+0x20>)
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	200000c8 	.word	0x200000c8

08006634 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	6039      	str	r1, [r7, #0]
 800663e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2204      	movs	r2, #4
 8006644:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006646:	4b03      	ldr	r3, [pc, #12]	; (8006654 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	200000dc 	.word	0x200000dc

08006658 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	6039      	str	r1, [r7, #0]
 8006662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4907      	ldr	r1, [pc, #28]	; (800668c <USBD_HS_ProductStrDescriptor+0x34>)
 800666e:	4808      	ldr	r0, [pc, #32]	; (8006690 <USBD_HS_ProductStrDescriptor+0x38>)
 8006670:	f7ff fdf2 	bl	8006258 <USBD_GetString>
 8006674:	e004      	b.n	8006680 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4904      	ldr	r1, [pc, #16]	; (800668c <USBD_HS_ProductStrDescriptor+0x34>)
 800667a:	4805      	ldr	r0, [pc, #20]	; (8006690 <USBD_HS_ProductStrDescriptor+0x38>)
 800667c:	f7ff fdec 	bl	8006258 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006680:	4b02      	ldr	r3, [pc, #8]	; (800668c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	200013fc 	.word	0x200013fc
 8006690:	08006ecc 	.word	0x08006ecc

08006694 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	6039      	str	r1, [r7, #0]
 800669e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	4904      	ldr	r1, [pc, #16]	; (80066b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80066a4:	4804      	ldr	r0, [pc, #16]	; (80066b8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80066a6:	f7ff fdd7 	bl	8006258 <USBD_GetString>
  return USBD_StrDesc;
 80066aa:	4b02      	ldr	r3, [pc, #8]	; (80066b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	200013fc 	.word	0x200013fc
 80066b8:	08006ee4 	.word	0x08006ee4

080066bc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	6039      	str	r1, [r7, #0]
 80066c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	221a      	movs	r2, #26
 80066cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066ce:	f000 f843 	bl	8006758 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80066d2:	4b02      	ldr	r3, [pc, #8]	; (80066dc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	200000e0 	.word	0x200000e0

080066e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	6039      	str	r1, [r7, #0]
 80066ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d105      	bne.n	80066fe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	4907      	ldr	r1, [pc, #28]	; (8006714 <USBD_HS_ConfigStrDescriptor+0x34>)
 80066f6:	4808      	ldr	r0, [pc, #32]	; (8006718 <USBD_HS_ConfigStrDescriptor+0x38>)
 80066f8:	f7ff fdae 	bl	8006258 <USBD_GetString>
 80066fc:	e004      	b.n	8006708 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4904      	ldr	r1, [pc, #16]	; (8006714 <USBD_HS_ConfigStrDescriptor+0x34>)
 8006702:	4805      	ldr	r0, [pc, #20]	; (8006718 <USBD_HS_ConfigStrDescriptor+0x38>)
 8006704:	f7ff fda8 	bl	8006258 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006708:	4b02      	ldr	r3, [pc, #8]	; (8006714 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200013fc 	.word	0x200013fc
 8006718:	08006ef8 	.word	0x08006ef8

0800671c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4907      	ldr	r1, [pc, #28]	; (8006750 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8006732:	4808      	ldr	r0, [pc, #32]	; (8006754 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8006734:	f7ff fd90 	bl	8006258 <USBD_GetString>
 8006738:	e004      	b.n	8006744 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	4904      	ldr	r1, [pc, #16]	; (8006750 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800673e:	4805      	ldr	r0, [pc, #20]	; (8006754 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8006740:	f7ff fd8a 	bl	8006258 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006744:	4b02      	ldr	r3, [pc, #8]	; (8006750 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	200013fc 	.word	0x200013fc
 8006754:	08006f04 	.word	0x08006f04

08006758 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800675e:	4b0f      	ldr	r3, [pc, #60]	; (800679c <Get_SerialNum+0x44>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006764:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <Get_SerialNum+0x48>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800676a:	4b0e      	ldr	r3, [pc, #56]	; (80067a4 <Get_SerialNum+0x4c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4413      	add	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800677e:	2208      	movs	r2, #8
 8006780:	4909      	ldr	r1, [pc, #36]	; (80067a8 <Get_SerialNum+0x50>)
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 f814 	bl	80067b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006788:	2204      	movs	r2, #4
 800678a:	4908      	ldr	r1, [pc, #32]	; (80067ac <Get_SerialNum+0x54>)
 800678c:	68b8      	ldr	r0, [r7, #8]
 800678e:	f000 f80f 	bl	80067b0 <IntToUnicode>
  }
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	1fff7a10 	.word	0x1fff7a10
 80067a0:	1fff7a14 	.word	0x1fff7a14
 80067a4:	1fff7a18 	.word	0x1fff7a18
 80067a8:	200000e2 	.word	0x200000e2
 80067ac:	200000f2 	.word	0x200000f2

080067b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	4613      	mov	r3, r2
 80067bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	75fb      	strb	r3, [r7, #23]
 80067c6:	e027      	b.n	8006818 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	0f1b      	lsrs	r3, r3, #28
 80067cc:	2b09      	cmp	r3, #9
 80067ce:	d80b      	bhi.n	80067e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	0f1b      	lsrs	r3, r3, #28
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	4619      	mov	r1, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	440b      	add	r3, r1
 80067e0:	3230      	adds	r2, #48	; 0x30
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e00a      	b.n	80067fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	0f1b      	lsrs	r3, r3, #28
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	4619      	mov	r1, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	440b      	add	r3, r1
 80067f8:	3237      	adds	r2, #55	; 0x37
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	3301      	adds	r3, #1
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4413      	add	r3, r2
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	3301      	adds	r3, #1
 8006816:	75fb      	strb	r3, [r7, #23]
 8006818:	7dfa      	ldrb	r2, [r7, #23]
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	429a      	cmp	r2, r3
 800681e:	d3d3      	bcc.n	80067c8 <IntToUnicode+0x18>
  }
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006838:	f107 0314 	add.w	r3, r7, #20
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	609a      	str	r2, [r3, #8]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <HAL_PCD_MspInit+0x94>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d134      	bne.n	80068bc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <HAL_PCD_MspInit+0x98>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_PCD_MspInit+0x98>)
 800685c:	f043 0302 	orr.w	r3, r3, #2
 8006860:	6313      	str	r3, [r2, #48]	; 0x30
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_PCD_MspInit+0x98>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800686e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006874:	2302      	movs	r3, #2
 8006876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006878:	2300      	movs	r3, #0
 800687a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800687c:	2303      	movs	r3, #3
 800687e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006880:	230c      	movs	r3, #12
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	4619      	mov	r1, r3
 800688a:	4810      	ldr	r0, [pc, #64]	; (80068cc <HAL_PCD_MspInit+0x9c>)
 800688c:	f7fa f914 	bl	8000ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <HAL_PCD_MspInit+0x98>)
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <HAL_PCD_MspInit+0x98>)
 800689a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800689e:	6313      	str	r3, [r2, #48]	; 0x30
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <HAL_PCD_MspInit+0x98>)
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80068ac:	2200      	movs	r2, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	204d      	movs	r0, #77	; 0x4d
 80068b2:	f7fa f8ca 	bl	8000a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80068b6:	204d      	movs	r0, #77	; 0x4d
 80068b8:	f7fa f8e3 	bl	8000a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80068bc:	bf00      	nop
 80068be:	3728      	adds	r7, #40	; 0x28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40040000 	.word	0x40040000
 80068c8:	40023800 	.word	0x40023800
 80068cc:	40020400 	.word	0x40020400

080068d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f7fe fb57 	bl	8004f9a <USBD_LL_SetupStage>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	4619      	mov	r1, r3
 800691e:	f7fe fb91 	bl	8005044 <USBD_LL_DataOutStage>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	334c      	adds	r3, #76	; 0x4c
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	4619      	mov	r1, r3
 8006952:	f7fe fc2a 	bl	80051aa <USBD_LL_DataInStage>
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fd5e 	bl	800542e <USBD_LL_SOF>
}
 8006972:	bf00      	nop
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006982:	2301      	movs	r3, #1
 8006984:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
 8006992:	e008      	b.n	80069a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d102      	bne.n	80069a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
 80069a0:	e001      	b.n	80069a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80069a2:	f7f9 fe43 	bl	800062c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069ac:	7bfa      	ldrb	r2, [r7, #15]
 80069ae:	4611      	mov	r1, r2
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe fcfe 	bl	80053b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe fca6 	bl	800530e <USBD_LL_Reset>
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fcf9 	bl	80053d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <HAL_PCD_SuspendCallback+0x48>)
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	4a03      	ldr	r2, [pc, #12]	; (8006a14 <HAL_PCD_SuspendCallback+0x48>)
 8006a06:	f043 0306 	orr.w	r3, r3, #6
 8006a0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	e000ed00 	.word	0xe000ed00

08006a18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fce9 	bl	80053fe <USBD_LL_Resume>
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fd41 	bl	80054d2 <USBD_LL_IsoOUTIncomplete>
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fcfd 	bl	800546e <USBD_LL_IsoINIncomplete>
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe fd53 	bl	8005536 <USBD_LL_DevConnected>
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fd50 	bl	800554c <USBD_LL_DevDisconnected>
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d140      	bne.n	8006b46 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8006ac4:	4a22      	ldr	r2, [pc, #136]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a20      	ldr	r2, [pc, #128]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006ad0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006ad4:	4b1e      	ldr	r3, [pc, #120]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006ad6:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <USBD_LL_Init+0xa0>)
 8006ad8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8006ada:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006adc:	2206      	movs	r2, #6
 8006ade:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006ae6:	4b1a      	ldr	r3, [pc, #104]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8006aec:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006aee:	2202      	movs	r2, #2
 8006af0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8006af2:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8006af8:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8006afe:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006b04:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8006b16:	480e      	ldr	r0, [pc, #56]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006b18:	f7fa f97a 	bl	8000e10 <HAL_PCD_Init>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8006b22:	f7f9 fd83 	bl	800062c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8006b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b2a:	4809      	ldr	r0, [pc, #36]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006b2c:	f7fb fbd1 	bl	80022d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8006b30:	2280      	movs	r2, #128	; 0x80
 8006b32:	2100      	movs	r1, #0
 8006b34:	4806      	ldr	r0, [pc, #24]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006b36:	f7fb fb85 	bl	8002244 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8006b3a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006b3e:	2101      	movs	r1, #1
 8006b40:	4803      	ldr	r0, [pc, #12]	; (8006b50 <USBD_LL_Init+0x9c>)
 8006b42:	f7fb fb7f 	bl	8002244 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	200015fc 	.word	0x200015fc
 8006b54:	40040000 	.word	0x40040000

08006b58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fa fa6b 	bl	800104a <HAL_PCD_Start>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f942 	bl	8006e04 <USBD_Get_USB_Status>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	4608      	mov	r0, r1
 8006b98:	4611      	mov	r1, r2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	70fb      	strb	r3, [r7, #3]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70bb      	strb	r3, [r7, #2]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006bb6:	78bb      	ldrb	r3, [r7, #2]
 8006bb8:	883a      	ldrh	r2, [r7, #0]
 8006bba:	78f9      	ldrb	r1, [r7, #3]
 8006bbc:	f7fa ff3c 	bl	8001a38 <HAL_PCD_EP_Open>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f91c 	bl	8006e04 <USBD_Get_USB_Status>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fa ff85 	bl	8001b08 <HAL_PCD_EP_Close>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 f8fd 	bl	8006e04 <USBD_Get_USB_Status>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fb f85d 	bl	8001cf6 <HAL_PCD_EP_SetStall>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f8de 	bl	8006e04 <USBD_Get_USB_Status>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fb f8a2 	bl	8001dbe <HAL_PCD_EP_ClrStall>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 f8bf 	bl	8006e04 <USBD_Get_USB_Status>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ca6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da0b      	bge.n	8006cc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cb6:	68f9      	ldr	r1, [r7, #12]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	333e      	adds	r3, #62	; 0x3e
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	e00b      	b.n	8006ce0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d06:	78fa      	ldrb	r2, [r7, #3]
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fa fe6f 	bl	80019ee <HAL_PCD_SetAddress>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f874 	bl	8006e04 <USBD_Get_USB_Status>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b086      	sub	sp, #24
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	460b      	mov	r3, r1
 8006d38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006d48:	7af9      	ldrb	r1, [r7, #11]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	f7fa ff88 	bl	8001c62 <HAL_PCD_EP_Transmit>
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 f853 	bl	8006e04 <USBD_Get_USB_Status>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d62:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006d8a:	7af9      	ldrb	r1, [r7, #11]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	f7fa ff04 	bl	8001b9c <HAL_PCD_EP_Receive>
 8006d94:	4603      	mov	r3, r0
 8006d96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f832 	bl	8006e04 <USBD_Get_USB_Status>
 8006da0:	4603      	mov	r3, r0
 8006da2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006da4:	7dbb      	ldrb	r3, [r7, #22]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006dc0:	78fa      	ldrb	r2, [r7, #3]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fa ff34 	bl	8001c32 <HAL_PCD_EP_GetRxCount>
 8006dca:	4603      	mov	r3, r0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006ddc:	4b03      	ldr	r3, [pc, #12]	; (8006dec <USBD_static_malloc+0x18>)
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20001b08 	.word	0x20001b08

08006df0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d817      	bhi.n	8006e48 <USBD_Get_USB_Status+0x44>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <USBD_Get_USB_Status+0x1c>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e37 	.word	0x08006e37
 8006e28:	08006e3d 	.word	0x08006e3d
 8006e2c:	08006e43 	.word	0x08006e43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73fb      	strb	r3, [r7, #15]
    break;
 8006e34:	e00b      	b.n	8006e4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	73fb      	strb	r3, [r7, #15]
    break;
 8006e3a:	e008      	b.n	8006e4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e40:	e005      	b.n	8006e4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e42:	2303      	movs	r3, #3
 8006e44:	73fb      	strb	r3, [r7, #15]
    break;
 8006e46:	e002      	b.n	8006e4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e4c:	bf00      	nop
  }
  return usb_status;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4d0d      	ldr	r5, [pc, #52]	; (8006e94 <__libc_init_array+0x38>)
 8006e60:	4c0d      	ldr	r4, [pc, #52]	; (8006e98 <__libc_init_array+0x3c>)
 8006e62:	1b64      	subs	r4, r4, r5
 8006e64:	10a4      	asrs	r4, r4, #2
 8006e66:	2600      	movs	r6, #0
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	4d0b      	ldr	r5, [pc, #44]	; (8006e9c <__libc_init_array+0x40>)
 8006e6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ea0 <__libc_init_array+0x44>)
 8006e70:	f000 f820 	bl	8006eb4 <_init>
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	2600      	movs	r6, #0
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e84:	4798      	blx	r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8e:	4798      	blx	r3
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	08006f2c 	.word	0x08006f2c
 8006e98:	08006f2c 	.word	0x08006f2c
 8006e9c:	08006f2c 	.word	0x08006f2c
 8006ea0:	08006f30 	.word	0x08006f30

08006ea4 <memset>:
 8006ea4:	4402      	add	r2, r0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d100      	bne.n	8006eae <memset+0xa>
 8006eac:	4770      	bx	lr
 8006eae:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb2:	e7f9      	b.n	8006ea8 <memset+0x4>

08006eb4 <_init>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	bf00      	nop
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr

08006ec0 <_fini>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	bf00      	nop
 8006ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec6:	bc08      	pop	{r3}
 8006ec8:	469e      	mov	lr, r3
 8006eca:	4770      	bx	lr
